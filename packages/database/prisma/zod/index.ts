import { z } from 'zod';
import { Prisma } from '@prisma/client';
import Decimal from 'decimal.js';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;

// DECIMAL
//------------------------------------------------------

export const DecimalJsLikeSchema: z.ZodType<Prisma.DecimalJsLike> = z.object({
  d: z.array(z.number()),
  e: z.number(),
  s: z.number(),
  toFixed: z.function(z.tuple([]), z.string()),
})

export const DECIMAL_STRING_REGEX = /^(?:-?Infinity|NaN|-?(?:0[bB][01]+(?:\.[01]+)?(?:[pP][-+]?\d+)?|0[oO][0-7]+(?:\.[0-7]+)?(?:[pP][-+]?\d+)?|0[xX][\da-fA-F]+(?:\.[\da-fA-F]+)?(?:[pP][-+]?\d+)?|(?:\d+|\d*\.\d+)(?:[eE][-+]?\d+)?))$/;

export const isValidDecimalInput =
  (v?: null | string | number | Prisma.DecimalJsLike): v is string | number | Prisma.DecimalJsLike => {
    if (v === undefined || v === null) return false;
    return (
      (typeof v === 'object' && 'd' in v && 'e' in v && 's' in v && 'toFixed' in v) ||
      (typeof v === 'string' && DECIMAL_STRING_REGEX.test(v)) ||
      typeof v === 'number'
    )
  };

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const UserScalarFieldEnumSchema = z.enum(['id','name','email','emailVerified','image','createdAt','updatedAt','username','role','banned','banReason','banExpires','onboardingComplete','paymentsCustomerId','locale','twoFactorEnabled']);

export const SessionScalarFieldEnumSchema = z.enum(['id','expiresAt','ipAddress','userAgent','userId','impersonatedBy','activeOrganizationId','token','createdAt','updatedAt']);

export const AccountScalarFieldEnumSchema = z.enum(['id','accountId','providerId','userId','accessToken','refreshToken','idToken','expiresAt','password','accessTokenExpiresAt','refreshTokenExpiresAt','scope','createdAt','updatedAt']);

export const VerificationScalarFieldEnumSchema = z.enum(['id','identifier','value','expiresAt','createdAt','updatedAt']);

export const PasskeyScalarFieldEnumSchema = z.enum(['id','name','publicKey','userId','credentialID','counter','deviceType','backedUp','transports','createdAt']);

export const TwoFactorScalarFieldEnumSchema = z.enum(['id','secret','backupCodes','userId']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','slug','logo','createdAt','metadata','paymentsCustomerId']);

export const RelationshipManagerScalarFieldEnumSchema = z.enum(['id','name','email','phone','status','customerCount','joinDate','organizationId','createdAt','updatedAt','category','resignDate']);

export const CustomerScalarFieldEnumSchema = z.enum(['id','name','email','phone','organizationId','rm1Id','rm2Id','finder1Id','finder2Id','createdAt','updatedAt','finder1ProfitShare','finder2ProfitShare','rm1ProfitShare','rm2ProfitShare','code']);

export const MemberScalarFieldEnumSchema = z.enum(['id','organizationId','userId','role','createdAt']);

export const InvitationScalarFieldEnumSchema = z.enum(['id','organizationId','email','role','status','expiresAt','inviterId']);

export const PurchaseScalarFieldEnumSchema = z.enum(['id','organizationId','userId','type','customerId','subscriptionId','productId','status','createdAt','updatedAt']);

export const AiChatScalarFieldEnumSchema = z.enum(['id','organizationId','userId','title','messages','createdAt','updatedAt']);

export const BankAccountScalarFieldEnumSchema = z.enum(['id','bankName','accountName','accountNumber','currency','balance','status','organizationId','createdAt','updatedAt','customerId']);

export const ExpenseScalarFieldEnumSchema = z.enum(['id','category','amount','currency','exchangeRate','receiptUrl','description','date','organizationId','createdAt','updatedAt','receiptUrls','sgdAmount','usdAmount','usdRate','rmId']);

export const ProductScalarFieldEnumSchema = z.enum(['id','name','code','currency','organizationId','createdAt','updatedAt','distributionType','status','category']);

export const ProfitSharingScalarFieldEnumSchema = z.enum(['id','customerId','bankAccountId','organizationId','createdAt','updatedAt','amount','productId','profitDate','companyProfitSharePercent','companyRevenue','companyRevenueOriginal','currency','directTradeBookingFee','finderProfitSharePercent','findersRevenueOriginal','findersRevenueUSD','fxRate','rmProfitSharePercent','rmRevenueOriginal','rmRevenueUSD','shareable','finder1Id','finder1Name','finder1ProfitSharePercent','finder1RevenueOriginal','finder1RevenueUSD','finder2Id','finder2Name','finder2ProfitSharePercent','finder2RevenueOriginal','finder2RevenueUSD','rm1Id','rm1Name','rm1ProfitSharePercent','rm1RevenueOriginal','rm1RevenueUSD','rm2Id','rm2Name','rm2ProfitSharePercent','rm2RevenueOriginal','rm2RevenueUSD','bankRetroPercent','companyFeePercent','companyRevenuePercent','finder1FeePercent','finder1RevenuePercent','finder2FeePercent','finder2RevenuePercent','rm1FeePercent','rm1RevenuePercent','rm2FeePercent','rm2RevenuePercent']);

export const AssetTransactionScalarFieldEnumSchema = z.enum(['id','customerId','date','currency','type','amount','description','createdAt','updatedAt']);

export const AmmeterScalarFieldEnumSchema = z.enum(['id','electricMeterNumber','electricMeterName','deviceNumber','factory','device','voltage','currents','power','battery','switchState','networkState','lastUpdated','organizationId','createdAt','updatedAt']);

export const Ammeter_logScalarFieldEnumSchema = z.enum(['id','deviceNumber','action','factory','device','voltage','currents','power','battery','switchState','networkState','lastUpdated','requestData','responseData','statusCode','success','errorMessage','responseTime','ipAddress','userAgent','userId','organizationId','createdAt']);

export const ExperimentRunScalarFieldEnumSchema = z.enum(['id','name','description','filteringParameters','status','candidateCount','positiveLabelCount','negativeLabelCount','createdAt','updatedAt']);

export const Anomaly_eventScalarFieldEnumSchema = z.enum(['id','eventId','meterId','eventTimestamp','detectionRule','score','dataWindow','status','reviewerId','reviewTimestamp','justificationNotes','experimentRunId','createdAt','updatedAt']);

export const Anomaly_labelScalarFieldEnumSchema = z.enum(['id','name','description','createdAt','updatedAt']);

export const Borrow_godScalarFieldEnumSchema = z.enum(['id','godNameId','applyName','startDate','endDate','typeId','organizationId','createdAt','updatedAt']);

export const BuddhistScalarFieldEnumSchema = z.enum(['id','name','cellphone','phone','templeNowText','organizationId','createdAt','updatedAt']);

export const Event_label_linkScalarFieldEnumSchema = z.enum(['id','eventId','labelId','createdAt']);

export const FamilyScalarFieldEnumSchema = z.enum(['id','name','address','phone','mobile','email','note','postalCode','organizationId','createdAt','updatedAt']);

export const Family_memberScalarFieldEnumSchema = z.enum(['id','name','relation','birthday','lunarDate','gender','note','mainPerson','mailThis','isLive','postcode','addr','familyId','organizationId','createdAt','updatedAt']);

export const God_nameScalarFieldEnumSchema = z.enum(['id','value','price','order','organizationId','createdAt','updatedAt']);

export const Member_classScalarFieldEnumSchema = z.enum(['id','name','type','level','organizationId','createdAt','updatedAt']);

export const MgyearScalarFieldEnumSchema = z.enum(['id','order','mgyear','year','nowUse','organizationId','createdAt','updatedAt']);

export const Service1ScalarFieldEnumSchema = z.enum(['id','name','type','level','nowUse','organizationId','createdAt','updatedAt']);

export const Service2ScalarFieldEnumSchema = z.enum(['id','name','level','nowUse','service1Id','organizationId','createdAt','updatedAt']);

export const Servicing1ScalarFieldEnumSchema = z.enum(['id','familyId','organizationId','ordernum','year','applyDate','applyText','cellphone','addr','printType1Id','service1Id','service2Id','serial','accReceivable','accReceived','accPending','payStatus','payMethod','payCurrency','receiptNum','booksNum','payee','advisePeople','ps','createdAt','updatedAt']);

export const Servicing2ScalarFieldEnumSchema = z.enum(['id','familyId','organizationId','servicing1Id','ordernum','year','service1Id','service2Id','serial','praytypeId','printType1Id','printType2Id','livename','people1','passname','passname1','passname2','passname3','passname4','people0','name','sexualId','sexualText','liveYear','boxNum','rowTotal','bornYear','bornMonth','bornDay','bornTime','addr','ps','createdAt','updatedAt']);

export const TempleScalarFieldEnumSchema = z.enum(['id','name','address','phone','email','description','organizationId','createdAt','updatedAt']);

export const TrainedModelScalarFieldEnumSchema = z.enum(['id','modelName','modelType','modelPath','precision','recall','f1Score','trainingDataSummary','experimentRunId','createdAt','updatedAt']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.DbNull : value);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const PurchaseTypeSchema = z.enum(['SUBSCRIPTION','ONE_TIME']);

export type PurchaseTypeType = `${z.infer<typeof PurchaseTypeSchema>}`

export const AnomalyEventStatusSchema = z.enum(['UNREVIEWED','CONFIRMED_POSITIVE','REJECTED_NORMAL']);

export type AnomalyEventStatusType = `${z.infer<typeof AnomalyEventStatusSchema>}`

export const ExperimentRunStatusSchema = z.enum(['CONFIGURING','LABELING','COMPLETED']);

export type ExperimentRunStatusType = `${z.infer<typeof ExperimentRunStatusSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().nullable(),
  role: z.string().nullable(),
  banned: z.boolean().nullable(),
  banReason: z.string().nullable(),
  banExpires: z.coerce.date().nullable(),
  onboardingComplete: z.boolean(),
  paymentsCustomerId: z.string().nullable(),
  locale: z.string().nullable(),
  twoFactorEnabled: z.boolean().nullable(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string().cuid(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().nullable(),
  activeOrganizationId: z.string().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string().cuid(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().nullable(),
  refreshToken: z.string().nullable(),
  idToken: z.string().nullable(),
  expiresAt: z.coerce.date().nullable(),
  password: z.string().nullable(),
  accessTokenExpiresAt: z.coerce.date().nullable(),
  refreshTokenExpiresAt: z.coerce.date().nullable(),
  scope: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// VERIFICATION SCHEMA
/////////////////////////////////////////

export const VerificationSchema = z.object({
  id: z.string().cuid(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().nullable(),
  updatedAt: z.coerce.date().nullable(),
})

export type Verification = z.infer<typeof VerificationSchema>

/////////////////////////////////////////
// PASSKEY SCHEMA
/////////////////////////////////////////

export const PasskeySchema = z.object({
  id: z.string().cuid(),
  name: z.string().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
})

export type Passkey = z.infer<typeof PasskeySchema>

/////////////////////////////////////////
// TWO FACTOR SCHEMA
/////////////////////////////////////////

export const TwoFactorSchema = z.object({
  id: z.string().cuid(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string(),
})

export type TwoFactor = z.infer<typeof TwoFactorSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  slug: z.string().nullable(),
  logo: z.string().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().nullable(),
  paymentsCustomerId: z.string().nullable(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// RELATIONSHIP MANAGER SCHEMA
/////////////////////////////////////////

export const RelationshipManagerSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  email: z.string(),
  phone: z.string().nullable(),
  status: z.string(),
  customerCount: z.number().int(),
  joinDate: z.coerce.date(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  category: z.string(),
  resignDate: z.coerce.date().nullable(),
})

export type RelationshipManager = z.infer<typeof RelationshipManagerSchema>

/////////////////////////////////////////
// CUSTOMER SCHEMA
/////////////////////////////////////////

export const CustomerSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  email: z.string().nullable(),
  phone: z.string().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().nullable(),
  rm2Id: z.string().nullable(),
  finder1Id: z.string().nullable(),
  finder2Id: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  finder1ProfitShare: z.instanceof(Prisma.Decimal, { message: "Field 'finder1ProfitShare' must be a Decimal. Location: ['Models', 'Customer']"}).nullable(),
  finder2ProfitShare: z.instanceof(Prisma.Decimal, { message: "Field 'finder2ProfitShare' must be a Decimal. Location: ['Models', 'Customer']"}).nullable(),
  rm1ProfitShare: z.instanceof(Prisma.Decimal, { message: "Field 'rm1ProfitShare' must be a Decimal. Location: ['Models', 'Customer']"}).nullable(),
  rm2ProfitShare: z.instanceof(Prisma.Decimal, { message: "Field 'rm2ProfitShare' must be a Decimal. Location: ['Models', 'Customer']"}).nullable(),
  code: z.string(),
})

export type Customer = z.infer<typeof CustomerSchema>

/////////////////////////////////////////
// MEMBER SCHEMA
/////////////////////////////////////////

export const MemberSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date(),
})

export type Member = z.infer<typeof MemberSchema>

/////////////////////////////////////////
// INVITATION SCHEMA
/////////////////////////////////////////

export const InvitationSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string(),
})

export type Invitation = z.infer<typeof InvitationSchema>

/////////////////////////////////////////
// PURCHASE SCHEMA
/////////////////////////////////////////

export const PurchaseSchema = z.object({
  type: PurchaseTypeSchema,
  id: z.string().cuid(),
  organizationId: z.string().nullable(),
  userId: z.string().nullable(),
  customerId: z.string(),
  subscriptionId: z.string().nullable(),
  productId: z.string(),
  status: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Purchase = z.infer<typeof PurchaseSchema>

/////////////////////////////////////////
// AI CHAT SCHEMA
/////////////////////////////////////////

export const AiChatSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string().nullable(),
  userId: z.string().nullable(),
  title: z.string().nullable(),
  /**
   * [Array<{role: "user" | "assistant"; content: string;}>]
   */
  messages: z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type AiChat = z.infer<typeof AiChatSchema>

/////////////////////////////////////////
// BANK ACCOUNT SCHEMA
/////////////////////////////////////////

export const BankAccountSchema = z.object({
  id: z.string().cuid(),
  bankName: z.string(),
  accountName: z.string().nullable(),
  accountNumber: z.string(),
  currency: z.string(),
  balance: z.instanceof(Prisma.Decimal, { message: "Field 'balance' must be a Decimal. Location: ['Models', 'BankAccount']"}),
  status: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  customerId: z.string().nullable(),
})

export type BankAccount = z.infer<typeof BankAccountSchema>

/////////////////////////////////////////
// EXPENSE SCHEMA
/////////////////////////////////////////

export const ExpenseSchema = z.object({
  id: z.string().cuid(),
  category: z.string(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'Expense']"}),
  currency: z.string(),
  exchangeRate: z.instanceof(Prisma.Decimal, { message: "Field 'exchangeRate' must be a Decimal. Location: ['Models', 'Expense']"}),
  receiptUrl: z.string().nullable(),
  description: z.string().nullable(),
  date: z.coerce.date(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  receiptUrls: z.string().array(),
  sgdAmount: z.instanceof(Prisma.Decimal, { message: "Field 'sgdAmount' must be a Decimal. Location: ['Models', 'Expense']"}),
  usdAmount: z.instanceof(Prisma.Decimal, { message: "Field 'usdAmount' must be a Decimal. Location: ['Models', 'Expense']"}),
  usdRate: z.instanceof(Prisma.Decimal, { message: "Field 'usdRate' must be a Decimal. Location: ['Models', 'Expense']"}),
  rmId: z.string().nullable(),
})

export type Expense = z.infer<typeof ExpenseSchema>

/////////////////////////////////////////
// PRODUCT SCHEMA
/////////////////////////////////////////

export const ProductSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  code: z.string(),
  currency: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  distributionType: z.string(),
  status: z.string(),
  category: z.string(),
})

export type Product = z.infer<typeof ProductSchema>

/////////////////////////////////////////
// PROFIT SHARING SCHEMA
/////////////////////////////////////////

export const ProfitSharingSchema = z.object({
  id: z.string().cuid(),
  customerId: z.string(),
  bankAccountId: z.string().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  productId: z.string(),
  profitDate: z.coerce.date(),
  companyProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'companyProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  companyRevenue: z.instanceof(Prisma.Decimal, { message: "Field 'companyRevenue' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  companyRevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'companyRevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  currency: z.string(),
  directTradeBookingFee: z.instanceof(Prisma.Decimal, { message: "Field 'directTradeBookingFee' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  finderProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finderProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  findersRevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'findersRevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  findersRevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'findersRevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  fxRate: z.instanceof(Prisma.Decimal, { message: "Field 'fxRate' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  rmProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rmProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  rmRevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'rmRevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  rmRevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'rmRevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  shareable: z.instanceof(Prisma.Decimal, { message: "Field 'shareable' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  finder1Id: z.string().nullable(),
  finder1Name: z.string().nullable(),
  finder1ProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder1ProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder1RevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'finder1RevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder1RevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'finder1RevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2Id: z.string().nullable(),
  finder2Name: z.string().nullable(),
  finder2ProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder2ProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2RevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'finder2RevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2RevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'finder2RevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1Id: z.string().nullable(),
  rm1Name: z.string().nullable(),
  rm1ProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm1ProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1RevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'rm1RevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1RevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'rm1RevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2Id: z.string().nullable(),
  rm2Name: z.string().nullable(),
  rm2ProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm2ProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2RevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'rm2RevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2RevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'rm2RevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  bankRetroPercent: z.instanceof(Prisma.Decimal, { message: "Field 'bankRetroPercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  companyFeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'companyFeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  companyRevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'companyRevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder1FeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder1FeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder1RevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder1RevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2FeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder2FeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2RevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder2RevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1FeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm1FeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1RevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm1RevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2FeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm2FeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2RevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm2RevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
})

export type ProfitSharing = z.infer<typeof ProfitSharingSchema>

/////////////////////////////////////////
// ASSET TRANSACTION SCHEMA
/////////////////////////////////////////

export const AssetTransactionSchema = z.object({
  id: z.string().cuid(),
  customerId: z.string(),
  date: z.coerce.date(),
  currency: z.string(),
  type: z.string(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'AssetTransaction']"}),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type AssetTransaction = z.infer<typeof AssetTransactionSchema>

/////////////////////////////////////////
// AMMETER SCHEMA
/////////////////////////////////////////

export const ammeterSchema = z.object({
  id: z.string(),
  electricMeterNumber: z.string(),
  electricMeterName: z.string(),
  deviceNumber: z.string(),
  factory: z.string().nullable(),
  device: z.string().nullable(),
  voltage: z.number().nullable(),
  currents: z.number().nullable(),
  power: z.number().nullable(),
  battery: z.number().nullable(),
  switchState: z.number().int().nullable(),
  networkState: z.number().int().nullable(),
  lastUpdated: z.coerce.date().nullable(),
  organizationId: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
  updatedAt: z.coerce.date().nullable(),
})

export type ammeter = z.infer<typeof ammeterSchema>

/////////////////////////////////////////
// AMMETER LOG SCHEMA
/////////////////////////////////////////

export const ammeter_logSchema = z.object({
  id: z.string(),
  deviceNumber: z.string(),
  action: z.string(),
  factory: z.string().nullable(),
  device: z.string().nullable(),
  voltage: z.number().nullable(),
  currents: z.number().nullable(),
  power: z.number().nullable(),
  battery: z.number().nullable(),
  switchState: z.number().int().nullable(),
  networkState: z.number().int().nullable(),
  lastUpdated: z.coerce.date().nullable(),
  requestData: z.string().nullable(),
  responseData: z.string().nullable(),
  statusCode: z.number().int().nullable(),
  success: z.boolean(),
  errorMessage: z.string().nullable(),
  responseTime: z.number().int().nullable(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  userId: z.string().nullable(),
  organizationId: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
})

export type ammeter_log = z.infer<typeof ammeter_logSchema>

/////////////////////////////////////////
// EXPERIMENT RUN SCHEMA
/////////////////////////////////////////

export const ExperimentRunSchema = z.object({
  status: ExperimentRunStatusSchema,
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullable(),
  /**
   * [Object]
   */
  filteringParameters: z.record(z.any()).nullable(),
  candidateCount: z.number().int().nullable(),
  positiveLabelCount: z.number().int().nullable(),
  negativeLabelCount: z.number().int().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ExperimentRun = z.infer<typeof ExperimentRunSchema>

/////////////////////////////////////////
// ANOMALY EVENT SCHEMA
/////////////////////////////////////////

export const anomaly_eventSchema = z.object({
  status: AnomalyEventStatusSchema,
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: JsonValueSchema,
  reviewerId: z.string().nullable(),
  reviewTimestamp: z.coerce.date().nullable(),
  justificationNotes: z.string().nullable(),
  experimentRunId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type anomaly_event = z.infer<typeof anomaly_eventSchema>

/////////////////////////////////////////
// ANOMALY LABEL SCHEMA
/////////////////////////////////////////

export const anomaly_labelSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type anomaly_label = z.infer<typeof anomaly_labelSchema>

/////////////////////////////////////////
// BORROW GOD SCHEMA
/////////////////////////////////////////

export const borrow_godSchema = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().nullable(),
  typeId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type borrow_god = z.infer<typeof borrow_godSchema>

/////////////////////////////////////////
// BUDDHIST SCHEMA
/////////////////////////////////////////

export const buddhistSchema = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().nullable(),
  phone: z.string().nullable(),
  templeNowText: z.string().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type buddhist = z.infer<typeof buddhistSchema>

/////////////////////////////////////////
// EVENT LABEL LINK SCHEMA
/////////////////////////////////////////

export const event_label_linkSchema = z.object({
  id: z.string(),
  eventId: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date(),
})

export type event_label_link = z.infer<typeof event_label_linkSchema>

/////////////////////////////////////////
// FAMILY SCHEMA
/////////////////////////////////////////

export const familySchema = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().nullable(),
  phone: z.string().nullable(),
  mobile: z.string().nullable(),
  email: z.string().nullable(),
  note: z.string().nullable(),
  postalCode: z.string().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type family = z.infer<typeof familySchema>

/////////////////////////////////////////
// FAMILY MEMBER SCHEMA
/////////////////////////////////////////

export const family_memberSchema = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().nullable(),
  birthday: z.coerce.date().nullable(),
  lunarDate: z.string().nullable(),
  gender: z.string().nullable(),
  note: z.string().nullable(),
  mainPerson: z.string(),
  mailThis: z.string(),
  isLive: z.string(),
  postcode: z.string().nullable(),
  addr: z.string().nullable(),
  familyId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type family_member = z.infer<typeof family_memberSchema>

/////////////////////////////////////////
// GOD NAME SCHEMA
/////////////////////////////////////////

export const god_nameSchema = z.object({
  id: z.string(),
  value: z.string(),
  price: z.instanceof(Prisma.Decimal, { message: "Field 'price' must be a Decimal. Location: ['Models', 'god_name']"}),
  order: z.number().int(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type god_name = z.infer<typeof god_nameSchema>

/////////////////////////////////////////
// MEMBER CLASS SCHEMA
/////////////////////////////////////////

export const member_classSchema = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type member_class = z.infer<typeof member_classSchema>

/////////////////////////////////////////
// MGYEAR SCHEMA
/////////////////////////////////////////

export const mgyearSchema = z.object({
  id: z.string(),
  order: z.number().int(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type mgyear = z.infer<typeof mgyearSchema>

/////////////////////////////////////////
// SERVICE 1 SCHEMA
/////////////////////////////////////////

export const service1Schema = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int(),
  nowUse: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type service1 = z.infer<typeof service1Schema>

/////////////////////////////////////////
// SERVICE 2 SCHEMA
/////////////////////////////////////////

export const service2Schema = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int(),
  nowUse: z.string(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type service2 = z.infer<typeof service2Schema>

/////////////////////////////////////////
// SERVICING 1 SCHEMA
/////////////////////////////////////////

export const servicing1Schema = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().nullable(),
  addr: z.string().nullable(),
  printType1Id: z.string().nullable(),
  service1Id: z.string(),
  service2Id: z.string().nullable(),
  serial: z.string().nullable(),
  accReceivable: z.instanceof(Prisma.Decimal, { message: "Field 'accReceivable' must be a Decimal. Location: ['Models', 'servicing1']"}),
  accReceived: z.instanceof(Prisma.Decimal, { message: "Field 'accReceived' must be a Decimal. Location: ['Models', 'servicing1']"}),
  accPending: z.instanceof(Prisma.Decimal, { message: "Field 'accPending' must be a Decimal. Location: ['Models', 'servicing1']"}),
  payStatus: z.string().nullable(),
  payMethod: z.string().nullable(),
  payCurrency: z.string(),
  receiptNum: z.string().nullable(),
  booksNum: z.string().nullable(),
  payee: z.string().nullable(),
  advisePeople: z.string().nullable(),
  ps: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type servicing1 = z.infer<typeof servicing1Schema>

/////////////////////////////////////////
// SERVICING 2 SCHEMA
/////////////////////////////////////////

export const servicing2Schema = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().nullable(),
  serial: z.string().nullable(),
  praytypeId: z.string().nullable(),
  printType1Id: z.string().nullable(),
  printType2Id: z.string().nullable(),
  livename: z.string().nullable(),
  people1: JsonValueSchema.nullable(),
  passname: z.string().nullable(),
  passname1: z.string().nullable(),
  passname2: z.string().nullable(),
  passname3: z.string().nullable(),
  passname4: z.string().nullable(),
  people0: JsonValueSchema.nullable(),
  name: z.string().nullable(),
  sexualId: z.string().nullable(),
  sexualText: z.string().nullable(),
  liveYear: z.number().int().nullable(),
  boxNum: z.string().nullable(),
  rowTotal: z.instanceof(Prisma.Decimal, { message: "Field 'rowTotal' must be a Decimal. Location: ['Models', 'servicing2']"}),
  bornYear: z.string().nullable(),
  bornMonth: z.string().nullable(),
  bornDay: z.string().nullable(),
  bornTime: z.string().nullable(),
  addr: z.string().nullable(),
  ps: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type servicing2 = z.infer<typeof servicing2Schema>

/////////////////////////////////////////
// TEMPLE SCHEMA
/////////////////////////////////////////

export const templeSchema = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().nullable(),
  phone: z.string().nullable(),
  email: z.string().nullable(),
  description: z.string().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type temple = z.infer<typeof templeSchema>

/////////////////////////////////////////
// TRAINED MODEL SCHEMA
/////////////////////////////////////////

export const TrainedModelSchema = z.object({
  id: z.string().cuid(),
  modelName: z.string(),
  modelType: z.string(),
  modelPath: z.string(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  /**
   * [Object]
   */
  trainingDataSummary: z.record(z.any()),
  experimentRunId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type TrainedModel = z.infer<typeof TrainedModelSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  passkeys: z.union([z.boolean(),z.lazy(() => PasskeyFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  twofactors: z.union([z.boolean(),z.lazy(() => TwoFactorFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  accounts: z.boolean().optional(),
  aiChats: z.boolean().optional(),
  invitations: z.boolean().optional(),
  members: z.boolean().optional(),
  passkeys: z.boolean().optional(),
  purchases: z.boolean().optional(),
  sessions: z.boolean().optional(),
  twofactors: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  username: z.boolean().optional(),
  role: z.boolean().optional(),
  banned: z.boolean().optional(),
  banReason: z.boolean().optional(),
  banExpires: z.boolean().optional(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  locale: z.boolean().optional(),
  twoFactorEnabled: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  passkeys: z.union([z.boolean(),z.lazy(() => PasskeyFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  twofactors: z.union([z.boolean(),z.lazy(() => TwoFactorFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  userId: z.boolean().optional(),
  impersonatedBy: z.boolean().optional(),
  activeOrganizationId: z.boolean().optional(),
  token: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  accountId: z.boolean().optional(),
  providerId: z.boolean().optional(),
  userId: z.boolean().optional(),
  accessToken: z.boolean().optional(),
  refreshToken: z.boolean().optional(),
  idToken: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  password: z.boolean().optional(),
  accessTokenExpiresAt: z.boolean().optional(),
  refreshTokenExpiresAt: z.boolean().optional(),
  scope: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// VERIFICATION
//------------------------------------------------------

export const VerificationSelectSchema: z.ZodType<Prisma.VerificationSelect> = z.object({
  id: z.boolean().optional(),
  identifier: z.boolean().optional(),
  value: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// PASSKEY
//------------------------------------------------------

export const PasskeyIncludeSchema: z.ZodType<Prisma.PasskeyInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PasskeyArgsSchema: z.ZodType<Prisma.PasskeyDefaultArgs> = z.object({
  select: z.lazy(() => PasskeySelectSchema).optional(),
  include: z.lazy(() => PasskeyIncludeSchema).optional(),
}).strict();

export const PasskeySelectSchema: z.ZodType<Prisma.PasskeySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  publicKey: z.boolean().optional(),
  userId: z.boolean().optional(),
  credentialID: z.boolean().optional(),
  counter: z.boolean().optional(),
  deviceType: z.boolean().optional(),
  backedUp: z.boolean().optional(),
  transports: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// TWO FACTOR
//------------------------------------------------------

export const TwoFactorIncludeSchema: z.ZodType<Prisma.TwoFactorInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const TwoFactorArgsSchema: z.ZodType<Prisma.TwoFactorDefaultArgs> = z.object({
  select: z.lazy(() => TwoFactorSelectSchema).optional(),
  include: z.lazy(() => TwoFactorIncludeSchema).optional(),
}).strict();

export const TwoFactorSelectSchema: z.ZodType<Prisma.TwoFactorSelect> = z.object({
  id: z.boolean().optional(),
  secret: z.boolean().optional(),
  backupCodes: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  bankAccounts: z.union([z.boolean(),z.lazy(() => BankAccountFindManyArgsSchema)]).optional(),
  borrow_god: z.union([z.boolean(),z.lazy(() => borrow_godFindManyArgsSchema)]).optional(),
  buddhist: z.union([z.boolean(),z.lazy(() => buddhistFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  family: z.union([z.boolean(),z.lazy(() => familyFindManyArgsSchema)]).optional(),
  family_member: z.union([z.boolean(),z.lazy(() => family_memberFindManyArgsSchema)]).optional(),
  god_name: z.union([z.boolean(),z.lazy(() => god_nameFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  member_class: z.union([z.boolean(),z.lazy(() => member_classFindManyArgsSchema)]).optional(),
  mgyear: z.union([z.boolean(),z.lazy(() => mgyearFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  ProfitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  relationshipManagers: z.union([z.boolean(),z.lazy(() => RelationshipManagerFindManyArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => service1FindManyArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => service2FindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  temple: z.union([z.boolean(),z.lazy(() => templeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  aiChats: z.boolean().optional(),
  bankAccounts: z.boolean().optional(),
  borrow_god: z.boolean().optional(),
  buddhist: z.boolean().optional(),
  customers: z.boolean().optional(),
  expenses: z.boolean().optional(),
  family: z.boolean().optional(),
  family_member: z.boolean().optional(),
  god_name: z.boolean().optional(),
  invitations: z.boolean().optional(),
  members: z.boolean().optional(),
  member_class: z.boolean().optional(),
  mgyear: z.boolean().optional(),
  products: z.boolean().optional(),
  ProfitSharing: z.boolean().optional(),
  purchases: z.boolean().optional(),
  relationshipManagers: z.boolean().optional(),
  service1: z.boolean().optional(),
  service2: z.boolean().optional(),
  servicing1: z.boolean().optional(),
  servicing2: z.boolean().optional(),
  temple: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
  logo: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  metadata: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  bankAccounts: z.union([z.boolean(),z.lazy(() => BankAccountFindManyArgsSchema)]).optional(),
  borrow_god: z.union([z.boolean(),z.lazy(() => borrow_godFindManyArgsSchema)]).optional(),
  buddhist: z.union([z.boolean(),z.lazy(() => buddhistFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  family: z.union([z.boolean(),z.lazy(() => familyFindManyArgsSchema)]).optional(),
  family_member: z.union([z.boolean(),z.lazy(() => family_memberFindManyArgsSchema)]).optional(),
  god_name: z.union([z.boolean(),z.lazy(() => god_nameFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  member_class: z.union([z.boolean(),z.lazy(() => member_classFindManyArgsSchema)]).optional(),
  mgyear: z.union([z.boolean(),z.lazy(() => mgyearFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  ProfitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  relationshipManagers: z.union([z.boolean(),z.lazy(() => RelationshipManagerFindManyArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => service1FindManyArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => service2FindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  temple: z.union([z.boolean(),z.lazy(() => templeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RELATIONSHIP MANAGER
//------------------------------------------------------

export const RelationshipManagerIncludeSchema: z.ZodType<Prisma.RelationshipManagerInclude> = z.object({
  finder1Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  finder2Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  rm1Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  rm2Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RelationshipManagerCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RelationshipManagerArgsSchema: z.ZodType<Prisma.RelationshipManagerDefaultArgs> = z.object({
  select: z.lazy(() => RelationshipManagerSelectSchema).optional(),
  include: z.lazy(() => RelationshipManagerIncludeSchema).optional(),
}).strict();

export const RelationshipManagerCountOutputTypeArgsSchema: z.ZodType<Prisma.RelationshipManagerCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RelationshipManagerCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RelationshipManagerCountOutputTypeSelectSchema: z.ZodType<Prisma.RelationshipManagerCountOutputTypeSelect> = z.object({
  finder1Customers: z.boolean().optional(),
  finder2Customers: z.boolean().optional(),
  rm1Customers: z.boolean().optional(),
  rm2Customers: z.boolean().optional(),
  expenses: z.boolean().optional(),
}).strict();

export const RelationshipManagerSelectSchema: z.ZodType<Prisma.RelationshipManagerSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  status: z.boolean().optional(),
  customerCount: z.boolean().optional(),
  joinDate: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  category: z.boolean().optional(),
  resignDate: z.boolean().optional(),
  finder1Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  finder2Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  rm1Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  rm2Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RelationshipManagerCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CUSTOMER
//------------------------------------------------------

export const CustomerIncludeSchema: z.ZodType<Prisma.CustomerInclude> = z.object({
  assetTransactions: z.union([z.boolean(),z.lazy(() => AssetTransactionFindManyArgsSchema)]).optional(),
  bankAccounts: z.union([z.boolean(),z.lazy(() => BankAccountFindManyArgsSchema)]).optional(),
  finder1: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  finder2: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  rm1: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  rm2: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomerCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CustomerArgsSchema: z.ZodType<Prisma.CustomerDefaultArgs> = z.object({
  select: z.lazy(() => CustomerSelectSchema).optional(),
  include: z.lazy(() => CustomerIncludeSchema).optional(),
}).strict();

export const CustomerCountOutputTypeArgsSchema: z.ZodType<Prisma.CustomerCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CustomerCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CustomerCountOutputTypeSelectSchema: z.ZodType<Prisma.CustomerCountOutputTypeSelect> = z.object({
  assetTransactions: z.boolean().optional(),
  bankAccounts: z.boolean().optional(),
  profitSharing: z.boolean().optional(),
}).strict();

export const CustomerSelectSchema: z.ZodType<Prisma.CustomerSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  rm1Id: z.boolean().optional(),
  rm2Id: z.boolean().optional(),
  finder1Id: z.boolean().optional(),
  finder2Id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  finder1ProfitShare: z.boolean().optional(),
  finder2ProfitShare: z.boolean().optional(),
  rm1ProfitShare: z.boolean().optional(),
  rm2ProfitShare: z.boolean().optional(),
  code: z.boolean().optional(),
  assetTransactions: z.union([z.boolean(),z.lazy(() => AssetTransactionFindManyArgsSchema)]).optional(),
  bankAccounts: z.union([z.boolean(),z.lazy(() => BankAccountFindManyArgsSchema)]).optional(),
  finder1: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  finder2: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  rm1: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  rm2: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomerCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MEMBER
//------------------------------------------------------

export const MemberIncludeSchema: z.ZodType<Prisma.MemberInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const MemberArgsSchema: z.ZodType<Prisma.MemberDefaultArgs> = z.object({
  select: z.lazy(() => MemberSelectSchema).optional(),
  include: z.lazy(() => MemberIncludeSchema).optional(),
}).strict();

export const MemberSelectSchema: z.ZodType<Prisma.MemberSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// INVITATION
//------------------------------------------------------

export const InvitationIncludeSchema: z.ZodType<Prisma.InvitationInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const InvitationArgsSchema: z.ZodType<Prisma.InvitationDefaultArgs> = z.object({
  select: z.lazy(() => InvitationSelectSchema).optional(),
  include: z.lazy(() => InvitationIncludeSchema).optional(),
}).strict();

export const InvitationSelectSchema: z.ZodType<Prisma.InvitationSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  email: z.boolean().optional(),
  role: z.boolean().optional(),
  status: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  inviterId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// PURCHASE
//------------------------------------------------------

export const PurchaseIncludeSchema: z.ZodType<Prisma.PurchaseInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PurchaseArgsSchema: z.ZodType<Prisma.PurchaseDefaultArgs> = z.object({
  select: z.lazy(() => PurchaseSelectSchema).optional(),
  include: z.lazy(() => PurchaseIncludeSchema).optional(),
}).strict();

export const PurchaseSelectSchema: z.ZodType<Prisma.PurchaseSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  customerId: z.boolean().optional(),
  subscriptionId: z.boolean().optional(),
  productId: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// AI CHAT
//------------------------------------------------------

export const AiChatIncludeSchema: z.ZodType<Prisma.AiChatInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AiChatArgsSchema: z.ZodType<Prisma.AiChatDefaultArgs> = z.object({
  select: z.lazy(() => AiChatSelectSchema).optional(),
  include: z.lazy(() => AiChatIncludeSchema).optional(),
}).strict();

export const AiChatSelectSchema: z.ZodType<Prisma.AiChatSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  title: z.boolean().optional(),
  messages: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// BANK ACCOUNT
//------------------------------------------------------

export const BankAccountIncludeSchema: z.ZodType<Prisma.BankAccountInclude> = z.object({
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BankAccountCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const BankAccountArgsSchema: z.ZodType<Prisma.BankAccountDefaultArgs> = z.object({
  select: z.lazy(() => BankAccountSelectSchema).optional(),
  include: z.lazy(() => BankAccountIncludeSchema).optional(),
}).strict();

export const BankAccountCountOutputTypeArgsSchema: z.ZodType<Prisma.BankAccountCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => BankAccountCountOutputTypeSelectSchema).nullish(),
}).strict();

export const BankAccountCountOutputTypeSelectSchema: z.ZodType<Prisma.BankAccountCountOutputTypeSelect> = z.object({
  profitSharing: z.boolean().optional(),
}).strict();

export const BankAccountSelectSchema: z.ZodType<Prisma.BankAccountSelect> = z.object({
  id: z.boolean().optional(),
  bankName: z.boolean().optional(),
  accountName: z.boolean().optional(),
  accountNumber: z.boolean().optional(),
  currency: z.boolean().optional(),
  balance: z.boolean().optional(),
  status: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  customerId: z.boolean().optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BankAccountCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EXPENSE
//------------------------------------------------------

export const ExpenseIncludeSchema: z.ZodType<Prisma.ExpenseInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  rm: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
}).strict()

export const ExpenseArgsSchema: z.ZodType<Prisma.ExpenseDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseSelectSchema).optional(),
  include: z.lazy(() => ExpenseIncludeSchema).optional(),
}).strict();

export const ExpenseSelectSchema: z.ZodType<Prisma.ExpenseSelect> = z.object({
  id: z.boolean().optional(),
  category: z.boolean().optional(),
  amount: z.boolean().optional(),
  currency: z.boolean().optional(),
  exchangeRate: z.boolean().optional(),
  receiptUrl: z.boolean().optional(),
  description: z.boolean().optional(),
  date: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  receiptUrls: z.boolean().optional(),
  sgdAmount: z.boolean().optional(),
  usdAmount: z.boolean().optional(),
  usdRate: z.boolean().optional(),
  rmId: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  rm: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
}).strict()

// PRODUCT
//------------------------------------------------------

export const ProductIncludeSchema: z.ZodType<Prisma.ProductInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProductArgsSchema: z.ZodType<Prisma.ProductDefaultArgs> = z.object({
  select: z.lazy(() => ProductSelectSchema).optional(),
  include: z.lazy(() => ProductIncludeSchema).optional(),
}).strict();

export const ProductCountOutputTypeArgsSchema: z.ZodType<Prisma.ProductCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProductCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProductCountOutputTypeSelectSchema: z.ZodType<Prisma.ProductCountOutputTypeSelect> = z.object({
  profitSharing: z.boolean().optional(),
}).strict();

export const ProductSelectSchema: z.ZodType<Prisma.ProductSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  currency: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  distributionType: z.boolean().optional(),
  status: z.boolean().optional(),
  category: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROFIT SHARING
//------------------------------------------------------

export const ProfitSharingIncludeSchema: z.ZodType<Prisma.ProfitSharingInclude> = z.object({
  BankAccount: z.union([z.boolean(),z.lazy(() => BankAccountArgsSchema)]).optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
}).strict()

export const ProfitSharingArgsSchema: z.ZodType<Prisma.ProfitSharingDefaultArgs> = z.object({
  select: z.lazy(() => ProfitSharingSelectSchema).optional(),
  include: z.lazy(() => ProfitSharingIncludeSchema).optional(),
}).strict();

export const ProfitSharingSelectSchema: z.ZodType<Prisma.ProfitSharingSelect> = z.object({
  id: z.boolean().optional(),
  customerId: z.boolean().optional(),
  bankAccountId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  amount: z.boolean().optional(),
  productId: z.boolean().optional(),
  profitDate: z.boolean().optional(),
  companyProfitSharePercent: z.boolean().optional(),
  companyRevenue: z.boolean().optional(),
  companyRevenueOriginal: z.boolean().optional(),
  currency: z.boolean().optional(),
  directTradeBookingFee: z.boolean().optional(),
  finderProfitSharePercent: z.boolean().optional(),
  findersRevenueOriginal: z.boolean().optional(),
  findersRevenueUSD: z.boolean().optional(),
  fxRate: z.boolean().optional(),
  rmProfitSharePercent: z.boolean().optional(),
  rmRevenueOriginal: z.boolean().optional(),
  rmRevenueUSD: z.boolean().optional(),
  shareable: z.boolean().optional(),
  finder1Id: z.boolean().optional(),
  finder1Name: z.boolean().optional(),
  finder1ProfitSharePercent: z.boolean().optional(),
  finder1RevenueOriginal: z.boolean().optional(),
  finder1RevenueUSD: z.boolean().optional(),
  finder2Id: z.boolean().optional(),
  finder2Name: z.boolean().optional(),
  finder2ProfitSharePercent: z.boolean().optional(),
  finder2RevenueOriginal: z.boolean().optional(),
  finder2RevenueUSD: z.boolean().optional(),
  rm1Id: z.boolean().optional(),
  rm1Name: z.boolean().optional(),
  rm1ProfitSharePercent: z.boolean().optional(),
  rm1RevenueOriginal: z.boolean().optional(),
  rm1RevenueUSD: z.boolean().optional(),
  rm2Id: z.boolean().optional(),
  rm2Name: z.boolean().optional(),
  rm2ProfitSharePercent: z.boolean().optional(),
  rm2RevenueOriginal: z.boolean().optional(),
  rm2RevenueUSD: z.boolean().optional(),
  bankRetroPercent: z.boolean().optional(),
  companyFeePercent: z.boolean().optional(),
  companyRevenuePercent: z.boolean().optional(),
  finder1FeePercent: z.boolean().optional(),
  finder1RevenuePercent: z.boolean().optional(),
  finder2FeePercent: z.boolean().optional(),
  finder2RevenuePercent: z.boolean().optional(),
  rm1FeePercent: z.boolean().optional(),
  rm1RevenuePercent: z.boolean().optional(),
  rm2FeePercent: z.boolean().optional(),
  rm2RevenuePercent: z.boolean().optional(),
  BankAccount: z.union([z.boolean(),z.lazy(() => BankAccountArgsSchema)]).optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
}).strict()

// ASSET TRANSACTION
//------------------------------------------------------

export const AssetTransactionIncludeSchema: z.ZodType<Prisma.AssetTransactionInclude> = z.object({
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
}).strict()

export const AssetTransactionArgsSchema: z.ZodType<Prisma.AssetTransactionDefaultArgs> = z.object({
  select: z.lazy(() => AssetTransactionSelectSchema).optional(),
  include: z.lazy(() => AssetTransactionIncludeSchema).optional(),
}).strict();

export const AssetTransactionSelectSchema: z.ZodType<Prisma.AssetTransactionSelect> = z.object({
  id: z.boolean().optional(),
  customerId: z.boolean().optional(),
  date: z.boolean().optional(),
  currency: z.boolean().optional(),
  type: z.boolean().optional(),
  amount: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
}).strict()

// AMMETER
//------------------------------------------------------

export const ammeterSelectSchema: z.ZodType<Prisma.ammeterSelect> = z.object({
  id: z.boolean().optional(),
  electricMeterNumber: z.boolean().optional(),
  electricMeterName: z.boolean().optional(),
  deviceNumber: z.boolean().optional(),
  factory: z.boolean().optional(),
  device: z.boolean().optional(),
  voltage: z.boolean().optional(),
  currents: z.boolean().optional(),
  power: z.boolean().optional(),
  battery: z.boolean().optional(),
  switchState: z.boolean().optional(),
  networkState: z.boolean().optional(),
  lastUpdated: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// AMMETER LOG
//------------------------------------------------------

export const ammeter_logSelectSchema: z.ZodType<Prisma.ammeter_logSelect> = z.object({
  id: z.boolean().optional(),
  deviceNumber: z.boolean().optional(),
  action: z.boolean().optional(),
  factory: z.boolean().optional(),
  device: z.boolean().optional(),
  voltage: z.boolean().optional(),
  currents: z.boolean().optional(),
  power: z.boolean().optional(),
  battery: z.boolean().optional(),
  switchState: z.boolean().optional(),
  networkState: z.boolean().optional(),
  lastUpdated: z.boolean().optional(),
  requestData: z.boolean().optional(),
  responseData: z.boolean().optional(),
  statusCode: z.boolean().optional(),
  success: z.boolean().optional(),
  errorMessage: z.boolean().optional(),
  responseTime: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  userId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
}).strict()

// EXPERIMENT RUN
//------------------------------------------------------

export const ExperimentRunIncludeSchema: z.ZodType<Prisma.ExperimentRunInclude> = z.object({
  anomalyEvents: z.union([z.boolean(),z.lazy(() => anomaly_eventFindManyArgsSchema)]).optional(),
  trainedModel: z.union([z.boolean(),z.lazy(() => TrainedModelArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExperimentRunCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ExperimentRunArgsSchema: z.ZodType<Prisma.ExperimentRunDefaultArgs> = z.object({
  select: z.lazy(() => ExperimentRunSelectSchema).optional(),
  include: z.lazy(() => ExperimentRunIncludeSchema).optional(),
}).strict();

export const ExperimentRunCountOutputTypeArgsSchema: z.ZodType<Prisma.ExperimentRunCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ExperimentRunCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ExperimentRunCountOutputTypeSelectSchema: z.ZodType<Prisma.ExperimentRunCountOutputTypeSelect> = z.object({
  anomalyEvents: z.boolean().optional(),
}).strict();

export const ExperimentRunSelectSchema: z.ZodType<Prisma.ExperimentRunSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  filteringParameters: z.boolean().optional(),
  status: z.boolean().optional(),
  candidateCount: z.boolean().optional(),
  positiveLabelCount: z.boolean().optional(),
  negativeLabelCount: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  anomalyEvents: z.union([z.boolean(),z.lazy(() => anomaly_eventFindManyArgsSchema)]).optional(),
  trainedModel: z.union([z.boolean(),z.lazy(() => TrainedModelArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExperimentRunCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ANOMALY EVENT
//------------------------------------------------------

export const anomaly_eventIncludeSchema: z.ZodType<Prisma.anomaly_eventInclude> = z.object({
  experimentRun: z.union([z.boolean(),z.lazy(() => ExperimentRunArgsSchema)]).optional(),
  event_label_link: z.union([z.boolean(),z.lazy(() => event_label_linkFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Anomaly_eventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const anomaly_eventArgsSchema: z.ZodType<Prisma.anomaly_eventDefaultArgs> = z.object({
  select: z.lazy(() => anomaly_eventSelectSchema).optional(),
  include: z.lazy(() => anomaly_eventIncludeSchema).optional(),
}).strict();

export const anomaly_eventCountOutputTypeArgsSchema: z.ZodType<Prisma.anomaly_eventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => anomaly_eventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const anomaly_eventCountOutputTypeSelectSchema: z.ZodType<Prisma.anomaly_eventCountOutputTypeSelect> = z.object({
  event_label_link: z.boolean().optional(),
}).strict();

export const anomaly_eventSelectSchema: z.ZodType<Prisma.anomaly_eventSelect> = z.object({
  id: z.boolean().optional(),
  eventId: z.boolean().optional(),
  meterId: z.boolean().optional(),
  eventTimestamp: z.boolean().optional(),
  detectionRule: z.boolean().optional(),
  score: z.boolean().optional(),
  dataWindow: z.boolean().optional(),
  status: z.boolean().optional(),
  reviewerId: z.boolean().optional(),
  reviewTimestamp: z.boolean().optional(),
  justificationNotes: z.boolean().optional(),
  experimentRunId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  experimentRun: z.union([z.boolean(),z.lazy(() => ExperimentRunArgsSchema)]).optional(),
  event_label_link: z.union([z.boolean(),z.lazy(() => event_label_linkFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Anomaly_eventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ANOMALY LABEL
//------------------------------------------------------

export const anomaly_labelIncludeSchema: z.ZodType<Prisma.anomaly_labelInclude> = z.object({
  event_label_link: z.union([z.boolean(),z.lazy(() => event_label_linkFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Anomaly_labelCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const anomaly_labelArgsSchema: z.ZodType<Prisma.anomaly_labelDefaultArgs> = z.object({
  select: z.lazy(() => anomaly_labelSelectSchema).optional(),
  include: z.lazy(() => anomaly_labelIncludeSchema).optional(),
}).strict();

export const anomaly_labelCountOutputTypeArgsSchema: z.ZodType<Prisma.anomaly_labelCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => anomaly_labelCountOutputTypeSelectSchema).nullish(),
}).strict();

export const anomaly_labelCountOutputTypeSelectSchema: z.ZodType<Prisma.anomaly_labelCountOutputTypeSelect> = z.object({
  event_label_link: z.boolean().optional(),
}).strict();

export const anomaly_labelSelectSchema: z.ZodType<Prisma.anomaly_labelSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  event_label_link: z.union([z.boolean(),z.lazy(() => event_label_linkFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Anomaly_labelCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BORROW GOD
//------------------------------------------------------

export const borrow_godIncludeSchema: z.ZodType<Prisma.borrow_godInclude> = z.object({
  god_name: z.union([z.boolean(),z.lazy(() => god_nameArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const borrow_godArgsSchema: z.ZodType<Prisma.borrow_godDefaultArgs> = z.object({
  select: z.lazy(() => borrow_godSelectSchema).optional(),
  include: z.lazy(() => borrow_godIncludeSchema).optional(),
}).strict();

export const borrow_godSelectSchema: z.ZodType<Prisma.borrow_godSelect> = z.object({
  id: z.boolean().optional(),
  godNameId: z.boolean().optional(),
  applyName: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  typeId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  god_name: z.union([z.boolean(),z.lazy(() => god_nameArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// BUDDHIST
//------------------------------------------------------

export const buddhistIncludeSchema: z.ZodType<Prisma.buddhistInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const buddhistArgsSchema: z.ZodType<Prisma.buddhistDefaultArgs> = z.object({
  select: z.lazy(() => buddhistSelectSchema).optional(),
  include: z.lazy(() => buddhistIncludeSchema).optional(),
}).strict();

export const buddhistSelectSchema: z.ZodType<Prisma.buddhistSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  cellphone: z.boolean().optional(),
  phone: z.boolean().optional(),
  templeNowText: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// EVENT LABEL LINK
//------------------------------------------------------

export const event_label_linkIncludeSchema: z.ZodType<Prisma.event_label_linkInclude> = z.object({
  anomaly_event: z.union([z.boolean(),z.lazy(() => anomaly_eventArgsSchema)]).optional(),
  anomaly_label: z.union([z.boolean(),z.lazy(() => anomaly_labelArgsSchema)]).optional(),
}).strict()

export const event_label_linkArgsSchema: z.ZodType<Prisma.event_label_linkDefaultArgs> = z.object({
  select: z.lazy(() => event_label_linkSelectSchema).optional(),
  include: z.lazy(() => event_label_linkIncludeSchema).optional(),
}).strict();

export const event_label_linkSelectSchema: z.ZodType<Prisma.event_label_linkSelect> = z.object({
  id: z.boolean().optional(),
  eventId: z.boolean().optional(),
  labelId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  anomaly_event: z.union([z.boolean(),z.lazy(() => anomaly_eventArgsSchema)]).optional(),
  anomaly_label: z.union([z.boolean(),z.lazy(() => anomaly_labelArgsSchema)]).optional(),
}).strict()

// FAMILY
//------------------------------------------------------

export const familyIncludeSchema: z.ZodType<Prisma.familyInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  family_member: z.union([z.boolean(),z.lazy(() => family_memberFindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FamilyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const familyArgsSchema: z.ZodType<Prisma.familyDefaultArgs> = z.object({
  select: z.lazy(() => familySelectSchema).optional(),
  include: z.lazy(() => familyIncludeSchema).optional(),
}).strict();

export const familyCountOutputTypeArgsSchema: z.ZodType<Prisma.familyCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => familyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const familyCountOutputTypeSelectSchema: z.ZodType<Prisma.familyCountOutputTypeSelect> = z.object({
  family_member: z.boolean().optional(),
  servicing1: z.boolean().optional(),
  servicing2: z.boolean().optional(),
}).strict();

export const familySelectSchema: z.ZodType<Prisma.familySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  address: z.boolean().optional(),
  phone: z.boolean().optional(),
  mobile: z.boolean().optional(),
  email: z.boolean().optional(),
  note: z.boolean().optional(),
  postalCode: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  family_member: z.union([z.boolean(),z.lazy(() => family_memberFindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FamilyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FAMILY MEMBER
//------------------------------------------------------

export const family_memberIncludeSchema: z.ZodType<Prisma.family_memberInclude> = z.object({
  family: z.union([z.boolean(),z.lazy(() => familyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const family_memberArgsSchema: z.ZodType<Prisma.family_memberDefaultArgs> = z.object({
  select: z.lazy(() => family_memberSelectSchema).optional(),
  include: z.lazy(() => family_memberIncludeSchema).optional(),
}).strict();

export const family_memberSelectSchema: z.ZodType<Prisma.family_memberSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  relation: z.boolean().optional(),
  birthday: z.boolean().optional(),
  lunarDate: z.boolean().optional(),
  gender: z.boolean().optional(),
  note: z.boolean().optional(),
  mainPerson: z.boolean().optional(),
  mailThis: z.boolean().optional(),
  isLive: z.boolean().optional(),
  postcode: z.boolean().optional(),
  addr: z.boolean().optional(),
  familyId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  family: z.union([z.boolean(),z.lazy(() => familyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// GOD NAME
//------------------------------------------------------

export const god_nameIncludeSchema: z.ZodType<Prisma.god_nameInclude> = z.object({
  borrow_god: z.union([z.boolean(),z.lazy(() => borrow_godFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => God_nameCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const god_nameArgsSchema: z.ZodType<Prisma.god_nameDefaultArgs> = z.object({
  select: z.lazy(() => god_nameSelectSchema).optional(),
  include: z.lazy(() => god_nameIncludeSchema).optional(),
}).strict();

export const god_nameCountOutputTypeArgsSchema: z.ZodType<Prisma.god_nameCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => god_nameCountOutputTypeSelectSchema).nullish(),
}).strict();

export const god_nameCountOutputTypeSelectSchema: z.ZodType<Prisma.god_nameCountOutputTypeSelect> = z.object({
  borrow_god: z.boolean().optional(),
}).strict();

export const god_nameSelectSchema: z.ZodType<Prisma.god_nameSelect> = z.object({
  id: z.boolean().optional(),
  value: z.boolean().optional(),
  price: z.boolean().optional(),
  order: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  borrow_god: z.union([z.boolean(),z.lazy(() => borrow_godFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => God_nameCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MEMBER CLASS
//------------------------------------------------------

export const member_classIncludeSchema: z.ZodType<Prisma.member_classInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const member_classArgsSchema: z.ZodType<Prisma.member_classDefaultArgs> = z.object({
  select: z.lazy(() => member_classSelectSchema).optional(),
  include: z.lazy(() => member_classIncludeSchema).optional(),
}).strict();

export const member_classSelectSchema: z.ZodType<Prisma.member_classSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  type: z.boolean().optional(),
  level: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// MGYEAR
//------------------------------------------------------

export const mgyearIncludeSchema: z.ZodType<Prisma.mgyearInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const mgyearArgsSchema: z.ZodType<Prisma.mgyearDefaultArgs> = z.object({
  select: z.lazy(() => mgyearSelectSchema).optional(),
  include: z.lazy(() => mgyearIncludeSchema).optional(),
}).strict();

export const mgyearSelectSchema: z.ZodType<Prisma.mgyearSelect> = z.object({
  id: z.boolean().optional(),
  order: z.boolean().optional(),
  mgyear: z.boolean().optional(),
  year: z.boolean().optional(),
  nowUse: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// SERVICE 1
//------------------------------------------------------

export const service1IncludeSchema: z.ZodType<Prisma.service1Include> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => service2FindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Service1CountOutputTypeArgsSchema)]).optional(),
}).strict()

export const service1ArgsSchema: z.ZodType<Prisma.service1DefaultArgs> = z.object({
  select: z.lazy(() => service1SelectSchema).optional(),
  include: z.lazy(() => service1IncludeSchema).optional(),
}).strict();

export const service1CountOutputTypeArgsSchema: z.ZodType<Prisma.service1CountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => service1CountOutputTypeSelectSchema).nullish(),
}).strict();

export const service1CountOutputTypeSelectSchema: z.ZodType<Prisma.service1CountOutputTypeSelect> = z.object({
  service2: z.boolean().optional(),
  servicing1: z.boolean().optional(),
  servicing2: z.boolean().optional(),
}).strict();

export const service1SelectSchema: z.ZodType<Prisma.service1Select> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  type: z.boolean().optional(),
  level: z.boolean().optional(),
  nowUse: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => service2FindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Service1CountOutputTypeArgsSchema)]).optional(),
}).strict()

// SERVICE 2
//------------------------------------------------------

export const service2IncludeSchema: z.ZodType<Prisma.service2Include> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => service1ArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Service2CountOutputTypeArgsSchema)]).optional(),
}).strict()

export const service2ArgsSchema: z.ZodType<Prisma.service2DefaultArgs> = z.object({
  select: z.lazy(() => service2SelectSchema).optional(),
  include: z.lazy(() => service2IncludeSchema).optional(),
}).strict();

export const service2CountOutputTypeArgsSchema: z.ZodType<Prisma.service2CountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => service2CountOutputTypeSelectSchema).nullish(),
}).strict();

export const service2CountOutputTypeSelectSchema: z.ZodType<Prisma.service2CountOutputTypeSelect> = z.object({
  servicing1: z.boolean().optional(),
  servicing2: z.boolean().optional(),
}).strict();

export const service2SelectSchema: z.ZodType<Prisma.service2Select> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  level: z.boolean().optional(),
  nowUse: z.boolean().optional(),
  service1Id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => service1ArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Service2CountOutputTypeArgsSchema)]).optional(),
}).strict()

// SERVICING 1
//------------------------------------------------------

export const servicing1IncludeSchema: z.ZodType<Prisma.servicing1Include> = z.object({
  family: z.union([z.boolean(),z.lazy(() => familyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => service1ArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => service2ArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Servicing1CountOutputTypeArgsSchema)]).optional(),
}).strict()

export const servicing1ArgsSchema: z.ZodType<Prisma.servicing1DefaultArgs> = z.object({
  select: z.lazy(() => servicing1SelectSchema).optional(),
  include: z.lazy(() => servicing1IncludeSchema).optional(),
}).strict();

export const servicing1CountOutputTypeArgsSchema: z.ZodType<Prisma.servicing1CountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => servicing1CountOutputTypeSelectSchema).nullish(),
}).strict();

export const servicing1CountOutputTypeSelectSchema: z.ZodType<Prisma.servicing1CountOutputTypeSelect> = z.object({
  servicing2: z.boolean().optional(),
}).strict();

export const servicing1SelectSchema: z.ZodType<Prisma.servicing1Select> = z.object({
  id: z.boolean().optional(),
  familyId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  ordernum: z.boolean().optional(),
  year: z.boolean().optional(),
  applyDate: z.boolean().optional(),
  applyText: z.boolean().optional(),
  cellphone: z.boolean().optional(),
  addr: z.boolean().optional(),
  printType1Id: z.boolean().optional(),
  service1Id: z.boolean().optional(),
  service2Id: z.boolean().optional(),
  serial: z.boolean().optional(),
  accReceivable: z.boolean().optional(),
  accReceived: z.boolean().optional(),
  accPending: z.boolean().optional(),
  payStatus: z.boolean().optional(),
  payMethod: z.boolean().optional(),
  payCurrency: z.boolean().optional(),
  receiptNum: z.boolean().optional(),
  booksNum: z.boolean().optional(),
  payee: z.boolean().optional(),
  advisePeople: z.boolean().optional(),
  ps: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  family: z.union([z.boolean(),z.lazy(() => familyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => service1ArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => service2ArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Servicing1CountOutputTypeArgsSchema)]).optional(),
}).strict()

// SERVICING 2
//------------------------------------------------------

export const servicing2IncludeSchema: z.ZodType<Prisma.servicing2Include> = z.object({
  family: z.union([z.boolean(),z.lazy(() => familyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => service1ArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => service2ArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1ArgsSchema)]).optional(),
}).strict()

export const servicing2ArgsSchema: z.ZodType<Prisma.servicing2DefaultArgs> = z.object({
  select: z.lazy(() => servicing2SelectSchema).optional(),
  include: z.lazy(() => servicing2IncludeSchema).optional(),
}).strict();

export const servicing2SelectSchema: z.ZodType<Prisma.servicing2Select> = z.object({
  id: z.boolean().optional(),
  familyId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  servicing1Id: z.boolean().optional(),
  ordernum: z.boolean().optional(),
  year: z.boolean().optional(),
  service1Id: z.boolean().optional(),
  service2Id: z.boolean().optional(),
  serial: z.boolean().optional(),
  praytypeId: z.boolean().optional(),
  printType1Id: z.boolean().optional(),
  printType2Id: z.boolean().optional(),
  livename: z.boolean().optional(),
  people1: z.boolean().optional(),
  passname: z.boolean().optional(),
  passname1: z.boolean().optional(),
  passname2: z.boolean().optional(),
  passname3: z.boolean().optional(),
  passname4: z.boolean().optional(),
  people0: z.boolean().optional(),
  name: z.boolean().optional(),
  sexualId: z.boolean().optional(),
  sexualText: z.boolean().optional(),
  liveYear: z.boolean().optional(),
  boxNum: z.boolean().optional(),
  rowTotal: z.boolean().optional(),
  bornYear: z.boolean().optional(),
  bornMonth: z.boolean().optional(),
  bornDay: z.boolean().optional(),
  bornTime: z.boolean().optional(),
  addr: z.boolean().optional(),
  ps: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  family: z.union([z.boolean(),z.lazy(() => familyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => service1ArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => service2ArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => servicing1ArgsSchema)]).optional(),
}).strict()

// TEMPLE
//------------------------------------------------------

export const templeIncludeSchema: z.ZodType<Prisma.templeInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const templeArgsSchema: z.ZodType<Prisma.templeDefaultArgs> = z.object({
  select: z.lazy(() => templeSelectSchema).optional(),
  include: z.lazy(() => templeIncludeSchema).optional(),
}).strict();

export const templeSelectSchema: z.ZodType<Prisma.templeSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  address: z.boolean().optional(),
  phone: z.boolean().optional(),
  email: z.boolean().optional(),
  description: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// TRAINED MODEL
//------------------------------------------------------

export const TrainedModelIncludeSchema: z.ZodType<Prisma.TrainedModelInclude> = z.object({
  experimentRun: z.union([z.boolean(),z.lazy(() => ExperimentRunArgsSchema)]).optional(),
}).strict()

export const TrainedModelArgsSchema: z.ZodType<Prisma.TrainedModelDefaultArgs> = z.object({
  select: z.lazy(() => TrainedModelSelectSchema).optional(),
  include: z.lazy(() => TrainedModelIncludeSchema).optional(),
}).strict();

export const TrainedModelSelectSchema: z.ZodType<Prisma.TrainedModelSelect> = z.object({
  id: z.boolean().optional(),
  modelName: z.boolean().optional(),
  modelType: z.boolean().optional(),
  modelPath: z.boolean().optional(),
  precision: z.boolean().optional(),
  recall: z.boolean().optional(),
  f1Score: z.boolean().optional(),
  trainingDataSummary: z.boolean().optional(),
  experimentRunId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  experimentRun: z.union([z.boolean(),z.lazy(() => ExperimentRunArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  username: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboardingComplete: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locale: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  passkeys: z.lazy(() => PasskeyListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banned: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banReason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banExpires: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  locale: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyOrderByRelationAggregateInputSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputSchema).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    email: z.string(),
    username: z.string()
  }),
  z.object({
    id: z.string().cuid(),
    email: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    username: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    email: z.string(),
    username: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
  z.object({
    username: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  email: z.string().optional(),
  username: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboardingComplete: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locale: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  passkeys: z.lazy(() => PasskeyListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banned: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banReason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banExpires: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  locale: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  username: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboardingComplete: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  locale: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    token: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  idToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accessTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  idToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accessTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationWhereInputSchema: z.ZodType<Prisma.VerificationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VerificationOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const VerificationWhereUniqueInputSchema: z.ZodType<Prisma.VerificationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const VerificationOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => VerificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationMinOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const PasskeyWhereInputSchema: z.ZodType<Prisma.PasskeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const PasskeyOrderByWithRelationInputSchema: z.ZodType<Prisma.PasskeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PasskeyWhereUniqueInputSchema: z.ZodType<Prisma.PasskeyWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const PasskeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.PasskeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PasskeyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PasskeyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PasskeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PasskeyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PasskeySumOrderByAggregateInputSchema).optional()
}).strict();

export const PasskeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PasskeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema),z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema),z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const TwoFactorWhereInputSchema: z.ZodType<Prisma.TwoFactorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TwoFactorOrderByWithRelationInputSchema: z.ZodType<Prisma.TwoFactorOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TwoFactorWhereUniqueInputSchema: z.ZodType<Prisma.TwoFactorWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TwoFactorOrderByWithAggregationInputSchema: z.ZodType<Prisma.TwoFactorOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TwoFactorCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TwoFactorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TwoFactorMinOrderByAggregateInputSchema).optional()
}).strict();

export const TwoFactorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TwoFactorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema),z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema),z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountListRelationFilterSchema).optional(),
  borrow_god: z.lazy(() => Borrow_godListRelationFilterSchema).optional(),
  buddhist: z.lazy(() => BuddhistListRelationFilterSchema).optional(),
  customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  family: z.lazy(() => FamilyListRelationFilterSchema).optional(),
  family_member: z.lazy(() => Family_memberListRelationFilterSchema).optional(),
  god_name: z.lazy(() => God_nameListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  member_class: z.lazy(() => Member_classListRelationFilterSchema).optional(),
  mgyear: z.lazy(() => MgyearListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerListRelationFilterSchema).optional(),
  service1: z.lazy(() => Service1ListRelationFilterSchema).optional(),
  service2: z.lazy(() => Service2ListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional(),
  temple: z.lazy(() => TempleListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountOrderByRelationAggregateInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godOrderByRelationAggregateInputSchema).optional(),
  buddhist: z.lazy(() => buddhistOrderByRelationAggregateInputSchema).optional(),
  customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  expenses: z.lazy(() => ExpenseOrderByRelationAggregateInputSchema).optional(),
  family: z.lazy(() => familyOrderByRelationAggregateInputSchema).optional(),
  family_member: z.lazy(() => family_memberOrderByRelationAggregateInputSchema).optional(),
  god_name: z.lazy(() => god_nameOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  member_class: z.lazy(() => member_classOrderByRelationAggregateInputSchema).optional(),
  mgyear: z.lazy(() => mgyearOrderByRelationAggregateInputSchema).optional(),
  products: z.lazy(() => ProductOrderByRelationAggregateInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingOrderByRelationAggregateInputSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerOrderByRelationAggregateInputSchema).optional(),
  service1: z.lazy(() => service1OrderByRelationAggregateInputSchema).optional(),
  service2: z.lazy(() => service2OrderByRelationAggregateInputSchema).optional(),
  servicing1: z.lazy(() => servicing1OrderByRelationAggregateInputSchema).optional(),
  servicing2: z.lazy(() => servicing2OrderByRelationAggregateInputSchema).optional(),
  temple: z.lazy(() => templeOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    slug: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountListRelationFilterSchema).optional(),
  borrow_god: z.lazy(() => Borrow_godListRelationFilterSchema).optional(),
  buddhist: z.lazy(() => BuddhistListRelationFilterSchema).optional(),
  customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  family: z.lazy(() => FamilyListRelationFilterSchema).optional(),
  family_member: z.lazy(() => Family_memberListRelationFilterSchema).optional(),
  god_name: z.lazy(() => God_nameListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  member_class: z.lazy(() => Member_classListRelationFilterSchema).optional(),
  mgyear: z.lazy(() => MgyearListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerListRelationFilterSchema).optional(),
  service1: z.lazy(() => Service1ListRelationFilterSchema).optional(),
  service2: z.lazy(() => Service2ListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional(),
  temple: z.lazy(() => TempleListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RelationshipManagerWhereInputSchema: z.ZodType<Prisma.RelationshipManagerWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RelationshipManagerWhereInputSchema),z.lazy(() => RelationshipManagerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelationshipManagerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelationshipManagerWhereInputSchema),z.lazy(() => RelationshipManagerWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  joinDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resignDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  finder2Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  rm1Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  rm2Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerOrderByWithRelationInputSchema: z.ZodType<Prisma.RelationshipManagerOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  expenses: z.lazy(() => ExpenseOrderByRelationAggregateInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const RelationshipManagerWhereUniqueInputSchema: z.ZodType<Prisma.RelationshipManagerWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_email: z.lazy(() => RelationshipManagerOrganizationIdEmailCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_email: z.lazy(() => RelationshipManagerOrganizationIdEmailCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_email: z.lazy(() => RelationshipManagerOrganizationIdEmailCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RelationshipManagerWhereInputSchema),z.lazy(() => RelationshipManagerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelationshipManagerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelationshipManagerWhereInputSchema),z.lazy(() => RelationshipManagerWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerCount: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  joinDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resignDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  finder2Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  rm1Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  rm2Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const RelationshipManagerOrderByWithAggregationInputSchema: z.ZodType<Prisma.RelationshipManagerOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RelationshipManagerCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RelationshipManagerAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RelationshipManagerMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RelationshipManagerMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RelationshipManagerSumOrderByAggregateInputSchema).optional()
}).strict();

export const RelationshipManagerScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RelationshipManagerScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema),z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema),z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerCount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  joinDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  resignDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const CustomerWhereInputSchema: z.ZodType<Prisma.CustomerWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionListRelationFilterSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountListRelationFilterSchema).optional(),
  finder1: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  finder2: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  rm1: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  rm2: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict();

export const CustomerOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomerOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  assetTransactions: z.lazy(() => AssetTransactionOrderByRelationAggregateInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountOrderByRelationAggregateInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CustomerWhereUniqueInputSchema: z.ZodType<Prisma.CustomerWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_code: z.lazy(() => CustomerOrganizationIdCodeCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_code: z.lazy(() => CustomerOrganizationIdCodeCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_code: z.lazy(() => CustomerOrganizationIdCodeCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionListRelationFilterSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountListRelationFilterSchema).optional(),
  finder1: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  finder2: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  rm1: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  rm2: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict());

export const CustomerOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomerOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomerCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CustomerAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomerMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomerMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CustomerSumOrderByAggregateInputSchema).optional()
}).strict();

export const CustomerScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomerScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  rm1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const MemberWhereInputSchema: z.ZodType<Prisma.MemberWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const MemberOrderByWithRelationInputSchema: z.ZodType<Prisma.MemberOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const MemberWhereUniqueInputSchema: z.ZodType<Prisma.MemberWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const MemberOrderByWithAggregationInputSchema: z.ZodType<Prisma.MemberOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MemberCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MemberMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MemberMinOrderByAggregateInputSchema).optional()
}).strict();

export const MemberScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MemberScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationWhereInputSchema: z.ZodType<Prisma.InvitationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const InvitationOrderByWithRelationInputSchema: z.ZodType<Prisma.InvitationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const InvitationWhereUniqueInputSchema: z.ZodType<Prisma.InvitationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const InvitationOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvitationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputSchema).optional()
}).strict();

export const InvitationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvitationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const PurchaseWhereInputSchema: z.ZodType<Prisma.PurchaseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subscriptionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const PurchaseOrderByWithRelationInputSchema: z.ZodType<Prisma.PurchaseOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PurchaseWhereUniqueInputSchema: z.ZodType<Prisma.PurchaseWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    subscriptionId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    subscriptionId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  subscriptionId: z.string().optional(),
  AND: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const PurchaseOrderByWithAggregationInputSchema: z.ZodType<Prisma.PurchaseOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PurchaseCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PurchaseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PurchaseMinOrderByAggregateInputSchema).optional()
}).strict();

export const PurchaseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PurchaseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema),z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema),z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeWithAggregatesFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  subscriptionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AiChatWhereInputSchema: z.ZodType<Prisma.AiChatWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const AiChatOrderByWithRelationInputSchema: z.ZodType<Prisma.AiChatOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  messages: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AiChatWhereUniqueInputSchema: z.ZodType<Prisma.AiChatWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const AiChatOrderByWithAggregationInputSchema: z.ZodType<Prisma.AiChatOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  messages: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AiChatCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AiChatMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AiChatMinOrderByAggregateInputSchema).optional()
}).strict();

export const AiChatScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AiChatScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema),z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema),z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const BankAccountWhereInputSchema: z.ZodType<Prisma.BankAccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BankAccountWhereInputSchema),z.lazy(() => BankAccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BankAccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BankAccountWhereInputSchema),z.lazy(() => BankAccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accountNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  balance: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customer: z.union([ z.lazy(() => CustomerNullableScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict();

export const BankAccountOrderByWithRelationInputSchema: z.ZodType<Prisma.BankAccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingOrderByRelationAggregateInputSchema).optional()
}).strict();

export const BankAccountWhereUniqueInputSchema: z.ZodType<Prisma.BankAccountWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_accountNumber: z.lazy(() => BankAccountOrganizationIdAccountNumberCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_accountNumber: z.lazy(() => BankAccountOrganizationIdAccountNumberCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_accountNumber: z.lazy(() => BankAccountOrganizationIdAccountNumberCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => BankAccountWhereInputSchema),z.lazy(() => BankAccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BankAccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BankAccountWhereInputSchema),z.lazy(() => BankAccountWhereInputSchema).array() ]).optional(),
  bankName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accountNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  balance: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customer: z.union([ z.lazy(() => CustomerNullableScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict());

export const BankAccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.BankAccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => BankAccountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => BankAccountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BankAccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BankAccountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => BankAccountSumOrderByAggregateInputSchema).optional()
}).strict();

export const BankAccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BankAccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema),z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema),z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  bankName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accountName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  accountNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  balance: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  customerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ExpenseWhereInputSchema: z.ZodType<Prisma.ExpenseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  exchangeRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  receiptUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  sgdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  rm: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseOrderByWithRelationInputSchema: z.ZodType<Prisma.ExpenseOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  receiptUrls: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  rm: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional()
}).strict();

export const ExpenseWhereUniqueInputSchema: z.ZodType<Prisma.ExpenseWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  exchangeRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  receiptUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  sgdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  rm: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ExpenseOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExpenseOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  receiptUrls: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ExpenseCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ExpenseAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExpenseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExpenseMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ExpenseSumOrderByAggregateInputSchema).optional()
}).strict();

export const ExpenseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExpenseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  exchangeRate: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  receiptUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  sgdAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdRate: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProductWhereInputSchema: z.ZodType<Prisma.ProductWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  distributionType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict();

export const ProductOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProductWhereUniqueInputSchema: z.ZodType<Prisma.ProductWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_code: z.lazy(() => ProductOrganizationIdCodeCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_code: z.lazy(() => ProductOrganizationIdCodeCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_code: z.lazy(() => ProductOrganizationIdCodeCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  distributionType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict());

export const ProductOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProductCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProductScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  distributionType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ProfitSharingWhereInputSchema: z.ZodType<Prisma.ProfitSharingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfitSharingWhereInputSchema),z.lazy(() => ProfitSharingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfitSharingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfitSharingWhereInputSchema),z.lazy(() => ProfitSharingWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankAccountId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profitDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  companyProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenue: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  directTradeBookingFee: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finderProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  fxRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shareable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyFeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  BankAccount: z.union([ z.lazy(() => BankAccountNullableScalarRelationFilterSchema),z.lazy(() => BankAccountWhereInputSchema) ]).optional().nullable(),
  customer: z.union([ z.lazy(() => CustomerScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict();

export const ProfitSharingOrderByWithRelationInputSchema: z.ZodType<Prisma.ProfitSharingOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companyRevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BankAccount: z.lazy(() => BankAccountOrderByWithRelationInputSchema).optional(),
  customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional()
}).strict();

export const ProfitSharingWhereUniqueInputSchema: z.ZodType<Prisma.ProfitSharingWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ProfitSharingWhereInputSchema),z.lazy(() => ProfitSharingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfitSharingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfitSharingWhereInputSchema),z.lazy(() => ProfitSharingWhereInputSchema).array() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankAccountId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profitDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  companyProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenue: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  directTradeBookingFee: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finderProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  fxRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shareable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyFeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  BankAccount: z.union([ z.lazy(() => BankAccountNullableScalarRelationFilterSchema),z.lazy(() => BankAccountWhereInputSchema) ]).optional().nullable(),
  customer: z.union([ z.lazy(() => CustomerScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict());

export const ProfitSharingOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProfitSharingOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companyRevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ProfitSharingCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProfitSharingAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProfitSharingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProfitSharingMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProfitSharingSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProfitSharingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProfitSharingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  bankAccountId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  profitDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  companyProfitSharePercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenue: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenueOriginal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  directTradeBookingFee: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finderProfitSharePercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueOriginal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueUSD: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  fxRate: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmProfitSharePercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueOriginal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueUSD: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shareable: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finder1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder1Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder2Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm1Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm2Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyFeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
}).strict();

export const AssetTransactionWhereInputSchema: z.ZodType<Prisma.AssetTransactionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AssetTransactionWhereInputSchema),z.lazy(() => AssetTransactionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AssetTransactionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AssetTransactionWhereInputSchema),z.lazy(() => AssetTransactionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customer: z.union([ z.lazy(() => CustomerScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
}).strict();

export const AssetTransactionOrderByWithRelationInputSchema: z.ZodType<Prisma.AssetTransactionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional()
}).strict();

export const AssetTransactionWhereUniqueInputSchema: z.ZodType<Prisma.AssetTransactionWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AssetTransactionWhereInputSchema),z.lazy(() => AssetTransactionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AssetTransactionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AssetTransactionWhereInputSchema),z.lazy(() => AssetTransactionWhereInputSchema).array() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customer: z.union([ z.lazy(() => CustomerScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
}).strict());

export const AssetTransactionOrderByWithAggregationInputSchema: z.ZodType<Prisma.AssetTransactionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AssetTransactionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AssetTransactionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AssetTransactionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AssetTransactionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AssetTransactionSumOrderByAggregateInputSchema).optional()
}).strict();

export const AssetTransactionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AssetTransactionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema),z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema),z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ammeterWhereInputSchema: z.ZodType<Prisma.ammeterWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ammeterWhereInputSchema),z.lazy(() => ammeterWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ammeterWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ammeterWhereInputSchema),z.lazy(() => ammeterWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  electricMeterNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  electricMeterName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ammeterOrderByWithRelationInputSchema: z.ZodType<Prisma.ammeterOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  voltage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  power: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  battery: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  switchState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  networkState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const ammeterWhereUniqueInputSchema: z.ZodType<Prisma.ammeterWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    deviceNumber: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    deviceNumber: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  deviceNumber: z.string().optional(),
  AND: z.union([ z.lazy(() => ammeterWhereInputSchema),z.lazy(() => ammeterWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ammeterWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ammeterWhereInputSchema),z.lazy(() => ammeterWhereInputSchema).array() ]).optional(),
  electricMeterNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  electricMeterName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const ammeterOrderByWithAggregationInputSchema: z.ZodType<Prisma.ammeterOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  voltage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  power: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  battery: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  switchState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  networkState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ammeterCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ammeterAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ammeterMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ammeterMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ammeterSumOrderByAggregateInputSchema).optional()
}).strict();

export const ammeterScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ammeterScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ammeterScalarWhereWithAggregatesInputSchema),z.lazy(() => ammeterScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ammeterScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ammeterScalarWhereWithAggregatesInputSchema),z.lazy(() => ammeterScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  electricMeterNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  electricMeterName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ammeter_logWhereInputSchema: z.ZodType<Prisma.ammeter_logWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ammeter_logWhereInputSchema),z.lazy(() => ammeter_logWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ammeter_logWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ammeter_logWhereInputSchema),z.lazy(() => ammeter_logWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  requestData: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  responseData: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  statusCode: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  success: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  errorMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  responseTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ammeter_logOrderByWithRelationInputSchema: z.ZodType<Prisma.ammeter_logOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  voltage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  power: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  battery: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  switchState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  networkState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  requestData: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  responseData: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  statusCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  responseTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const ammeter_logWhereUniqueInputSchema: z.ZodType<Prisma.ammeter_logWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => ammeter_logWhereInputSchema),z.lazy(() => ammeter_logWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ammeter_logWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ammeter_logWhereInputSchema),z.lazy(() => ammeter_logWhereInputSchema).array() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  requestData: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  responseData: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  statusCode: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  success: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  errorMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  responseTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const ammeter_logOrderByWithAggregationInputSchema: z.ZodType<Prisma.ammeter_logOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  voltage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  power: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  battery: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  switchState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  networkState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  requestData: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  responseData: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  statusCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  responseTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ammeter_logCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ammeter_logAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ammeter_logMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ammeter_logMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ammeter_logSumOrderByAggregateInputSchema).optional()
}).strict();

export const ammeter_logScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ammeter_logScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ammeter_logScalarWhereWithAggregatesInputSchema),z.lazy(() => ammeter_logScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ammeter_logScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ammeter_logScalarWhereWithAggregatesInputSchema),z.lazy(() => ammeter_logScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  requestData: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  responseData: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  statusCode: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  success: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  errorMessage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  responseTime: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ExperimentRunWhereInputSchema: z.ZodType<Prisma.ExperimentRunWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExperimentRunWhereInputSchema),z.lazy(() => ExperimentRunWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExperimentRunWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExperimentRunWhereInputSchema),z.lazy(() => ExperimentRunWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  filteringParameters: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumExperimentRunStatusFilterSchema),z.lazy(() => ExperimentRunStatusSchema) ]).optional(),
  candidateCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  positiveLabelCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  negativeLabelCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  anomalyEvents: z.lazy(() => Anomaly_eventListRelationFilterSchema).optional(),
  trainedModel: z.union([ z.lazy(() => TrainedModelNullableScalarRelationFilterSchema),z.lazy(() => TrainedModelWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ExperimentRunOrderByWithRelationInputSchema: z.ZodType<Prisma.ExperimentRunOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  filteringParameters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  positiveLabelCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  negativeLabelCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  anomalyEvents: z.lazy(() => anomaly_eventOrderByRelationAggregateInputSchema).optional(),
  trainedModel: z.lazy(() => TrainedModelOrderByWithRelationInputSchema).optional()
}).strict();

export const ExperimentRunWhereUniqueInputSchema: z.ZodType<Prisma.ExperimentRunWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ExperimentRunWhereInputSchema),z.lazy(() => ExperimentRunWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExperimentRunWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExperimentRunWhereInputSchema),z.lazy(() => ExperimentRunWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  filteringParameters: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumExperimentRunStatusFilterSchema),z.lazy(() => ExperimentRunStatusSchema) ]).optional(),
  candidateCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  positiveLabelCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  negativeLabelCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  anomalyEvents: z.lazy(() => Anomaly_eventListRelationFilterSchema).optional(),
  trainedModel: z.union([ z.lazy(() => TrainedModelNullableScalarRelationFilterSchema),z.lazy(() => TrainedModelWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ExperimentRunOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExperimentRunOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  filteringParameters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  positiveLabelCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  negativeLabelCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ExperimentRunCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ExperimentRunAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExperimentRunMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExperimentRunMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ExperimentRunSumOrderByAggregateInputSchema).optional()
}).strict();

export const ExperimentRunScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExperimentRunScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema),z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema),z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  filteringParameters: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumExperimentRunStatusWithAggregatesFilterSchema),z.lazy(() => ExperimentRunStatusSchema) ]).optional(),
  candidateCount: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  positiveLabelCount: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  negativeLabelCount: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const anomaly_eventWhereInputSchema: z.ZodType<Prisma.anomaly_eventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => anomaly_eventWhereInputSchema),z.lazy(() => anomaly_eventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => anomaly_eventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => anomaly_eventWhereInputSchema),z.lazy(() => anomaly_eventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  meterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventTimestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  detectionRule: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  dataWindow: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumAnomalyEventStatusFilterSchema),z.lazy(() => AnomalyEventStatusSchema) ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reviewTimestamp: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  justificationNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  experimentRunId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  experimentRun: z.union([ z.lazy(() => ExperimentRunNullableScalarRelationFilterSchema),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional().nullable(),
  event_label_link: z.lazy(() => Event_label_linkListRelationFilterSchema).optional()
}).strict();

export const anomaly_eventOrderByWithRelationInputSchema: z.ZodType<Prisma.anomaly_eventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  dataWindow: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reviewTimestamp: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  justificationNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  experimentRunId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  experimentRun: z.lazy(() => ExperimentRunOrderByWithRelationInputSchema).optional(),
  event_label_link: z.lazy(() => event_label_linkOrderByRelationAggregateInputSchema).optional()
}).strict();

export const anomaly_eventWhereUniqueInputSchema: z.ZodType<Prisma.anomaly_eventWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    eventId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    eventId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  eventId: z.string().optional(),
  AND: z.union([ z.lazy(() => anomaly_eventWhereInputSchema),z.lazy(() => anomaly_eventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => anomaly_eventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => anomaly_eventWhereInputSchema),z.lazy(() => anomaly_eventWhereInputSchema).array() ]).optional(),
  meterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventTimestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  detectionRule: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  dataWindow: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumAnomalyEventStatusFilterSchema),z.lazy(() => AnomalyEventStatusSchema) ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reviewTimestamp: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  justificationNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  experimentRunId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  experimentRun: z.union([ z.lazy(() => ExperimentRunNullableScalarRelationFilterSchema),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional().nullable(),
  event_label_link: z.lazy(() => Event_label_linkListRelationFilterSchema).optional()
}).strict());

export const anomaly_eventOrderByWithAggregationInputSchema: z.ZodType<Prisma.anomaly_eventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  dataWindow: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reviewTimestamp: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  justificationNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  experimentRunId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => anomaly_eventCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => anomaly_eventAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => anomaly_eventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => anomaly_eventMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => anomaly_eventSumOrderByAggregateInputSchema).optional()
}).strict();

export const anomaly_eventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.anomaly_eventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => anomaly_eventScalarWhereWithAggregatesInputSchema),z.lazy(() => anomaly_eventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => anomaly_eventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => anomaly_eventScalarWhereWithAggregatesInputSchema),z.lazy(() => anomaly_eventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  meterId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventTimestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  detectionRule: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  score: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  dataWindow: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumAnomalyEventStatusWithAggregatesFilterSchema),z.lazy(() => AnomalyEventStatusSchema) ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  reviewTimestamp: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  justificationNotes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  experimentRunId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const anomaly_labelWhereInputSchema: z.ZodType<Prisma.anomaly_labelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => anomaly_labelWhereInputSchema),z.lazy(() => anomaly_labelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => anomaly_labelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => anomaly_labelWhereInputSchema),z.lazy(() => anomaly_labelWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  event_label_link: z.lazy(() => Event_label_linkListRelationFilterSchema).optional()
}).strict();

export const anomaly_labelOrderByWithRelationInputSchema: z.ZodType<Prisma.anomaly_labelOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  event_label_link: z.lazy(() => event_label_linkOrderByRelationAggregateInputSchema).optional()
}).strict();

export const anomaly_labelWhereUniqueInputSchema: z.ZodType<Prisma.anomaly_labelWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    name: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => anomaly_labelWhereInputSchema),z.lazy(() => anomaly_labelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => anomaly_labelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => anomaly_labelWhereInputSchema),z.lazy(() => anomaly_labelWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  event_label_link: z.lazy(() => Event_label_linkListRelationFilterSchema).optional()
}).strict());

export const anomaly_labelOrderByWithAggregationInputSchema: z.ZodType<Prisma.anomaly_labelOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => anomaly_labelCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => anomaly_labelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => anomaly_labelMinOrderByAggregateInputSchema).optional()
}).strict();

export const anomaly_labelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.anomaly_labelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => anomaly_labelScalarWhereWithAggregatesInputSchema),z.lazy(() => anomaly_labelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => anomaly_labelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => anomaly_labelScalarWhereWithAggregatesInputSchema),z.lazy(() => anomaly_labelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const borrow_godWhereInputSchema: z.ZodType<Prisma.borrow_godWhereInput> = z.object({
  AND: z.union([ z.lazy(() => borrow_godWhereInputSchema),z.lazy(() => borrow_godWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => borrow_godWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => borrow_godWhereInputSchema),z.lazy(() => borrow_godWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  godNameId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  typeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  god_name: z.union([ z.lazy(() => God_nameScalarRelationFilterSchema),z.lazy(() => god_nameWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const borrow_godOrderByWithRelationInputSchema: z.ZodType<Prisma.borrow_godOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  god_name: z.lazy(() => god_nameOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const borrow_godWhereUniqueInputSchema: z.ZodType<Prisma.borrow_godWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => borrow_godWhereInputSchema),z.lazy(() => borrow_godWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => borrow_godWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => borrow_godWhereInputSchema),z.lazy(() => borrow_godWhereInputSchema).array() ]).optional(),
  godNameId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  typeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  god_name: z.union([ z.lazy(() => God_nameScalarRelationFilterSchema),z.lazy(() => god_nameWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const borrow_godOrderByWithAggregationInputSchema: z.ZodType<Prisma.borrow_godOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => borrow_godCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => borrow_godMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => borrow_godMinOrderByAggregateInputSchema).optional()
}).strict();

export const borrow_godScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.borrow_godScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => borrow_godScalarWhereWithAggregatesInputSchema),z.lazy(() => borrow_godScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => borrow_godScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => borrow_godScalarWhereWithAggregatesInputSchema),z.lazy(() => borrow_godScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  godNameId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  applyName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  typeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const buddhistWhereInputSchema: z.ZodType<Prisma.buddhistWhereInput> = z.object({
  AND: z.union([ z.lazy(() => buddhistWhereInputSchema),z.lazy(() => buddhistWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => buddhistWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => buddhistWhereInputSchema),z.lazy(() => buddhistWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  templeNowText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const buddhistOrderByWithRelationInputSchema: z.ZodType<Prisma.buddhistOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  templeNowText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const buddhistWhereUniqueInputSchema: z.ZodType<Prisma.buddhistWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => buddhistWhereInputSchema),z.lazy(() => buddhistWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => buddhistWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => buddhistWhereInputSchema),z.lazy(() => buddhistWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  templeNowText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const buddhistOrderByWithAggregationInputSchema: z.ZodType<Prisma.buddhistOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  templeNowText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => buddhistCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => buddhistMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => buddhistMinOrderByAggregateInputSchema).optional()
}).strict();

export const buddhistScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.buddhistScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => buddhistScalarWhereWithAggregatesInputSchema),z.lazy(() => buddhistScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => buddhistScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => buddhistScalarWhereWithAggregatesInputSchema),z.lazy(() => buddhistScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  templeNowText: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const event_label_linkWhereInputSchema: z.ZodType<Prisma.event_label_linkWhereInput> = z.object({
  AND: z.union([ z.lazy(() => event_label_linkWhereInputSchema),z.lazy(() => event_label_linkWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => event_label_linkWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => event_label_linkWhereInputSchema),z.lazy(() => event_label_linkWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  labelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  anomaly_event: z.union([ z.lazy(() => Anomaly_eventScalarRelationFilterSchema),z.lazy(() => anomaly_eventWhereInputSchema) ]).optional(),
  anomaly_label: z.union([ z.lazy(() => Anomaly_labelScalarRelationFilterSchema),z.lazy(() => anomaly_labelWhereInputSchema) ]).optional(),
}).strict();

export const event_label_linkOrderByWithRelationInputSchema: z.ZodType<Prisma.event_label_linkOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  anomaly_event: z.lazy(() => anomaly_eventOrderByWithRelationInputSchema).optional(),
  anomaly_label: z.lazy(() => anomaly_labelOrderByWithRelationInputSchema).optional()
}).strict();

export const event_label_linkWhereUniqueInputSchema: z.ZodType<Prisma.event_label_linkWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    eventId_labelId: z.lazy(() => event_label_linkEventIdLabelIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    eventId_labelId: z.lazy(() => event_label_linkEventIdLabelIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  eventId_labelId: z.lazy(() => event_label_linkEventIdLabelIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => event_label_linkWhereInputSchema),z.lazy(() => event_label_linkWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => event_label_linkWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => event_label_linkWhereInputSchema),z.lazy(() => event_label_linkWhereInputSchema).array() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  labelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  anomaly_event: z.union([ z.lazy(() => Anomaly_eventScalarRelationFilterSchema),z.lazy(() => anomaly_eventWhereInputSchema) ]).optional(),
  anomaly_label: z.union([ z.lazy(() => Anomaly_labelScalarRelationFilterSchema),z.lazy(() => anomaly_labelWhereInputSchema) ]).optional(),
}).strict());

export const event_label_linkOrderByWithAggregationInputSchema: z.ZodType<Prisma.event_label_linkOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => event_label_linkCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => event_label_linkMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => event_label_linkMinOrderByAggregateInputSchema).optional()
}).strict();

export const event_label_linkScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.event_label_linkScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => event_label_linkScalarWhereWithAggregatesInputSchema),z.lazy(() => event_label_linkScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => event_label_linkScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => event_label_linkScalarWhereWithAggregatesInputSchema),z.lazy(() => event_label_linkScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  labelId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const familyWhereInputSchema: z.ZodType<Prisma.familyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => familyWhereInputSchema),z.lazy(() => familyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => familyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => familyWhereInputSchema),z.lazy(() => familyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  family_member: z.lazy(() => Family_memberListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict();

export const familyOrderByWithRelationInputSchema: z.ZodType<Prisma.familyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  postalCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  family_member: z.lazy(() => family_memberOrderByRelationAggregateInputSchema).optional(),
  servicing1: z.lazy(() => servicing1OrderByRelationAggregateInputSchema).optional(),
  servicing2: z.lazy(() => servicing2OrderByRelationAggregateInputSchema).optional()
}).strict();

export const familyWhereUniqueInputSchema: z.ZodType<Prisma.familyWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => familyWhereInputSchema),z.lazy(() => familyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => familyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => familyWhereInputSchema),z.lazy(() => familyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  family_member: z.lazy(() => Family_memberListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict());

export const familyOrderByWithAggregationInputSchema: z.ZodType<Prisma.familyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  postalCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => familyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => familyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => familyMinOrderByAggregateInputSchema).optional()
}).strict();

export const familyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.familyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => familyScalarWhereWithAggregatesInputSchema),z.lazy(() => familyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => familyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => familyScalarWhereWithAggregatesInputSchema),z.lazy(() => familyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mobile: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const family_memberWhereInputSchema: z.ZodType<Prisma.family_memberWhereInput> = z.object({
  AND: z.union([ z.lazy(() => family_memberWhereInputSchema),z.lazy(() => family_memberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => family_memberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => family_memberWhereInputSchema),z.lazy(() => family_memberWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birthday: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lunarDate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mainPerson: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mailThis: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isLive: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  postcode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => familyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const family_memberOrderByWithRelationInputSchema: z.ZodType<Prisma.family_memberOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birthday: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lunarDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  family: z.lazy(() => familyOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const family_memberWhereUniqueInputSchema: z.ZodType<Prisma.family_memberWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => family_memberWhereInputSchema),z.lazy(() => family_memberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => family_memberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => family_memberWhereInputSchema),z.lazy(() => family_memberWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birthday: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lunarDate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mainPerson: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mailThis: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isLive: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  postcode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => familyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const family_memberOrderByWithAggregationInputSchema: z.ZodType<Prisma.family_memberOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birthday: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lunarDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => family_memberCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => family_memberMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => family_memberMinOrderByAggregateInputSchema).optional()
}).strict();

export const family_memberScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.family_memberScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => family_memberScalarWhereWithAggregatesInputSchema),z.lazy(() => family_memberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => family_memberScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => family_memberScalarWhereWithAggregatesInputSchema),z.lazy(() => family_memberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  birthday: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lunarDate: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mainPerson: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mailThis: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isLive: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  postcode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  familyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const god_nameWhereInputSchema: z.ZodType<Prisma.god_nameWhereInput> = z.object({
  AND: z.union([ z.lazy(() => god_nameWhereInputSchema),z.lazy(() => god_nameWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => god_nameWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => god_nameWhereInputSchema),z.lazy(() => god_nameWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  borrow_god: z.lazy(() => Borrow_godListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const god_nameOrderByWithRelationInputSchema: z.ZodType<Prisma.god_nameOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  borrow_god: z.lazy(() => borrow_godOrderByRelationAggregateInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const god_nameWhereUniqueInputSchema: z.ZodType<Prisma.god_nameWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => god_nameWhereInputSchema),z.lazy(() => god_nameWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => god_nameWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => god_nameWhereInputSchema),z.lazy(() => god_nameWhereInputSchema).array() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  borrow_god: z.lazy(() => Borrow_godListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const god_nameOrderByWithAggregationInputSchema: z.ZodType<Prisma.god_nameOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => god_nameCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => god_nameAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => god_nameMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => god_nameMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => god_nameSumOrderByAggregateInputSchema).optional()
}).strict();

export const god_nameScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.god_nameScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => god_nameScalarWhereWithAggregatesInputSchema),z.lazy(() => god_nameScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => god_nameScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => god_nameScalarWhereWithAggregatesInputSchema),z.lazy(() => god_nameScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const member_classWhereInputSchema: z.ZodType<Prisma.member_classWhereInput> = z.object({
  AND: z.union([ z.lazy(() => member_classWhereInputSchema),z.lazy(() => member_classWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => member_classWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => member_classWhereInputSchema),z.lazy(() => member_classWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const member_classOrderByWithRelationInputSchema: z.ZodType<Prisma.member_classOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const member_classWhereUniqueInputSchema: z.ZodType<Prisma.member_classWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => member_classWhereInputSchema),z.lazy(() => member_classWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => member_classWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => member_classWhereInputSchema),z.lazy(() => member_classWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const member_classOrderByWithAggregationInputSchema: z.ZodType<Prisma.member_classOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => member_classCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => member_classAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => member_classMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => member_classMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => member_classSumOrderByAggregateInputSchema).optional()
}).strict();

export const member_classScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.member_classScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => member_classScalarWhereWithAggregatesInputSchema),z.lazy(() => member_classScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => member_classScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => member_classScalarWhereWithAggregatesInputSchema),z.lazy(() => member_classScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const mgyearWhereInputSchema: z.ZodType<Prisma.mgyearWhereInput> = z.object({
  AND: z.union([ z.lazy(() => mgyearWhereInputSchema),z.lazy(() => mgyearWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mgyearWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mgyearWhereInputSchema),z.lazy(() => mgyearWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgyear: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const mgyearOrderByWithRelationInputSchema: z.ZodType<Prisma.mgyearOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const mgyearWhereUniqueInputSchema: z.ZodType<Prisma.mgyearWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    organizationId_mgyear: z.lazy(() => mgyearOrganizationIdMgyearCompoundUniqueInputSchema),
    organizationId_year: z.lazy(() => mgyearOrganizationIdYearCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
    organizationId_mgyear: z.lazy(() => mgyearOrganizationIdMgyearCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
    organizationId_year: z.lazy(() => mgyearOrganizationIdYearCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    organizationId_mgyear: z.lazy(() => mgyearOrganizationIdMgyearCompoundUniqueInputSchema),
    organizationId_year: z.lazy(() => mgyearOrganizationIdYearCompoundUniqueInputSchema),
  }),
  z.object({
    organizationId_mgyear: z.lazy(() => mgyearOrganizationIdMgyearCompoundUniqueInputSchema),
  }),
  z.object({
    organizationId_year: z.lazy(() => mgyearOrganizationIdYearCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  organizationId_mgyear: z.lazy(() => mgyearOrganizationIdMgyearCompoundUniqueInputSchema).optional(),
  organizationId_year: z.lazy(() => mgyearOrganizationIdYearCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => mgyearWhereInputSchema),z.lazy(() => mgyearWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mgyearWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mgyearWhereInputSchema),z.lazy(() => mgyearWhereInputSchema).array() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  mgyear: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const mgyearOrderByWithAggregationInputSchema: z.ZodType<Prisma.mgyearOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => mgyearCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => mgyearAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => mgyearMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => mgyearMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => mgyearSumOrderByAggregateInputSchema).optional()
}).strict();

export const mgyearScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.mgyearScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => mgyearScalarWhereWithAggregatesInputSchema),z.lazy(() => mgyearScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => mgyearScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mgyearScalarWhereWithAggregatesInputSchema),z.lazy(() => mgyearScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  mgyear: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const service1WhereInputSchema: z.ZodType<Prisma.service1WhereInput> = z.object({
  AND: z.union([ z.lazy(() => service1WhereInputSchema),z.lazy(() => service1WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => service1WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => service1WhereInputSchema),z.lazy(() => service1WhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service2: z.lazy(() => Service2ListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict();

export const service1OrderByWithRelationInputSchema: z.ZodType<Prisma.service1OrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  service2: z.lazy(() => service2OrderByRelationAggregateInputSchema).optional(),
  servicing1: z.lazy(() => servicing1OrderByRelationAggregateInputSchema).optional(),
  servicing2: z.lazy(() => servicing2OrderByRelationAggregateInputSchema).optional()
}).strict();

export const service1WhereUniqueInputSchema: z.ZodType<Prisma.service1WhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => service1WhereInputSchema),z.lazy(() => service1WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => service1WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => service1WhereInputSchema),z.lazy(() => service1WhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service2: z.lazy(() => Service2ListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict());

export const service1OrderByWithAggregationInputSchema: z.ZodType<Prisma.service1OrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => service1CountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => service1AvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => service1MaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => service1MinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => service1SumOrderByAggregateInputSchema).optional()
}).strict();

export const service1ScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.service1ScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => service1ScalarWhereWithAggregatesInputSchema),z.lazy(() => service1ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => service1ScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => service1ScalarWhereWithAggregatesInputSchema),z.lazy(() => service1ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const service2WhereInputSchema: z.ZodType<Prisma.service2WhereInput> = z.object({
  AND: z.union([ z.lazy(() => service2WhereInputSchema),z.lazy(() => service2WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => service2WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => service2WhereInputSchema),z.lazy(() => service2WhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => service1WhereInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict();

export const service2OrderByWithRelationInputSchema: z.ZodType<Prisma.service2OrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  service1: z.lazy(() => service1OrderByWithRelationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1OrderByRelationAggregateInputSchema).optional(),
  servicing2: z.lazy(() => servicing2OrderByRelationAggregateInputSchema).optional()
}).strict();

export const service2WhereUniqueInputSchema: z.ZodType<Prisma.service2WhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => service2WhereInputSchema),z.lazy(() => service2WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => service2WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => service2WhereInputSchema),z.lazy(() => service2WhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => service1WhereInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict());

export const service2OrderByWithAggregationInputSchema: z.ZodType<Prisma.service2OrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => service2CountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => service2AvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => service2MaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => service2MinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => service2SumOrderByAggregateInputSchema).optional()
}).strict();

export const service2ScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.service2ScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => service2ScalarWhereWithAggregatesInputSchema),z.lazy(() => service2ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => service2ScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => service2ScalarWhereWithAggregatesInputSchema),z.lazy(() => service2ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const servicing1WhereInputSchema: z.ZodType<Prisma.servicing1WhereInput> = z.object({
  AND: z.union([ z.lazy(() => servicing1WhereInputSchema),z.lazy(() => servicing1WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => servicing1WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => servicing1WhereInputSchema),z.lazy(() => servicing1WhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  applyText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accReceivable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accReceived: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accPending: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  payStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payMethod: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payCurrency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  receiptNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  booksNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  advisePeople: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => familyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => service1WhereInputSchema) ]).optional(),
  service2: z.union([ z.lazy(() => Service2NullableScalarRelationFilterSchema),z.lazy(() => service2WhereInputSchema) ]).optional().nullable(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict();

export const servicing1OrderByWithRelationInputSchema: z.ZodType<Prisma.servicing1OrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payMethod: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  booksNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  advisePeople: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ps: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  family: z.lazy(() => familyOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  service1: z.lazy(() => service1OrderByWithRelationInputSchema).optional(),
  service2: z.lazy(() => service2OrderByWithRelationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2OrderByRelationAggregateInputSchema).optional()
}).strict();

export const servicing1WhereUniqueInputSchema: z.ZodType<Prisma.servicing1WhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    organizationId_ordernum_year: z.lazy(() => servicing1OrganizationIdOrdernumYearCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    organizationId_ordernum_year: z.lazy(() => servicing1OrganizationIdOrdernumYearCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  organizationId_ordernum_year: z.lazy(() => servicing1OrganizationIdOrdernumYearCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => servicing1WhereInputSchema),z.lazy(() => servicing1WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => servicing1WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => servicing1WhereInputSchema),z.lazy(() => servicing1WhereInputSchema).array() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  applyText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accReceivable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accReceived: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accPending: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  payStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payMethod: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payCurrency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  receiptNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  booksNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  advisePeople: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => familyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => service1WhereInputSchema) ]).optional(),
  service2: z.union([ z.lazy(() => Service2NullableScalarRelationFilterSchema),z.lazy(() => service2WhereInputSchema) ]).optional().nullable(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict());

export const servicing1OrderByWithAggregationInputSchema: z.ZodType<Prisma.servicing1OrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payMethod: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  booksNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  advisePeople: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ps: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => servicing1CountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => servicing1AvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => servicing1MaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => servicing1MinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => servicing1SumOrderByAggregateInputSchema).optional()
}).strict();

export const servicing1ScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.servicing1ScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => servicing1ScalarWhereWithAggregatesInputSchema),z.lazy(() => servicing1ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => servicing1ScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => servicing1ScalarWhereWithAggregatesInputSchema),z.lazy(() => servicing1ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  applyDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  applyText: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  service1Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  accReceivable: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accReceived: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accPending: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  payStatus: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  payMethod: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  payCurrency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  receiptNum: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  booksNum: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  payee: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  advisePeople: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const servicing2WhereInputSchema: z.ZodType<Prisma.servicing2WhereInput> = z.object({
  AND: z.union([ z.lazy(() => servicing2WhereInputSchema),z.lazy(() => servicing2WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => servicing2WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => servicing2WhereInputSchema),z.lazy(() => servicing2WhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  servicing1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  praytypeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  livename: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people1: z.lazy(() => JsonNullableFilterSchema).optional(),
  passname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname4: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people0: z.lazy(() => JsonNullableFilterSchema).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  liveYear: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  boxNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rowTotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bornYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornMonth: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornDay: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => familyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => service1WhereInputSchema) ]).optional(),
  service2: z.union([ z.lazy(() => Service2NullableScalarRelationFilterSchema),z.lazy(() => service2WhereInputSchema) ]).optional().nullable(),
  servicing1: z.union([ z.lazy(() => Servicing1ScalarRelationFilterSchema),z.lazy(() => servicing1WhereInputSchema) ]).optional(),
}).strict();

export const servicing2OrderByWithRelationInputSchema: z.ZodType<Prisma.servicing2OrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  praytypeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  livename: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  people1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname4: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  people0: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sexualId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sexualText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  liveYear: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boxNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornMonth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornDay: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ps: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  family: z.lazy(() => familyOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  service1: z.lazy(() => service1OrderByWithRelationInputSchema).optional(),
  service2: z.lazy(() => service2OrderByWithRelationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1OrderByWithRelationInputSchema).optional()
}).strict();

export const servicing2WhereUniqueInputSchema: z.ZodType<Prisma.servicing2WhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => servicing2WhereInputSchema),z.lazy(() => servicing2WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => servicing2WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => servicing2WhereInputSchema),z.lazy(() => servicing2WhereInputSchema).array() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  servicing1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  praytypeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  livename: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people1: z.lazy(() => JsonNullableFilterSchema).optional(),
  passname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname4: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people0: z.lazy(() => JsonNullableFilterSchema).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  liveYear: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  boxNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rowTotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bornYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornMonth: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornDay: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => familyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => service1WhereInputSchema) ]).optional(),
  service2: z.union([ z.lazy(() => Service2NullableScalarRelationFilterSchema),z.lazy(() => service2WhereInputSchema) ]).optional().nullable(),
  servicing1: z.union([ z.lazy(() => Servicing1ScalarRelationFilterSchema),z.lazy(() => servicing1WhereInputSchema) ]).optional(),
}).strict());

export const servicing2OrderByWithAggregationInputSchema: z.ZodType<Prisma.servicing2OrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  praytypeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  livename: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  people1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname4: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  people0: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sexualId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sexualText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  liveYear: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boxNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornMonth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornDay: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ps: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => servicing2CountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => servicing2AvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => servicing2MaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => servicing2MinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => servicing2SumOrderByAggregateInputSchema).optional()
}).strict();

export const servicing2ScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.servicing2ScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => servicing2ScalarWhereWithAggregatesInputSchema),z.lazy(() => servicing2ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => servicing2ScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => servicing2ScalarWhereWithAggregatesInputSchema),z.lazy(() => servicing2ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  servicing1Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  praytypeId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  printType2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  livename: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  people1: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  passname: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  passname1: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  passname2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  passname3: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  passname4: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  people0: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sexualId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sexualText: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  liveYear: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  boxNum: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rowTotal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bornYear: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  bornMonth: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  bornDay: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  bornTime: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const templeWhereInputSchema: z.ZodType<Prisma.templeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => templeWhereInputSchema),z.lazy(() => templeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => templeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => templeWhereInputSchema),z.lazy(() => templeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const templeOrderByWithRelationInputSchema: z.ZodType<Prisma.templeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const templeWhereUniqueInputSchema: z.ZodType<Prisma.templeWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => templeWhereInputSchema),z.lazy(() => templeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => templeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => templeWhereInputSchema),z.lazy(() => templeWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const templeOrderByWithAggregationInputSchema: z.ZodType<Prisma.templeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => templeCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => templeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => templeMinOrderByAggregateInputSchema).optional()
}).strict();

export const templeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.templeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => templeScalarWhereWithAggregatesInputSchema),z.lazy(() => templeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => templeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => templeScalarWhereWithAggregatesInputSchema),z.lazy(() => templeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TrainedModelWhereInputSchema: z.ZodType<Prisma.TrainedModelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TrainedModelWhereInputSchema),z.lazy(() => TrainedModelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TrainedModelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TrainedModelWhereInputSchema),z.lazy(() => TrainedModelWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelPath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  precision: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  recall: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  f1Score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  trainingDataSummary: z.lazy(() => JsonFilterSchema).optional(),
  experimentRunId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  experimentRun: z.union([ z.lazy(() => ExperimentRunNullableScalarRelationFilterSchema),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TrainedModelOrderByWithRelationInputSchema: z.ZodType<Prisma.TrainedModelOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelName: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  trainingDataSummary: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  experimentRun: z.lazy(() => ExperimentRunOrderByWithRelationInputSchema).optional()
}).strict();

export const TrainedModelWhereUniqueInputSchema: z.ZodType<Prisma.TrainedModelWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    modelName: z.string(),
    experimentRunId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
    modelName: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    experimentRunId: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    modelName: z.string(),
    experimentRunId: z.string(),
  }),
  z.object({
    modelName: z.string(),
  }),
  z.object({
    experimentRunId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  modelName: z.string().optional(),
  experimentRunId: z.string().optional(),
  AND: z.union([ z.lazy(() => TrainedModelWhereInputSchema),z.lazy(() => TrainedModelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TrainedModelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TrainedModelWhereInputSchema),z.lazy(() => TrainedModelWhereInputSchema).array() ]).optional(),
  modelType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelPath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  precision: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  recall: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  f1Score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  trainingDataSummary: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  experimentRun: z.union([ z.lazy(() => ExperimentRunNullableScalarRelationFilterSchema),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TrainedModelOrderByWithAggregationInputSchema: z.ZodType<Prisma.TrainedModelOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelName: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  trainingDataSummary: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TrainedModelCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TrainedModelAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TrainedModelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TrainedModelMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TrainedModelSumOrderByAggregateInputSchema).optional()
}).strict();

export const TrainedModelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TrainedModelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema),z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema),z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  modelName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  modelType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  modelPath: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  precision: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  recall: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  f1Score: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  trainingDataSummary: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  experimentRunId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationCreateInputSchema: z.ZodType<Prisma.VerificationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateInputSchema: z.ZodType<Prisma.VerificationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationCreateManyInputSchema: z.ZodType<Prisma.VerificationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyCreateInputSchema: z.ZodType<Prisma.PasskeyCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutPasskeysInputSchema)
}).strict();

export const PasskeyUncheckedCreateInputSchema: z.ZodType<Prisma.PasskeyUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyUpdateInputSchema: z.ZodType<Prisma.PasskeyUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPasskeysNestedInputSchema).optional()
}).strict();

export const PasskeyUncheckedUpdateInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyCreateManyInputSchema: z.ZodType<Prisma.PasskeyCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyUpdateManyMutationInputSchema: z.ZodType<Prisma.PasskeyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TwoFactorCreateInputSchema: z.ZodType<Prisma.TwoFactorCreateInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  user: z.lazy(() => UserCreateNestedOneWithoutTwofactorsInputSchema)
}).strict();

export const TwoFactorUncheckedCreateInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();

export const TwoFactorUpdateInputSchema: z.ZodType<Prisma.TwoFactorUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTwofactorsNestedInputSchema).optional()
}).strict();

export const TwoFactorUncheckedUpdateInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorCreateManyInputSchema: z.ZodType<Prisma.TwoFactorCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();

export const TwoFactorUpdateManyMutationInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RelationshipManagerCreateInputSchema: z.ZodType<Prisma.RelationshipManagerCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerCreateManyInputSchema: z.ZodType<Prisma.RelationshipManagerCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable()
}).strict();

export const RelationshipManagerUpdateManyMutationInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RelationshipManagerUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CustomerCreateInputSchema: z.ZodType<Prisma.CustomerCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUpdateInputSchema: z.ZodType<Prisma.CustomerUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerCreateManyInputSchema: z.ZodType<Prisma.CustomerCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const CustomerUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomerUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateInputSchema: z.ZodType<Prisma.MemberCreateInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  createdAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateInputSchema: z.ZodType<Prisma.MemberUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberUpdateInputSchema: z.ZodType<Prisma.MemberUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateManyInputSchema: z.ZodType<Prisma.MemberCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberUpdateManyMutationInputSchema: z.ZodType<Prisma.MemberUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateInputSchema: z.ZodType<Prisma.InvitationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationUpdateInputSchema: z.ZodType<Prisma.InvitationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateManyInputSchema: z.ZodType<Prisma.InvitationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationUpdateManyMutationInputSchema: z.ZodType<Prisma.InvitationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseCreateInputSchema: z.ZodType<Prisma.PurchaseCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputSchema).optional()
}).strict();

export const PurchaseUncheckedCreateInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseUpdateInputSchema: z.ZodType<Prisma.PurchaseUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputSchema).optional()
}).strict();

export const PurchaseUncheckedUpdateInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseCreateManyInputSchema: z.ZodType<Prisma.PurchaseCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseUpdateManyMutationInputSchema: z.ZodType<Prisma.PurchaseUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateInputSchema: z.ZodType<Prisma.AiChatCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputSchema).optional()
}).strict();

export const AiChatUncheckedCreateInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatUpdateInputSchema: z.ZodType<Prisma.AiChatUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputSchema).optional()
}).strict();

export const AiChatUncheckedUpdateInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateManyInputSchema: z.ZodType<Prisma.AiChatCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatUpdateManyMutationInputSchema: z.ZodType<Prisma.AiChatUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BankAccountCreateInputSchema: z.ZodType<Prisma.BankAccountCreateInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutBankAccountsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBankAccountsInputSchema),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountUncheckedCreateInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountUpdateInputSchema: z.ZodType<Prisma.BankAccountUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneWithoutBankAccountsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBankAccountsNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountCreateManyInputSchema: z.ZodType<Prisma.BankAccountCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable()
}).strict();

export const BankAccountUpdateManyMutationInputSchema: z.ZodType<Prisma.BankAccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BankAccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseCreateInputSchema: z.ZodType<Prisma.ExpenseCreateInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpensesInputSchema),
  rm: z.lazy(() => RelationshipManagerCreateNestedOneWithoutExpensesInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmId: z.string().optional().nullable()
}).strict();

export const ExpenseUpdateInputSchema: z.ZodType<Prisma.ExpenseUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema).optional(),
  rm: z.lazy(() => RelationshipManagerUpdateOneWithoutExpensesNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseCreateManyInputSchema: z.ZodType<Prisma.ExpenseCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmId: z.string().optional().nullable()
}).strict();

export const ExpenseUpdateManyMutationInputSchema: z.ZodType<Prisma.ExpenseUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProductCreateInputSchema: z.ZodType<Prisma.ProductCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProductsInputSchema),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductUncheckedCreateInputSchema: z.ZodType<Prisma.ProductUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductUpdateInputSchema: z.ZodType<Prisma.ProductUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductCreateManyInputSchema: z.ZodType<Prisma.ProductCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string()
}).strict();

export const ProductUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingCreateInputSchema: z.ZodType<Prisma.ProfitSharingCreateInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountCreateNestedOneWithoutProfitSharingInputSchema).optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutProfitSharingInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProfitSharingInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingUpdateInputSchema: z.ZodType<Prisma.ProfitSharingUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountUpdateOneWithoutProfitSharingNestedInputSchema).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingCreateManyInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingUpdateManyMutationInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AssetTransactionCreateInputSchema: z.ZodType<Prisma.AssetTransactionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutAssetTransactionsInputSchema)
}).strict();

export const AssetTransactionUncheckedCreateInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AssetTransactionUpdateInputSchema: z.ZodType<Prisma.AssetTransactionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutAssetTransactionsNestedInputSchema).optional()
}).strict();

export const AssetTransactionUncheckedUpdateInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionCreateManyInputSchema: z.ZodType<Prisma.AssetTransactionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AssetTransactionUpdateManyMutationInputSchema: z.ZodType<Prisma.AssetTransactionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ammeterCreateInputSchema: z.ZodType<Prisma.ammeterCreateInput> = z.object({
  id: z.string(),
  electricMeterNumber: z.string(),
  electricMeterName: z.string(),
  deviceNumber: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ammeterUncheckedCreateInputSchema: z.ZodType<Prisma.ammeterUncheckedCreateInput> = z.object({
  id: z.string(),
  electricMeterNumber: z.string(),
  electricMeterName: z.string(),
  deviceNumber: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ammeterUpdateInputSchema: z.ZodType<Prisma.ammeterUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ammeterUncheckedUpdateInputSchema: z.ZodType<Prisma.ammeterUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ammeterCreateManyInputSchema: z.ZodType<Prisma.ammeterCreateManyInput> = z.object({
  id: z.string(),
  electricMeterNumber: z.string(),
  electricMeterName: z.string(),
  deviceNumber: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const ammeterUpdateManyMutationInputSchema: z.ZodType<Prisma.ammeterUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ammeterUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ammeterUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ammeter_logCreateInputSchema: z.ZodType<Prisma.ammeter_logCreateInput> = z.object({
  id: z.string(),
  deviceNumber: z.string(),
  action: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  requestData: z.string().optional().nullable(),
  responseData: z.string().optional().nullable(),
  statusCode: z.number().int().optional().nullable(),
  success: z.boolean(),
  errorMessage: z.string().optional().nullable(),
  responseTime: z.number().int().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const ammeter_logUncheckedCreateInputSchema: z.ZodType<Prisma.ammeter_logUncheckedCreateInput> = z.object({
  id: z.string(),
  deviceNumber: z.string(),
  action: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  requestData: z.string().optional().nullable(),
  responseData: z.string().optional().nullable(),
  statusCode: z.number().int().optional().nullable(),
  success: z.boolean(),
  errorMessage: z.string().optional().nullable(),
  responseTime: z.number().int().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const ammeter_logUpdateInputSchema: z.ZodType<Prisma.ammeter_logUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requestData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusCode: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  success: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ammeter_logUncheckedUpdateInputSchema: z.ZodType<Prisma.ammeter_logUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requestData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusCode: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  success: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ammeter_logCreateManyInputSchema: z.ZodType<Prisma.ammeter_logCreateManyInput> = z.object({
  id: z.string(),
  deviceNumber: z.string(),
  action: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  requestData: z.string().optional().nullable(),
  responseData: z.string().optional().nullable(),
  statusCode: z.number().int().optional().nullable(),
  success: z.boolean(),
  errorMessage: z.string().optional().nullable(),
  responseTime: z.number().int().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const ammeter_logUpdateManyMutationInputSchema: z.ZodType<Prisma.ammeter_logUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requestData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusCode: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  success: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ammeter_logUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ammeter_logUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requestData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusCode: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  success: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExperimentRunCreateInputSchema: z.ZodType<Prisma.ExperimentRunCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  anomalyEvents: z.lazy(() => anomaly_eventCreateNestedManyWithoutExperimentRunInputSchema).optional(),
  trainedModel: z.lazy(() => TrainedModelCreateNestedOneWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedCreateInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  anomalyEvents: z.lazy(() => anomaly_eventUncheckedCreateNestedManyWithoutExperimentRunInputSchema).optional(),
  trainedModel: z.lazy(() => TrainedModelUncheckedCreateNestedOneWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunUpdateInputSchema: z.ZodType<Prisma.ExperimentRunUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEvents: z.lazy(() => anomaly_eventUpdateManyWithoutExperimentRunNestedInputSchema).optional(),
  trainedModel: z.lazy(() => TrainedModelUpdateOneWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedUpdateInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEvents: z.lazy(() => anomaly_eventUncheckedUpdateManyWithoutExperimentRunNestedInputSchema).optional(),
  trainedModel: z.lazy(() => TrainedModelUncheckedUpdateOneWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const ExperimentRunCreateManyInputSchema: z.ZodType<Prisma.ExperimentRunCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExperimentRunUpdateManyMutationInputSchema: z.ZodType<Prisma.ExperimentRunUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExperimentRunUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const anomaly_eventCreateInputSchema: z.ZodType<Prisma.anomaly_eventCreateInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  experimentRun: z.lazy(() => ExperimentRunCreateNestedOneWithoutAnomalyEventsInputSchema).optional(),
  event_label_link: z.lazy(() => event_label_linkCreateNestedManyWithoutAnomaly_eventInputSchema).optional()
}).strict();

export const anomaly_eventUncheckedCreateInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedCreateInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  experimentRunId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  event_label_link: z.lazy(() => event_label_linkUncheckedCreateNestedManyWithoutAnomaly_eventInputSchema).optional()
}).strict();

export const anomaly_eventUpdateInputSchema: z.ZodType<Prisma.anomaly_eventUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRun: z.lazy(() => ExperimentRunUpdateOneWithoutAnomalyEventsNestedInputSchema).optional(),
  event_label_link: z.lazy(() => event_label_linkUpdateManyWithoutAnomaly_eventNestedInputSchema).optional()
}).strict();

export const anomaly_eventUncheckedUpdateInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experimentRunId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event_label_link: z.lazy(() => event_label_linkUncheckedUpdateManyWithoutAnomaly_eventNestedInputSchema).optional()
}).strict();

export const anomaly_eventCreateManyInputSchema: z.ZodType<Prisma.anomaly_eventCreateManyInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  experimentRunId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const anomaly_eventUpdateManyMutationInputSchema: z.ZodType<Prisma.anomaly_eventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const anomaly_eventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experimentRunId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const anomaly_labelCreateInputSchema: z.ZodType<Prisma.anomaly_labelCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  event_label_link: z.lazy(() => event_label_linkCreateNestedManyWithoutAnomaly_labelInputSchema).optional()
}).strict();

export const anomaly_labelUncheckedCreateInputSchema: z.ZodType<Prisma.anomaly_labelUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  event_label_link: z.lazy(() => event_label_linkUncheckedCreateNestedManyWithoutAnomaly_labelInputSchema).optional()
}).strict();

export const anomaly_labelUpdateInputSchema: z.ZodType<Prisma.anomaly_labelUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event_label_link: z.lazy(() => event_label_linkUpdateManyWithoutAnomaly_labelNestedInputSchema).optional()
}).strict();

export const anomaly_labelUncheckedUpdateInputSchema: z.ZodType<Prisma.anomaly_labelUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event_label_link: z.lazy(() => event_label_linkUncheckedUpdateManyWithoutAnomaly_labelNestedInputSchema).optional()
}).strict();

export const anomaly_labelCreateManyInputSchema: z.ZodType<Prisma.anomaly_labelCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const anomaly_labelUpdateManyMutationInputSchema: z.ZodType<Prisma.anomaly_labelUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const anomaly_labelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.anomaly_labelUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const borrow_godCreateInputSchema: z.ZodType<Prisma.borrow_godCreateInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  god_name: z.lazy(() => god_nameCreateNestedOneWithoutBorrow_godInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBorrow_godInputSchema)
}).strict();

export const borrow_godUncheckedCreateInputSchema: z.ZodType<Prisma.borrow_godUncheckedCreateInput> = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const borrow_godUpdateInputSchema: z.ZodType<Prisma.borrow_godUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  god_name: z.lazy(() => god_nameUpdateOneRequiredWithoutBorrow_godNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBorrow_godNestedInputSchema).optional()
}).strict();

export const borrow_godUncheckedUpdateInputSchema: z.ZodType<Prisma.borrow_godUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  godNameId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const borrow_godCreateManyInputSchema: z.ZodType<Prisma.borrow_godCreateManyInput> = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const borrow_godUpdateManyMutationInputSchema: z.ZodType<Prisma.borrow_godUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const borrow_godUncheckedUpdateManyInputSchema: z.ZodType<Prisma.borrow_godUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  godNameId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const buddhistCreateInputSchema: z.ZodType<Prisma.buddhistCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBuddhistInputSchema)
}).strict();

export const buddhistUncheckedCreateInputSchema: z.ZodType<Prisma.buddhistUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const buddhistUpdateInputSchema: z.ZodType<Prisma.buddhistUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBuddhistNestedInputSchema).optional()
}).strict();

export const buddhistUncheckedUpdateInputSchema: z.ZodType<Prisma.buddhistUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const buddhistCreateManyInputSchema: z.ZodType<Prisma.buddhistCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const buddhistUpdateManyMutationInputSchema: z.ZodType<Prisma.buddhistUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const buddhistUncheckedUpdateManyInputSchema: z.ZodType<Prisma.buddhistUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const event_label_linkCreateInputSchema: z.ZodType<Prisma.event_label_linkCreateInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date().optional(),
  anomaly_event: z.lazy(() => anomaly_eventCreateNestedOneWithoutEvent_label_linkInputSchema),
  anomaly_label: z.lazy(() => anomaly_labelCreateNestedOneWithoutEvent_label_linkInputSchema)
}).strict();

export const event_label_linkUncheckedCreateInputSchema: z.ZodType<Prisma.event_label_linkUncheckedCreateInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const event_label_linkUpdateInputSchema: z.ZodType<Prisma.event_label_linkUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomaly_event: z.lazy(() => anomaly_eventUpdateOneRequiredWithoutEvent_label_linkNestedInputSchema).optional(),
  anomaly_label: z.lazy(() => anomaly_labelUpdateOneRequiredWithoutEvent_label_linkNestedInputSchema).optional()
}).strict();

export const event_label_linkUncheckedUpdateInputSchema: z.ZodType<Prisma.event_label_linkUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  labelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const event_label_linkCreateManyInputSchema: z.ZodType<Prisma.event_label_linkCreateManyInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const event_label_linkUpdateManyMutationInputSchema: z.ZodType<Prisma.event_label_linkUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const event_label_linkUncheckedUpdateManyInputSchema: z.ZodType<Prisma.event_label_linkUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  labelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const familyCreateInputSchema: z.ZodType<Prisma.familyCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamilyInputSchema),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyUncheckedCreateInputSchema: z.ZodType<Prisma.familyUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyUpdateInputSchema: z.ZodType<Prisma.familyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const familyUncheckedUpdateInputSchema: z.ZodType<Prisma.familyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const familyCreateManyInputSchema: z.ZodType<Prisma.familyCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const familyUpdateManyMutationInputSchema: z.ZodType<Prisma.familyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const familyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.familyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const family_memberCreateInputSchema: z.ZodType<Prisma.family_memberCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutFamily_memberInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamily_memberInputSchema)
}).strict();

export const family_memberUncheckedCreateInputSchema: z.ZodType<Prisma.family_memberUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  familyId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const family_memberUpdateInputSchema: z.ZodType<Prisma.family_memberUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutFamily_memberNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamily_memberNestedInputSchema).optional()
}).strict();

export const family_memberUncheckedUpdateInputSchema: z.ZodType<Prisma.family_memberUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const family_memberCreateManyInputSchema: z.ZodType<Prisma.family_memberCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  familyId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const family_memberUpdateManyMutationInputSchema: z.ZodType<Prisma.family_memberUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const family_memberUncheckedUpdateManyInputSchema: z.ZodType<Prisma.family_memberUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const god_nameCreateInputSchema: z.ZodType<Prisma.god_nameCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutGod_nameInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutGod_nameInputSchema)
}).strict();

export const god_nameUncheckedCreateInputSchema: z.ZodType<Prisma.god_nameUncheckedCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutGod_nameInputSchema).optional()
}).strict();

export const god_nameUpdateInputSchema: z.ZodType<Prisma.god_nameUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutGod_nameNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutGod_nameNestedInputSchema).optional()
}).strict();

export const god_nameUncheckedUpdateInputSchema: z.ZodType<Prisma.god_nameUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutGod_nameNestedInputSchema).optional()
}).strict();

export const god_nameCreateManyInputSchema: z.ZodType<Prisma.god_nameCreateManyInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const god_nameUpdateManyMutationInputSchema: z.ZodType<Prisma.god_nameUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const god_nameUncheckedUpdateManyInputSchema: z.ZodType<Prisma.god_nameUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const member_classCreateInputSchema: z.ZodType<Prisma.member_classCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMember_classInputSchema)
}).strict();

export const member_classUncheckedCreateInputSchema: z.ZodType<Prisma.member_classUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const member_classUpdateInputSchema: z.ZodType<Prisma.member_classUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMember_classNestedInputSchema).optional()
}).strict();

export const member_classUncheckedUpdateInputSchema: z.ZodType<Prisma.member_classUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const member_classCreateManyInputSchema: z.ZodType<Prisma.member_classCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const member_classUpdateManyMutationInputSchema: z.ZodType<Prisma.member_classUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const member_classUncheckedUpdateManyInputSchema: z.ZodType<Prisma.member_classUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mgyearCreateInputSchema: z.ZodType<Prisma.mgyearCreateInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMgyearInputSchema)
}).strict();

export const mgyearUncheckedCreateInputSchema: z.ZodType<Prisma.mgyearUncheckedCreateInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const mgyearUpdateInputSchema: z.ZodType<Prisma.mgyearUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMgyearNestedInputSchema).optional()
}).strict();

export const mgyearUncheckedUpdateInputSchema: z.ZodType<Prisma.mgyearUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mgyearCreateManyInputSchema: z.ZodType<Prisma.mgyearCreateManyInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const mgyearUpdateManyMutationInputSchema: z.ZodType<Prisma.mgyearUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mgyearUncheckedUpdateManyInputSchema: z.ZodType<Prisma.mgyearUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const service1CreateInputSchema: z.ZodType<Prisma.service1CreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService1InputSchema),
  service2: z.lazy(() => service2CreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1UncheckedCreateInputSchema: z.ZodType<Prisma.service1UncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1UpdateInputSchema: z.ZodType<Prisma.service1UpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService1NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const service1UncheckedUpdateInputSchema: z.ZodType<Prisma.service1UncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const service1CreateManyInputSchema: z.ZodType<Prisma.service1CreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const service1UpdateManyMutationInputSchema: z.ZodType<Prisma.service1UpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const service1UncheckedUpdateManyInputSchema: z.ZodType<Prisma.service1UncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const service2CreateInputSchema: z.ZodType<Prisma.service2CreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService2InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutService2InputSchema),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2UncheckedCreateInputSchema: z.ZodType<Prisma.service2UncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2UpdateInputSchema: z.ZodType<Prisma.service2UpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const service2UncheckedUpdateInputSchema: z.ZodType<Prisma.service2UncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const service2CreateManyInputSchema: z.ZodType<Prisma.service2CreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const service2UpdateManyMutationInputSchema: z.ZodType<Prisma.service2UpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const service2UncheckedUpdateManyInputSchema: z.ZodType<Prisma.service2UncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing1CreateInputSchema: z.ZodType<Prisma.servicing1CreateInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing1InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1UncheckedCreateInputSchema: z.ZodType<Prisma.servicing1UncheckedCreateInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1UpdateInputSchema: z.ZodType<Prisma.servicing1UpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1CreateManyInputSchema: z.ZodType<Prisma.servicing1CreateManyInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing1UpdateManyMutationInputSchema: z.ZodType<Prisma.servicing1UpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing1UncheckedUpdateManyInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2CreateInputSchema: z.ZodType<Prisma.servicing2CreateInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing2InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing2InputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const servicing2UncheckedCreateInputSchema: z.ZodType<Prisma.servicing2UncheckedCreateInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2UpdateInputSchema: z.ZodType<Prisma.servicing2UpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const servicing2UncheckedUpdateInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2CreateManyInputSchema: z.ZodType<Prisma.servicing2CreateManyInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2UpdateManyMutationInputSchema: z.ZodType<Prisma.servicing2UpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const templeCreateInputSchema: z.ZodType<Prisma.templeCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTempleInputSchema)
}).strict();

export const templeUncheckedCreateInputSchema: z.ZodType<Prisma.templeUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const templeUpdateInputSchema: z.ZodType<Prisma.templeUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTempleNestedInputSchema).optional()
}).strict();

export const templeUncheckedUpdateInputSchema: z.ZodType<Prisma.templeUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const templeCreateManyInputSchema: z.ZodType<Prisma.templeCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const templeUpdateManyMutationInputSchema: z.ZodType<Prisma.templeUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const templeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.templeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TrainedModelCreateInputSchema: z.ZodType<Prisma.TrainedModelCreateInput> = z.object({
  id: z.string().cuid().optional(),
  modelName: z.string(),
  modelType: z.string(),
  modelPath: z.string(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  experimentRun: z.lazy(() => ExperimentRunCreateNestedOneWithoutTrainedModelInputSchema).optional()
}).strict();

export const TrainedModelUncheckedCreateInputSchema: z.ZodType<Prisma.TrainedModelUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  modelName: z.string(),
  modelType: z.string(),
  modelPath: z.string(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]),
  experimentRunId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TrainedModelUpdateInputSchema: z.ZodType<Prisma.TrainedModelUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRun: z.lazy(() => ExperimentRunUpdateOneWithoutTrainedModelNestedInputSchema).optional()
}).strict();

export const TrainedModelUncheckedUpdateInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  experimentRunId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TrainedModelCreateManyInputSchema: z.ZodType<Prisma.TrainedModelCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  modelName: z.string(),
  modelType: z.string(),
  modelPath: z.string(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]),
  experimentRunId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TrainedModelUpdateManyMutationInputSchema: z.ZodType<Prisma.TrainedModelUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TrainedModelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  experimentRunId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const AiChatListRelationFilterSchema: z.ZodType<Prisma.AiChatListRelationFilter> = z.object({
  every: z.lazy(() => AiChatWhereInputSchema).optional(),
  some: z.lazy(() => AiChatWhereInputSchema).optional(),
  none: z.lazy(() => AiChatWhereInputSchema).optional()
}).strict();

export const InvitationListRelationFilterSchema: z.ZodType<Prisma.InvitationListRelationFilter> = z.object({
  every: z.lazy(() => InvitationWhereInputSchema).optional(),
  some: z.lazy(() => InvitationWhereInputSchema).optional(),
  none: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const MemberListRelationFilterSchema: z.ZodType<Prisma.MemberListRelationFilter> = z.object({
  every: z.lazy(() => MemberWhereInputSchema).optional(),
  some: z.lazy(() => MemberWhereInputSchema).optional(),
  none: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const PasskeyListRelationFilterSchema: z.ZodType<Prisma.PasskeyListRelationFilter> = z.object({
  every: z.lazy(() => PasskeyWhereInputSchema).optional(),
  some: z.lazy(() => PasskeyWhereInputSchema).optional(),
  none: z.lazy(() => PasskeyWhereInputSchema).optional()
}).strict();

export const PurchaseListRelationFilterSchema: z.ZodType<Prisma.PurchaseListRelationFilter> = z.object({
  every: z.lazy(() => PurchaseWhereInputSchema).optional(),
  some: z.lazy(() => PurchaseWhereInputSchema).optional(),
  none: z.lazy(() => PurchaseWhereInputSchema).optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const TwoFactorListRelationFilterSchema: z.ZodType<Prisma.TwoFactorListRelationFilter> = z.object({
  every: z.lazy(() => TwoFactorWhereInputSchema).optional(),
  some: z.lazy(() => TwoFactorWhereInputSchema).optional(),
  none: z.lazy(() => TwoFactorWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AiChatOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AiChatOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvitationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MemberOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PasskeyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurchaseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PurchaseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TwoFactorOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional(),
  locale: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional(),
  locale: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional(),
  locale: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const PasskeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyAvgOrderByAggregateInput> = z.object({
  counter: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeySumOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeySumOrderByAggregateInput> = z.object({
  counter: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const TwoFactorCountOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorMinOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountListRelationFilterSchema: z.ZodType<Prisma.BankAccountListRelationFilter> = z.object({
  every: z.lazy(() => BankAccountWhereInputSchema).optional(),
  some: z.lazy(() => BankAccountWhereInputSchema).optional(),
  none: z.lazy(() => BankAccountWhereInputSchema).optional()
}).strict();

export const Borrow_godListRelationFilterSchema: z.ZodType<Prisma.Borrow_godListRelationFilter> = z.object({
  every: z.lazy(() => borrow_godWhereInputSchema).optional(),
  some: z.lazy(() => borrow_godWhereInputSchema).optional(),
  none: z.lazy(() => borrow_godWhereInputSchema).optional()
}).strict();

export const BuddhistListRelationFilterSchema: z.ZodType<Prisma.BuddhistListRelationFilter> = z.object({
  every: z.lazy(() => buddhistWhereInputSchema).optional(),
  some: z.lazy(() => buddhistWhereInputSchema).optional(),
  none: z.lazy(() => buddhistWhereInputSchema).optional()
}).strict();

export const CustomerListRelationFilterSchema: z.ZodType<Prisma.CustomerListRelationFilter> = z.object({
  every: z.lazy(() => CustomerWhereInputSchema).optional(),
  some: z.lazy(() => CustomerWhereInputSchema).optional(),
  none: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const ExpenseListRelationFilterSchema: z.ZodType<Prisma.ExpenseListRelationFilter> = z.object({
  every: z.lazy(() => ExpenseWhereInputSchema).optional(),
  some: z.lazy(() => ExpenseWhereInputSchema).optional(),
  none: z.lazy(() => ExpenseWhereInputSchema).optional()
}).strict();

export const FamilyListRelationFilterSchema: z.ZodType<Prisma.FamilyListRelationFilter> = z.object({
  every: z.lazy(() => familyWhereInputSchema).optional(),
  some: z.lazy(() => familyWhereInputSchema).optional(),
  none: z.lazy(() => familyWhereInputSchema).optional()
}).strict();

export const Family_memberListRelationFilterSchema: z.ZodType<Prisma.Family_memberListRelationFilter> = z.object({
  every: z.lazy(() => family_memberWhereInputSchema).optional(),
  some: z.lazy(() => family_memberWhereInputSchema).optional(),
  none: z.lazy(() => family_memberWhereInputSchema).optional()
}).strict();

export const God_nameListRelationFilterSchema: z.ZodType<Prisma.God_nameListRelationFilter> = z.object({
  every: z.lazy(() => god_nameWhereInputSchema).optional(),
  some: z.lazy(() => god_nameWhereInputSchema).optional(),
  none: z.lazy(() => god_nameWhereInputSchema).optional()
}).strict();

export const Member_classListRelationFilterSchema: z.ZodType<Prisma.Member_classListRelationFilter> = z.object({
  every: z.lazy(() => member_classWhereInputSchema).optional(),
  some: z.lazy(() => member_classWhereInputSchema).optional(),
  none: z.lazy(() => member_classWhereInputSchema).optional()
}).strict();

export const MgyearListRelationFilterSchema: z.ZodType<Prisma.MgyearListRelationFilter> = z.object({
  every: z.lazy(() => mgyearWhereInputSchema).optional(),
  some: z.lazy(() => mgyearWhereInputSchema).optional(),
  none: z.lazy(() => mgyearWhereInputSchema).optional()
}).strict();

export const ProductListRelationFilterSchema: z.ZodType<Prisma.ProductListRelationFilter> = z.object({
  every: z.lazy(() => ProductWhereInputSchema).optional(),
  some: z.lazy(() => ProductWhereInputSchema).optional(),
  none: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProfitSharingListRelationFilterSchema: z.ZodType<Prisma.ProfitSharingListRelationFilter> = z.object({
  every: z.lazy(() => ProfitSharingWhereInputSchema).optional(),
  some: z.lazy(() => ProfitSharingWhereInputSchema).optional(),
  none: z.lazy(() => ProfitSharingWhereInputSchema).optional()
}).strict();

export const RelationshipManagerListRelationFilterSchema: z.ZodType<Prisma.RelationshipManagerListRelationFilter> = z.object({
  every: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  some: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  none: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const Service1ListRelationFilterSchema: z.ZodType<Prisma.Service1ListRelationFilter> = z.object({
  every: z.lazy(() => service1WhereInputSchema).optional(),
  some: z.lazy(() => service1WhereInputSchema).optional(),
  none: z.lazy(() => service1WhereInputSchema).optional()
}).strict();

export const Service2ListRelationFilterSchema: z.ZodType<Prisma.Service2ListRelationFilter> = z.object({
  every: z.lazy(() => service2WhereInputSchema).optional(),
  some: z.lazy(() => service2WhereInputSchema).optional(),
  none: z.lazy(() => service2WhereInputSchema).optional()
}).strict();

export const Servicing1ListRelationFilterSchema: z.ZodType<Prisma.Servicing1ListRelationFilter> = z.object({
  every: z.lazy(() => servicing1WhereInputSchema).optional(),
  some: z.lazy(() => servicing1WhereInputSchema).optional(),
  none: z.lazy(() => servicing1WhereInputSchema).optional()
}).strict();

export const Servicing2ListRelationFilterSchema: z.ZodType<Prisma.Servicing2ListRelationFilter> = z.object({
  every: z.lazy(() => servicing2WhereInputSchema).optional(),
  some: z.lazy(() => servicing2WhereInputSchema).optional(),
  none: z.lazy(() => servicing2WhereInputSchema).optional()
}).strict();

export const TempleListRelationFilterSchema: z.ZodType<Prisma.TempleListRelationFilter> = z.object({
  every: z.lazy(() => templeWhereInputSchema).optional(),
  some: z.lazy(() => templeWhereInputSchema).optional(),
  none: z.lazy(() => templeWhereInputSchema).optional()
}).strict();

export const BankAccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BankAccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const borrow_godOrderByRelationAggregateInputSchema: z.ZodType<Prisma.borrow_godOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const buddhistOrderByRelationAggregateInputSchema: z.ZodType<Prisma.buddhistOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CustomerOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ExpenseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const familyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.familyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const family_memberOrderByRelationAggregateInputSchema: z.ZodType<Prisma.family_memberOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const god_nameOrderByRelationAggregateInputSchema: z.ZodType<Prisma.god_nameOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const member_classOrderByRelationAggregateInputSchema: z.ZodType<Prisma.member_classOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mgyearOrderByRelationAggregateInputSchema: z.ZodType<Prisma.mgyearOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProfitSharingOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service1OrderByRelationAggregateInputSchema: z.ZodType<Prisma.service1OrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service2OrderByRelationAggregateInputSchema: z.ZodType<Prisma.service2OrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing1OrderByRelationAggregateInputSchema: z.ZodType<Prisma.servicing1OrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing2OrderByRelationAggregateInputSchema: z.ZodType<Prisma.servicing2OrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const templeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.templeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const RelationshipManagerOrganizationIdEmailCompoundUniqueInputSchema: z.ZodType<Prisma.RelationshipManagerOrganizationIdEmailCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  email: z.string()
}).strict();

export const RelationshipManagerCountOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerAvgOrderByAggregateInput> = z.object({
  customerCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerMinOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerSumOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerSumOrderByAggregateInput> = z.object({
  customerCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalNullableFilterSchema: z.ZodType<Prisma.DecimalNullableFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AssetTransactionListRelationFilterSchema: z.ZodType<Prisma.AssetTransactionListRelationFilter> = z.object({
  every: z.lazy(() => AssetTransactionWhereInputSchema).optional(),
  some: z.lazy(() => AssetTransactionWhereInputSchema).optional(),
  none: z.lazy(() => AssetTransactionWhereInputSchema).optional()
}).strict();

export const RelationshipManagerNullableScalarRelationFilterSchema: z.ZodType<Prisma.RelationshipManagerNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RelationshipManagerWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RelationshipManagerWhereInputSchema).optional().nullable()
}).strict();

export const AssetTransactionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AssetTransactionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerOrganizationIdCodeCompoundUniqueInputSchema: z.ZodType<Prisma.CustomerOrganizationIdCodeCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  code: z.string()
}).strict();

export const CustomerCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerAvgOrderByAggregateInput> = z.object({
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerSumOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerSumOrderByAggregateInput> = z.object({
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
}).strict();

export const MemberOrganizationIdUserIdCompoundUniqueInputSchema: z.ZodType<Prisma.MemberOrganizationIdUserIdCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  userId: z.string()
}).strict();

export const MemberCountOrderByAggregateInputSchema: z.ZodType<Prisma.MemberCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMinOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPurchaseTypeFilterSchema: z.ZodType<Prisma.EnumPurchaseTypeFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeFilterSchema) ]).optional(),
}).strict();

export const OrganizationNullableScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();

export const UserNullableScalarRelationFilterSchema: z.ZodType<Prisma.UserNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const PurchaseCountOrderByAggregateInputSchema: z.ZodType<Prisma.PurchaseCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurchaseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PurchaseMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurchaseMinOrderByAggregateInputSchema: z.ZodType<Prisma.PurchaseMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPurchaseTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPurchaseTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional()
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const AiChatCountOrderByAggregateInputSchema: z.ZodType<Prisma.AiChatCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  messages: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AiChatMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AiChatMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AiChatMinOrderByAggregateInputSchema: z.ZodType<Prisma.AiChatMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const DecimalFilterSchema: z.ZodType<Prisma.DecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const CustomerNullableScalarRelationFilterSchema: z.ZodType<Prisma.CustomerNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => CustomerWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CustomerWhereInputSchema).optional().nullable()
}).strict();

export const BankAccountOrganizationIdAccountNumberCompoundUniqueInputSchema: z.ZodType<Prisma.BankAccountOrganizationIdAccountNumberCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  accountNumber: z.string()
}).strict();

export const BankAccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.lazy(() => SortOrderSchema).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountAvgOrderByAggregateInput> = z.object({
  balance: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.lazy(() => SortOrderSchema).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.lazy(() => SortOrderSchema).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountSumOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountSumOrderByAggregateInput> = z.object({
  balance: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const ExpenseCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  receiptUrls: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseSumOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductOrganizationIdCodeCompoundUniqueInputSchema: z.ZodType<Prisma.ProductOrganizationIdCodeCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  code: z.string()
}).strict();

export const ProductCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountNullableScalarRelationFilterSchema: z.ZodType<Prisma.BankAccountNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => BankAccountWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => BankAccountWhereInputSchema).optional().nullable()
}).strict();

export const CustomerScalarRelationFilterSchema: z.ZodType<Prisma.CustomerScalarRelationFilter> = z.object({
  is: z.lazy(() => CustomerWhereInputSchema).optional(),
  isNot: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const ProductScalarRelationFilterSchema: z.ZodType<Prisma.ProductScalarRelationFilter> = z.object({
  is: z.lazy(() => ProductWhereInputSchema).optional(),
  isNot: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProfitSharingCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Name: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Name: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm1Name: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Name: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Name: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Name: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm1Name: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Name: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Name: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Name: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm1Name: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Name: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionCountOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionMinOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionSumOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ammeterCountOrderByAggregateInputSchema: z.ZodType<Prisma.ammeterCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ammeterAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ammeterAvgOrderByAggregateInput> = z.object({
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ammeterMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ammeterMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ammeterMinOrderByAggregateInputSchema: z.ZodType<Prisma.ammeterMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ammeterSumOrderByAggregateInputSchema: z.ZodType<Prisma.ammeterSumOrderByAggregateInput> = z.object({
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const ammeter_logCountOrderByAggregateInputSchema: z.ZodType<Prisma.ammeter_logCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  requestData: z.lazy(() => SortOrderSchema).optional(),
  responseData: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ammeter_logAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ammeter_logAvgOrderByAggregateInput> = z.object({
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ammeter_logMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ammeter_logMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  requestData: z.lazy(() => SortOrderSchema).optional(),
  responseData: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ammeter_logMinOrderByAggregateInputSchema: z.ZodType<Prisma.ammeter_logMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  requestData: z.lazy(() => SortOrderSchema).optional(),
  responseData: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ammeter_logSumOrderByAggregateInputSchema: z.ZodType<Prisma.ammeter_logSumOrderByAggregateInput> = z.object({
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const EnumExperimentRunStatusFilterSchema: z.ZodType<Prisma.EnumExperimentRunStatusFilter> = z.object({
  equals: z.lazy(() => ExperimentRunStatusSchema).optional(),
  in: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => NestedEnumExperimentRunStatusFilterSchema) ]).optional(),
}).strict();

export const Anomaly_eventListRelationFilterSchema: z.ZodType<Prisma.Anomaly_eventListRelationFilter> = z.object({
  every: z.lazy(() => anomaly_eventWhereInputSchema).optional(),
  some: z.lazy(() => anomaly_eventWhereInputSchema).optional(),
  none: z.lazy(() => anomaly_eventWhereInputSchema).optional()
}).strict();

export const TrainedModelNullableScalarRelationFilterSchema: z.ZodType<Prisma.TrainedModelNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => TrainedModelWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TrainedModelWhereInputSchema).optional().nullable()
}).strict();

export const anomaly_eventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.anomaly_eventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  filteringParameters: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunAvgOrderByAggregateInput> = z.object({
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunSumOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunSumOrderByAggregateInput> = z.object({
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const EnumExperimentRunStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumExperimentRunStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ExperimentRunStatusSchema).optional(),
  in: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => NestedEnumExperimentRunStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumExperimentRunStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumExperimentRunStatusFilterSchema).optional()
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const EnumAnomalyEventStatusFilterSchema: z.ZodType<Prisma.EnumAnomalyEventStatusFilter> = z.object({
  equals: z.lazy(() => AnomalyEventStatusSchema).optional(),
  in: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  notIn: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema) ]).optional(),
}).strict();

export const ExperimentRunNullableScalarRelationFilterSchema: z.ZodType<Prisma.ExperimentRunNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ExperimentRunWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ExperimentRunWhereInputSchema).optional().nullable()
}).strict();

export const Event_label_linkListRelationFilterSchema: z.ZodType<Prisma.Event_label_linkListRelationFilter> = z.object({
  every: z.lazy(() => event_label_linkWhereInputSchema).optional(),
  some: z.lazy(() => event_label_linkWhereInputSchema).optional(),
  none: z.lazy(() => event_label_linkWhereInputSchema).optional()
}).strict();

export const event_label_linkOrderByRelationAggregateInputSchema: z.ZodType<Prisma.event_label_linkOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const anomaly_eventCountOrderByAggregateInputSchema: z.ZodType<Prisma.anomaly_eventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  dataWindow: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewTimestamp: z.lazy(() => SortOrderSchema).optional(),
  justificationNotes: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const anomaly_eventAvgOrderByAggregateInputSchema: z.ZodType<Prisma.anomaly_eventAvgOrderByAggregateInput> = z.object({
  score: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const anomaly_eventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.anomaly_eventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewTimestamp: z.lazy(() => SortOrderSchema).optional(),
  justificationNotes: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const anomaly_eventMinOrderByAggregateInputSchema: z.ZodType<Prisma.anomaly_eventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewTimestamp: z.lazy(() => SortOrderSchema).optional(),
  justificationNotes: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const anomaly_eventSumOrderByAggregateInputSchema: z.ZodType<Prisma.anomaly_eventSumOrderByAggregateInput> = z.object({
  score: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const EnumAnomalyEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumAnomalyEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AnomalyEventStatusSchema).optional(),
  in: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  notIn: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => NestedEnumAnomalyEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema).optional()
}).strict();

export const anomaly_labelCountOrderByAggregateInputSchema: z.ZodType<Prisma.anomaly_labelCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const anomaly_labelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.anomaly_labelMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const anomaly_labelMinOrderByAggregateInputSchema: z.ZodType<Prisma.anomaly_labelMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const God_nameScalarRelationFilterSchema: z.ZodType<Prisma.God_nameScalarRelationFilter> = z.object({
  is: z.lazy(() => god_nameWhereInputSchema).optional(),
  isNot: z.lazy(() => god_nameWhereInputSchema).optional()
}).strict();

export const borrow_godCountOrderByAggregateInputSchema: z.ZodType<Prisma.borrow_godCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const borrow_godMaxOrderByAggregateInputSchema: z.ZodType<Prisma.borrow_godMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const borrow_godMinOrderByAggregateInputSchema: z.ZodType<Prisma.borrow_godMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const buddhistCountOrderByAggregateInputSchema: z.ZodType<Prisma.buddhistCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  templeNowText: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const buddhistMaxOrderByAggregateInputSchema: z.ZodType<Prisma.buddhistMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  templeNowText: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const buddhistMinOrderByAggregateInputSchema: z.ZodType<Prisma.buddhistMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  templeNowText: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Anomaly_eventScalarRelationFilterSchema: z.ZodType<Prisma.Anomaly_eventScalarRelationFilter> = z.object({
  is: z.lazy(() => anomaly_eventWhereInputSchema).optional(),
  isNot: z.lazy(() => anomaly_eventWhereInputSchema).optional()
}).strict();

export const Anomaly_labelScalarRelationFilterSchema: z.ZodType<Prisma.Anomaly_labelScalarRelationFilter> = z.object({
  is: z.lazy(() => anomaly_labelWhereInputSchema).optional(),
  isNot: z.lazy(() => anomaly_labelWhereInputSchema).optional()
}).strict();

export const event_label_linkEventIdLabelIdCompoundUniqueInputSchema: z.ZodType<Prisma.event_label_linkEventIdLabelIdCompoundUniqueInput> = z.object({
  eventId: z.string(),
  labelId: z.string()
}).strict();

export const event_label_linkCountOrderByAggregateInputSchema: z.ZodType<Prisma.event_label_linkCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const event_label_linkMaxOrderByAggregateInputSchema: z.ZodType<Prisma.event_label_linkMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const event_label_linkMinOrderByAggregateInputSchema: z.ZodType<Prisma.event_label_linkMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const familyCountOrderByAggregateInputSchema: z.ZodType<Prisma.familyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  mobile: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const familyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.familyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  mobile: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const familyMinOrderByAggregateInputSchema: z.ZodType<Prisma.familyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  mobile: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FamilyScalarRelationFilterSchema: z.ZodType<Prisma.FamilyScalarRelationFilter> = z.object({
  is: z.lazy(() => familyWhereInputSchema).optional(),
  isNot: z.lazy(() => familyWhereInputSchema).optional()
}).strict();

export const family_memberCountOrderByAggregateInputSchema: z.ZodType<Prisma.family_memberCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  birthday: z.lazy(() => SortOrderSchema).optional(),
  lunarDate: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const family_memberMaxOrderByAggregateInputSchema: z.ZodType<Prisma.family_memberMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  birthday: z.lazy(() => SortOrderSchema).optional(),
  lunarDate: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const family_memberMinOrderByAggregateInputSchema: z.ZodType<Prisma.family_memberMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  birthday: z.lazy(() => SortOrderSchema).optional(),
  lunarDate: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const god_nameCountOrderByAggregateInputSchema: z.ZodType<Prisma.god_nameCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const god_nameAvgOrderByAggregateInputSchema: z.ZodType<Prisma.god_nameAvgOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const god_nameMaxOrderByAggregateInputSchema: z.ZodType<Prisma.god_nameMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const god_nameMinOrderByAggregateInputSchema: z.ZodType<Prisma.god_nameMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const god_nameSumOrderByAggregateInputSchema: z.ZodType<Prisma.god_nameSumOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const member_classCountOrderByAggregateInputSchema: z.ZodType<Prisma.member_classCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const member_classAvgOrderByAggregateInputSchema: z.ZodType<Prisma.member_classAvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const member_classMaxOrderByAggregateInputSchema: z.ZodType<Prisma.member_classMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const member_classMinOrderByAggregateInputSchema: z.ZodType<Prisma.member_classMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const member_classSumOrderByAggregateInputSchema: z.ZodType<Prisma.member_classSumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mgyearOrganizationIdMgyearCompoundUniqueInputSchema: z.ZodType<Prisma.mgyearOrganizationIdMgyearCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  mgyear: z.string()
}).strict();

export const mgyearOrganizationIdYearCompoundUniqueInputSchema: z.ZodType<Prisma.mgyearOrganizationIdYearCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  year: z.string()
}).strict();

export const mgyearCountOrderByAggregateInputSchema: z.ZodType<Prisma.mgyearCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mgyearAvgOrderByAggregateInputSchema: z.ZodType<Prisma.mgyearAvgOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mgyearMaxOrderByAggregateInputSchema: z.ZodType<Prisma.mgyearMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mgyearMinOrderByAggregateInputSchema: z.ZodType<Prisma.mgyearMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const mgyearSumOrderByAggregateInputSchema: z.ZodType<Prisma.mgyearSumOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service1CountOrderByAggregateInputSchema: z.ZodType<Prisma.service1CountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service1AvgOrderByAggregateInputSchema: z.ZodType<Prisma.service1AvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service1MaxOrderByAggregateInputSchema: z.ZodType<Prisma.service1MaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service1MinOrderByAggregateInputSchema: z.ZodType<Prisma.service1MinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service1SumOrderByAggregateInputSchema: z.ZodType<Prisma.service1SumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service1ScalarRelationFilterSchema: z.ZodType<Prisma.Service1ScalarRelationFilter> = z.object({
  is: z.lazy(() => service1WhereInputSchema).optional(),
  isNot: z.lazy(() => service1WhereInputSchema).optional()
}).strict();

export const service2CountOrderByAggregateInputSchema: z.ZodType<Prisma.service2CountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service2AvgOrderByAggregateInputSchema: z.ZodType<Prisma.service2AvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service2MaxOrderByAggregateInputSchema: z.ZodType<Prisma.service2MaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service2MinOrderByAggregateInputSchema: z.ZodType<Prisma.service2MinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const service2SumOrderByAggregateInputSchema: z.ZodType<Prisma.service2SumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service2NullableScalarRelationFilterSchema: z.ZodType<Prisma.Service2NullableScalarRelationFilter> = z.object({
  is: z.lazy(() => service2WhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => service2WhereInputSchema).optional().nullable()
}).strict();

export const servicing1OrganizationIdOrdernumYearCompoundUniqueInputSchema: z.ZodType<Prisma.servicing1OrganizationIdOrdernumYearCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string()
}).strict();

export const servicing1CountOrderByAggregateInputSchema: z.ZodType<Prisma.servicing1CountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.lazy(() => SortOrderSchema).optional(),
  payMethod: z.lazy(() => SortOrderSchema).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.lazy(() => SortOrderSchema).optional(),
  booksNum: z.lazy(() => SortOrderSchema).optional(),
  payee: z.lazy(() => SortOrderSchema).optional(),
  advisePeople: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing1AvgOrderByAggregateInputSchema: z.ZodType<Prisma.servicing1AvgOrderByAggregateInput> = z.object({
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing1MaxOrderByAggregateInputSchema: z.ZodType<Prisma.servicing1MaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.lazy(() => SortOrderSchema).optional(),
  payMethod: z.lazy(() => SortOrderSchema).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.lazy(() => SortOrderSchema).optional(),
  booksNum: z.lazy(() => SortOrderSchema).optional(),
  payee: z.lazy(() => SortOrderSchema).optional(),
  advisePeople: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing1MinOrderByAggregateInputSchema: z.ZodType<Prisma.servicing1MinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.lazy(() => SortOrderSchema).optional(),
  payMethod: z.lazy(() => SortOrderSchema).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.lazy(() => SortOrderSchema).optional(),
  booksNum: z.lazy(() => SortOrderSchema).optional(),
  payee: z.lazy(() => SortOrderSchema).optional(),
  advisePeople: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing1SumOrderByAggregateInputSchema: z.ZodType<Prisma.servicing1SumOrderByAggregateInput> = z.object({
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing1ScalarRelationFilterSchema: z.ZodType<Prisma.Servicing1ScalarRelationFilter> = z.object({
  is: z.lazy(() => servicing1WhereInputSchema).optional(),
  isNot: z.lazy(() => servicing1WhereInputSchema).optional()
}).strict();

export const servicing2CountOrderByAggregateInputSchema: z.ZodType<Prisma.servicing2CountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  praytypeId: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  printType2Id: z.lazy(() => SortOrderSchema).optional(),
  livename: z.lazy(() => SortOrderSchema).optional(),
  people1: z.lazy(() => SortOrderSchema).optional(),
  passname: z.lazy(() => SortOrderSchema).optional(),
  passname1: z.lazy(() => SortOrderSchema).optional(),
  passname2: z.lazy(() => SortOrderSchema).optional(),
  passname3: z.lazy(() => SortOrderSchema).optional(),
  passname4: z.lazy(() => SortOrderSchema).optional(),
  people0: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sexualId: z.lazy(() => SortOrderSchema).optional(),
  sexualText: z.lazy(() => SortOrderSchema).optional(),
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  boxNum: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.lazy(() => SortOrderSchema).optional(),
  bornMonth: z.lazy(() => SortOrderSchema).optional(),
  bornDay: z.lazy(() => SortOrderSchema).optional(),
  bornTime: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing2AvgOrderByAggregateInputSchema: z.ZodType<Prisma.servicing2AvgOrderByAggregateInput> = z.object({
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing2MaxOrderByAggregateInputSchema: z.ZodType<Prisma.servicing2MaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  praytypeId: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  printType2Id: z.lazy(() => SortOrderSchema).optional(),
  livename: z.lazy(() => SortOrderSchema).optional(),
  passname: z.lazy(() => SortOrderSchema).optional(),
  passname1: z.lazy(() => SortOrderSchema).optional(),
  passname2: z.lazy(() => SortOrderSchema).optional(),
  passname3: z.lazy(() => SortOrderSchema).optional(),
  passname4: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sexualId: z.lazy(() => SortOrderSchema).optional(),
  sexualText: z.lazy(() => SortOrderSchema).optional(),
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  boxNum: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.lazy(() => SortOrderSchema).optional(),
  bornMonth: z.lazy(() => SortOrderSchema).optional(),
  bornDay: z.lazy(() => SortOrderSchema).optional(),
  bornTime: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing2MinOrderByAggregateInputSchema: z.ZodType<Prisma.servicing2MinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  praytypeId: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  printType2Id: z.lazy(() => SortOrderSchema).optional(),
  livename: z.lazy(() => SortOrderSchema).optional(),
  passname: z.lazy(() => SortOrderSchema).optional(),
  passname1: z.lazy(() => SortOrderSchema).optional(),
  passname2: z.lazy(() => SortOrderSchema).optional(),
  passname3: z.lazy(() => SortOrderSchema).optional(),
  passname4: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sexualId: z.lazy(() => SortOrderSchema).optional(),
  sexualText: z.lazy(() => SortOrderSchema).optional(),
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  boxNum: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.lazy(() => SortOrderSchema).optional(),
  bornMonth: z.lazy(() => SortOrderSchema).optional(),
  bornDay: z.lazy(() => SortOrderSchema).optional(),
  bornTime: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const servicing2SumOrderByAggregateInputSchema: z.ZodType<Prisma.servicing2SumOrderByAggregateInput> = z.object({
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const templeCountOrderByAggregateInputSchema: z.ZodType<Prisma.templeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const templeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.templeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const templeMinOrderByAggregateInputSchema: z.ZodType<Prisma.templeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelCountOrderByAggregateInputSchema: z.ZodType<Prisma.TrainedModelCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelName: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  trainingDataSummary: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TrainedModelAvgOrderByAggregateInput> = z.object({
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TrainedModelMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelName: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelMinOrderByAggregateInputSchema: z.ZodType<Prisma.TrainedModelMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelName: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelSumOrderByAggregateInputSchema: z.ZodType<Prisma.TrainedModelSumOrderByAggregateInput> = z.object({
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AiChatCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PasskeyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PasskeyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PurchaseCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PasskeyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const AccountUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PasskeyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PasskeyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutPasskeysInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPasskeysInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserUpdateOneRequiredWithoutPasskeysNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPasskeysNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPasskeysInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPasskeysInputSchema),z.lazy(() => UserUpdateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTwofactorsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutTwofactorsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTwofactorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTwofactorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTwofactorsInputSchema),z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BankAccountCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const borrow_godCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema).array(),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => borrow_godCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => borrow_godCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => borrow_godCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const buddhistCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => buddhistCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistCreateWithoutOrganizationInputSchema).array(),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => buddhistCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => buddhistCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => buddhistCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const familyCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.familyCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutOrganizationInputSchema),z.lazy(() => familyCreateWithoutOrganizationInputSchema).array(),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => familyCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => familyCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => familyCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const family_memberCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => family_memberCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => family_memberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => family_memberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => family_memberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const god_nameCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => god_nameCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameCreateWithoutOrganizationInputSchema).array(),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => god_nameCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => god_nameCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => god_nameCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const member_classCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => member_classCreateWithoutOrganizationInputSchema),z.lazy(() => member_classCreateWithoutOrganizationInputSchema).array(),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => member_classCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => member_classCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => member_classCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const mgyearCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => mgyearCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearCreateWithoutOrganizationInputSchema).array(),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mgyearCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => mgyearCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mgyearCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelationshipManagerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const service1CreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.service1CreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutOrganizationInputSchema),z.lazy(() => service1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => service1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => service1CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const service2CreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.service2CreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutOrganizationInputSchema),z.lazy(() => service2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => service2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => service2CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing1CreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1CreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => servicing1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => servicing1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing2CreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2CreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => servicing2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => servicing2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const templeCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.templeCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => templeCreateWithoutOrganizationInputSchema),z.lazy(() => templeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => templeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => templeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => templeCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema).array(),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => borrow_godCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => borrow_godCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => borrow_godCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => buddhistCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistCreateWithoutOrganizationInputSchema).array(),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => buddhistCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => buddhistCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => buddhistCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const familyUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.familyUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutOrganizationInputSchema),z.lazy(() => familyCreateWithoutOrganizationInputSchema).array(),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => familyCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => familyCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => familyCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => family_memberCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => family_memberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => family_memberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => family_memberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => god_nameCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameCreateWithoutOrganizationInputSchema).array(),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => god_nameCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => god_nameCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => god_nameCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => member_classCreateWithoutOrganizationInputSchema),z.lazy(() => member_classCreateWithoutOrganizationInputSchema).array(),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => member_classCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => member_classCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => member_classCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => mgyearCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearCreateWithoutOrganizationInputSchema).array(),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mgyearCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => mgyearCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mgyearCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelationshipManagerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const service1UncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.service1UncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutOrganizationInputSchema),z.lazy(() => service1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => service1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => service1CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const service2UncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.service2UncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutOrganizationInputSchema),z.lazy(() => service2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => service2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => service2CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1UncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => servicing1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => servicing1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2UncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => servicing2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => servicing2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const templeUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.templeUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => templeCreateWithoutOrganizationInputSchema),z.lazy(() => templeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => templeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => templeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => templeCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BankAccountUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const borrow_godUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.borrow_godUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema).array(),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => borrow_godCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => borrow_godCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => borrow_godUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => borrow_godUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => borrow_godCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => borrow_godUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => borrow_godUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => borrow_godUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => borrow_godUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => borrow_godScalarWhereInputSchema),z.lazy(() => borrow_godScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const buddhistUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.buddhistUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => buddhistCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistCreateWithoutOrganizationInputSchema).array(),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => buddhistCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => buddhistCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => buddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => buddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => buddhistCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => buddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => buddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => buddhistUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => buddhistUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => buddhistScalarWhereInputSchema),z.lazy(() => buddhistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const familyUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.familyUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutOrganizationInputSchema),z.lazy(() => familyCreateWithoutOrganizationInputSchema).array(),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => familyCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => familyCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => familyUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => familyUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => familyCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => familyUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => familyUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => familyUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => familyUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => familyScalarWhereInputSchema),z.lazy(() => familyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const family_memberUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.family_memberUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => family_memberCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => family_memberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => family_memberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => family_memberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => family_memberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => family_memberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => family_memberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => family_memberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => family_memberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => family_memberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => family_memberScalarWhereInputSchema),z.lazy(() => family_memberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const god_nameUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.god_nameUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => god_nameCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameCreateWithoutOrganizationInputSchema).array(),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => god_nameCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => god_nameCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => god_nameUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => god_nameUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => god_nameCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => god_nameUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => god_nameUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => god_nameUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => god_nameUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => god_nameScalarWhereInputSchema),z.lazy(() => god_nameScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const member_classUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.member_classUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => member_classCreateWithoutOrganizationInputSchema),z.lazy(() => member_classCreateWithoutOrganizationInputSchema).array(),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => member_classCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => member_classCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => member_classUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => member_classUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => member_classCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => member_classUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => member_classUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => member_classUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => member_classUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => member_classScalarWhereInputSchema),z.lazy(() => member_classScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const mgyearUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.mgyearUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => mgyearCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearCreateWithoutOrganizationInputSchema).array(),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mgyearCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => mgyearCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => mgyearUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => mgyearUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mgyearCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => mgyearUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => mgyearUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => mgyearUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => mgyearUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => mgyearScalarWhereInputSchema),z.lazy(() => mgyearScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProductUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelationshipManagerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RelationshipManagerScalarWhereInputSchema),z.lazy(() => RelationshipManagerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const service1UpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.service1UpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutOrganizationInputSchema),z.lazy(() => service1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => service1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => service1UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => service1UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => service1CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => service1UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => service1UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => service1UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => service1UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => service1ScalarWhereInputSchema),z.lazy(() => service1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const service2UpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.service2UpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutOrganizationInputSchema),z.lazy(() => service2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => service2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => service2UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => service2UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => service2CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => service2UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => service2UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => service2UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => service2UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => service2ScalarWhereInputSchema),z.lazy(() => service2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing1UpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.servicing1UpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => servicing1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => servicing1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing1UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => servicing1UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing2UpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.servicing2UpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => servicing2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => servicing2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const templeUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.templeUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => templeCreateWithoutOrganizationInputSchema),z.lazy(() => templeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => templeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => templeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => templeUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => templeUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => templeCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => templeUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => templeUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => templeUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => templeUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => templeScalarWhereInputSchema),z.lazy(() => templeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.borrow_godUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema).array(),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => borrow_godCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => borrow_godCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => borrow_godUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => borrow_godUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => borrow_godCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => borrow_godUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => borrow_godUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => borrow_godUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => borrow_godUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => borrow_godScalarWhereInputSchema),z.lazy(() => borrow_godScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.buddhistUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => buddhistCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistCreateWithoutOrganizationInputSchema).array(),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => buddhistCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => buddhistCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => buddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => buddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => buddhistCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => buddhistWhereUniqueInputSchema),z.lazy(() => buddhistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => buddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => buddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => buddhistUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => buddhistUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => buddhistScalarWhereInputSchema),z.lazy(() => buddhistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.familyUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutOrganizationInputSchema),z.lazy(() => familyCreateWithoutOrganizationInputSchema).array(),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => familyCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => familyCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => familyUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => familyUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => familyCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => familyWhereUniqueInputSchema),z.lazy(() => familyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => familyUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => familyUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => familyUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => familyUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => familyScalarWhereInputSchema),z.lazy(() => familyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.family_memberUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => family_memberCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => family_memberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => family_memberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => family_memberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => family_memberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => family_memberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => family_memberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => family_memberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => family_memberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => family_memberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => family_memberScalarWhereInputSchema),z.lazy(() => family_memberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.god_nameUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => god_nameCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameCreateWithoutOrganizationInputSchema).array(),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => god_nameCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => god_nameCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => god_nameUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => god_nameUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => god_nameCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => god_nameWhereUniqueInputSchema),z.lazy(() => god_nameWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => god_nameUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => god_nameUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => god_nameUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => god_nameUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => god_nameScalarWhereInputSchema),z.lazy(() => god_nameScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.member_classUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => member_classCreateWithoutOrganizationInputSchema),z.lazy(() => member_classCreateWithoutOrganizationInputSchema).array(),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => member_classCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => member_classCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => member_classUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => member_classUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => member_classCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => member_classWhereUniqueInputSchema),z.lazy(() => member_classWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => member_classUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => member_classUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => member_classUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => member_classUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => member_classScalarWhereInputSchema),z.lazy(() => member_classScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.mgyearUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => mgyearCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearCreateWithoutOrganizationInputSchema).array(),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => mgyearCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => mgyearCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => mgyearUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => mgyearUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => mgyearCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => mgyearWhereUniqueInputSchema),z.lazy(() => mgyearWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => mgyearUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => mgyearUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => mgyearUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => mgyearUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => mgyearScalarWhereInputSchema),z.lazy(() => mgyearScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelationshipManagerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RelationshipManagerScalarWhereInputSchema),z.lazy(() => RelationshipManagerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.service1UncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutOrganizationInputSchema),z.lazy(() => service1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => service1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => service1UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => service1UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => service1CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => service1WhereUniqueInputSchema),z.lazy(() => service1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => service1UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => service1UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => service1UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => service1UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => service1ScalarWhereInputSchema),z.lazy(() => service1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.service2UncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutOrganizationInputSchema),z.lazy(() => service2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => service2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => service2UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => service2UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => service2CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => service2UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => service2UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => service2UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => service2UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => service2ScalarWhereInputSchema),z.lazy(() => service2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => servicing1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => servicing1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing1UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => servicing1UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => servicing2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => servicing2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.templeUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => templeCreateWithoutOrganizationInputSchema),z.lazy(() => templeCreateWithoutOrganizationInputSchema).array(),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => templeCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => templeCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => templeUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => templeUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => templeCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => templeWhereUniqueInputSchema),z.lazy(() => templeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => templeUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => templeUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => templeUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => templeUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => templeScalarWhereInputSchema),z.lazy(() => templeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutFinder1Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerCreateWithoutFinder1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutFinder2Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerCreateWithoutFinder2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutRm1InputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutRm1Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerCreateWithoutRm1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutRm2InputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutRm2Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerCreateWithoutRm2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreateNestedManyWithoutRmInputSchema: z.ZodType<Prisma.ExpenseCreateNestedManyWithoutRmInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseCreateWithoutRmInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyRmInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutRelationshipManagersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRelationshipManagersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutFinder1Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerCreateWithoutFinder1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutFinder2Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerCreateWithoutFinder2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutRm1Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerCreateWithoutRm1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutRm2Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerCreateWithoutRm2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedCreateNestedManyWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateNestedManyWithoutRmInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseCreateWithoutRmInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyRmInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutFinder1NestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutFinder1NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerCreateWithoutFinder1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder1InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutFinder2NestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutFinder2NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerCreateWithoutFinder2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder2InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutRm1NestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutRm1NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerCreateWithoutRm1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm1InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm1InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutRm1InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutRm1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutRm2NestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutRm2NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerCreateWithoutRm2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm2InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm2InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutRm2InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutRm2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUpdateManyWithoutRmNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithoutRmNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseCreateWithoutRmInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutRmInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutRmInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyRmInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutRmInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutRmInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutRmInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutRmInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRelationshipManagersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutRelationshipManagersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUpdateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRelationshipManagersInputSchema) ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutFinder1NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerCreateWithoutFinder1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder1InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutFinder2NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerCreateWithoutFinder2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder2InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutRm1NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerCreateWithoutRm1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm1InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm1InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutRm1InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutRm1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutRm2NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerCreateWithoutRm2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm2InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm2InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutRm2InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutRm2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutRmNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseCreateWithoutRmInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutRmInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutRmInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyRmInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutRmInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutRmInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutRmInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutRmInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AssetTransactionCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema).array(),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AssetTransactionCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BankAccountCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateWithoutCustomerInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutFinder1CustomersInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutFinder1CustomersInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutFinder2CustomersInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutFinder2CustomersInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutCustomersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCustomersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutRm1CustomersInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutRm1CustomersInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutRm2CustomersInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutRm2CustomersInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const ProfitSharingCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema).array(),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AssetTransactionCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateWithoutCustomerInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableDecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  increment: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const AssetTransactionUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.AssetTransactionUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema).array(),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AssetTransactionCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AssetTransactionScalarWhereInputSchema),z.lazy(() => AssetTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.BankAccountUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateWithoutCustomerInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BankAccountUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => BankAccountUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutFinder1CustomersInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutFinder1CustomersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutFinder2CustomersInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutFinder2CustomersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutCustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCustomersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutCustomersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutCustomersInputSchema),z.lazy(() => OrganizationUpdateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomersInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutRm1CustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutRm1CustomersInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutRm1CustomersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm1CustomersInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutRm2CustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutRm2CustomersInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutRm2CustomersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm2CustomersInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema).array(),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AssetTransactionCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AssetTransactionScalarWhereInputSchema),z.lazy(() => AssetTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateWithoutCustomerInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BankAccountUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => BankAccountUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMembersInputSchema),z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutMembersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutMembersInputSchema),z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutPurchasesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutPurchasesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPurchasesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumPurchaseTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPurchaseTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PurchaseTypeSchema).optional()
}).strict();

export const OrganizationUpdateOneWithoutPurchasesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutPurchasesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutPurchasesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutPurchasesInputSchema),z.lazy(() => OrganizationUpdateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutPurchasesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutPurchasesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPurchasesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPurchasesInputSchema),z.lazy(() => UserUpdateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutAiChatsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutAiChatsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAiChatsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneWithoutAiChatsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutAiChatsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutAiChatsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutAiChatsInputSchema),z.lazy(() => OrganizationUpdateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutAiChatsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutAiChatsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAiChatsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAiChatsInputSchema),z.lazy(() => UserUpdateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputSchema) ]).optional(),
}).strict();

export const CustomerCreateNestedOneWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerCreateNestedOneWithoutBankAccountsInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutBankAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutBankAccountsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutBankAccountsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBankAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBankAccountsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ProfitSharingCreateNestedManyWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingCreateNestedManyWithoutBankAccountInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyBankAccountInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyBankAccountInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  increment: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const CustomerUpdateOneWithoutBankAccountsNestedInputSchema: z.ZodType<Prisma.CustomerUpdateOneWithoutBankAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutBankAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutBankAccountsInputSchema).optional(),
  upsert: z.lazy(() => CustomerUpsertWithoutBankAccountsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateToOneWithWhereWithoutBankAccountsInputSchema),z.lazy(() => CustomerUpdateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutBankAccountsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutBankAccountsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutBankAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBankAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBankAccountsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutBankAccountsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUpdateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBankAccountsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateManyWithoutBankAccountNestedInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithoutBankAccountNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyBankAccountInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyBankAccountInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreatereceiptUrlsInputSchema: z.ZodType<Prisma.ExpenseCreatereceiptUrlsInput> = z.object({
  set: z.string().array()
}).strict();

export const OrganizationCreateNestedOneWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutExpensesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const RelationshipManagerCreateNestedOneWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutExpensesInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseUpdatereceiptUrlsInputSchema: z.ZodType<Prisma.ExpenseUpdatereceiptUrlsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpensesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutExpensesInputSchema),z.lazy(() => OrganizationUpdateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpensesInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutExpensesNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutExpensesInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutExpensesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutExpensesInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ProfitSharingCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateWithoutProductInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateWithoutProductInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutProductsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => OrganizationUpdateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateWithoutProductInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateWithoutProductInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountCreateNestedOneWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountCreateNestedOneWithoutProfitSharingInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BankAccountCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => BankAccountWhereUniqueInputSchema).optional()
}).strict();

export const CustomerCreateNestedOneWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerCreateNestedOneWithoutProfitSharingInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutProfitSharingInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ProductCreateNestedOneWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutProfitSharingInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const BankAccountUpdateOneWithoutProfitSharingNestedInputSchema: z.ZodType<Prisma.BankAccountUpdateOneWithoutProfitSharingNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BankAccountCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  upsert: z.lazy(() => BankAccountUpsertWithoutProfitSharingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => BankAccountWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => BankAccountWhereInputSchema) ]).optional(),
  connect: z.lazy(() => BankAccountWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateToOneWithWhereWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUpdateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutProfitSharingInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema: z.ZodType<Prisma.CustomerUpdateOneRequiredWithoutProfitSharingNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  upsert: z.lazy(() => CustomerUpsertWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateToOneWithWhereWithoutProfitSharingInputSchema),z.lazy(() => CustomerUpdateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutProfitSharingInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutProfitSharingNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUpdateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProfitSharingInputSchema) ]).optional(),
}).strict();

export const ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneRequiredWithoutProfitSharingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutProfitSharingInputSchema),z.lazy(() => ProductUpdateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutProfitSharingInputSchema) ]).optional(),
}).strict();

export const CustomerCreateNestedOneWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerCreateNestedOneWithoutAssetTransactionsInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutAssetTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutAssetTransactionsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
}).strict();

export const CustomerUpdateOneRequiredWithoutAssetTransactionsNestedInputSchema: z.ZodType<Prisma.CustomerUpdateOneRequiredWithoutAssetTransactionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutAssetTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutAssetTransactionsInputSchema).optional(),
  upsert: z.lazy(() => CustomerUpsertWithoutAssetTransactionsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateToOneWithWhereWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUpdateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutAssetTransactionsInputSchema) ]).optional(),
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const anomaly_eventCreateNestedManyWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventCreateNestedManyWithoutExperimentRunInput> = z.object({
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => anomaly_eventCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => anomaly_eventCreateManyExperimentRunInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelCreateNestedOneWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelCreateNestedOneWithoutExperimentRunInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema).optional(),
  connect: z.lazy(() => TrainedModelWhereUniqueInputSchema).optional()
}).strict();

export const anomaly_eventUncheckedCreateNestedManyWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedCreateNestedManyWithoutExperimentRunInput> = z.object({
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => anomaly_eventCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => anomaly_eventCreateManyExperimentRunInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelUncheckedCreateNestedOneWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUncheckedCreateNestedOneWithoutExperimentRunInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema).optional(),
  connect: z.lazy(() => TrainedModelWhereUniqueInputSchema).optional()
}).strict();

export const EnumExperimentRunStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumExperimentRunStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ExperimentRunStatusSchema).optional()
}).strict();

export const anomaly_eventUpdateManyWithoutExperimentRunNestedInputSchema: z.ZodType<Prisma.anomaly_eventUpdateManyWithoutExperimentRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => anomaly_eventCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => anomaly_eventUpsertWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUpsertWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => anomaly_eventCreateManyExperimentRunInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => anomaly_eventUpdateWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUpdateWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => anomaly_eventUpdateManyWithWhereWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUpdateManyWithWhereWithoutExperimentRunInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => anomaly_eventScalarWhereInputSchema),z.lazy(() => anomaly_eventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelUpdateOneWithoutExperimentRunNestedInputSchema: z.ZodType<Prisma.TrainedModelUpdateOneWithoutExperimentRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema).optional(),
  upsert: z.lazy(() => TrainedModelUpsertWithoutExperimentRunInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TrainedModelWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TrainedModelWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TrainedModelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TrainedModelUpdateToOneWithWhereWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUpdateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedUpdateWithoutExperimentRunInputSchema) ]).optional(),
}).strict();

export const anomaly_eventUncheckedUpdateManyWithoutExperimentRunNestedInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedUpdateManyWithoutExperimentRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => anomaly_eventCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => anomaly_eventUpsertWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUpsertWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => anomaly_eventCreateManyExperimentRunInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => anomaly_eventWhereUniqueInputSchema),z.lazy(() => anomaly_eventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => anomaly_eventUpdateWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUpdateWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => anomaly_eventUpdateManyWithWhereWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUpdateManyWithWhereWithoutExperimentRunInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => anomaly_eventScalarWhereInputSchema),z.lazy(() => anomaly_eventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelUncheckedUpdateOneWithoutExperimentRunNestedInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateOneWithoutExperimentRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema).optional(),
  upsert: z.lazy(() => TrainedModelUpsertWithoutExperimentRunInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TrainedModelWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TrainedModelWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TrainedModelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TrainedModelUpdateToOneWithWhereWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUpdateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedUpdateWithoutExperimentRunInputSchema) ]).optional(),
}).strict();

export const ExperimentRunCreateNestedOneWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunCreateNestedOneWithoutAnomalyEventsInput> = z.object({
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExperimentRunCreateOrConnectWithoutAnomalyEventsInputSchema).optional(),
  connect: z.lazy(() => ExperimentRunWhereUniqueInputSchema).optional()
}).strict();

export const event_label_linkCreateNestedManyWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkCreateNestedManyWithoutAnomaly_eventInput> = z.object({
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema).array(),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_eventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => event_label_linkCreateManyAnomaly_eventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const event_label_linkUncheckedCreateNestedManyWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkUncheckedCreateNestedManyWithoutAnomaly_eventInput> = z.object({
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema).array(),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_eventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => event_label_linkCreateManyAnomaly_eventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const EnumAnomalyEventStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumAnomalyEventStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => AnomalyEventStatusSchema).optional()
}).strict();

export const ExperimentRunUpdateOneWithoutAnomalyEventsNestedInputSchema: z.ZodType<Prisma.ExperimentRunUpdateOneWithoutAnomalyEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExperimentRunCreateOrConnectWithoutAnomalyEventsInputSchema).optional(),
  upsert: z.lazy(() => ExperimentRunUpsertWithoutAnomalyEventsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ExperimentRunWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExperimentRunUpdateToOneWithWhereWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUpdateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutAnomalyEventsInputSchema) ]).optional(),
}).strict();

export const event_label_linkUpdateManyWithoutAnomaly_eventNestedInputSchema: z.ZodType<Prisma.event_label_linkUpdateManyWithoutAnomaly_eventNestedInput> = z.object({
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema).array(),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_eventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => event_label_linkUpsertWithWhereUniqueWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUpsertWithWhereUniqueWithoutAnomaly_eventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => event_label_linkCreateManyAnomaly_eventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => event_label_linkUpdateWithWhereUniqueWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUpdateWithWhereUniqueWithoutAnomaly_eventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => event_label_linkUpdateManyWithWhereWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUpdateManyWithWhereWithoutAnomaly_eventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => event_label_linkScalarWhereInputSchema),z.lazy(() => event_label_linkScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const event_label_linkUncheckedUpdateManyWithoutAnomaly_eventNestedInputSchema: z.ZodType<Prisma.event_label_linkUncheckedUpdateManyWithoutAnomaly_eventNestedInput> = z.object({
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema).array(),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_eventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => event_label_linkUpsertWithWhereUniqueWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUpsertWithWhereUniqueWithoutAnomaly_eventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => event_label_linkCreateManyAnomaly_eventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => event_label_linkUpdateWithWhereUniqueWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUpdateWithWhereUniqueWithoutAnomaly_eventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => event_label_linkUpdateManyWithWhereWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUpdateManyWithWhereWithoutAnomaly_eventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => event_label_linkScalarWhereInputSchema),z.lazy(() => event_label_linkScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const event_label_linkCreateNestedManyWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkCreateNestedManyWithoutAnomaly_labelInput> = z.object({
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema).array(),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_labelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => event_label_linkCreateManyAnomaly_labelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const event_label_linkUncheckedCreateNestedManyWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkUncheckedCreateNestedManyWithoutAnomaly_labelInput> = z.object({
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema).array(),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_labelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => event_label_linkCreateManyAnomaly_labelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const event_label_linkUpdateManyWithoutAnomaly_labelNestedInputSchema: z.ZodType<Prisma.event_label_linkUpdateManyWithoutAnomaly_labelNestedInput> = z.object({
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema).array(),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_labelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => event_label_linkUpsertWithWhereUniqueWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUpsertWithWhereUniqueWithoutAnomaly_labelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => event_label_linkCreateManyAnomaly_labelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => event_label_linkUpdateWithWhereUniqueWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUpdateWithWhereUniqueWithoutAnomaly_labelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => event_label_linkUpdateManyWithWhereWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUpdateManyWithWhereWithoutAnomaly_labelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => event_label_linkScalarWhereInputSchema),z.lazy(() => event_label_linkScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const event_label_linkUncheckedUpdateManyWithoutAnomaly_labelNestedInputSchema: z.ZodType<Prisma.event_label_linkUncheckedUpdateManyWithoutAnomaly_labelNestedInput> = z.object({
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema).array(),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkCreateOrConnectWithoutAnomaly_labelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => event_label_linkUpsertWithWhereUniqueWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUpsertWithWhereUniqueWithoutAnomaly_labelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => event_label_linkCreateManyAnomaly_labelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => event_label_linkWhereUniqueInputSchema),z.lazy(() => event_label_linkWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => event_label_linkUpdateWithWhereUniqueWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUpdateWithWhereUniqueWithoutAnomaly_labelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => event_label_linkUpdateManyWithWhereWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUpdateManyWithWhereWithoutAnomaly_labelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => event_label_linkScalarWhereInputSchema),z.lazy(() => event_label_linkScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const god_nameCreateNestedOneWithoutBorrow_godInputSchema: z.ZodType<Prisma.god_nameCreateNestedOneWithoutBorrow_godInput> = z.object({
  create: z.union([ z.lazy(() => god_nameCreateWithoutBorrow_godInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutBorrow_godInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => god_nameCreateOrConnectWithoutBorrow_godInputSchema).optional(),
  connect: z.lazy(() => god_nameWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutBorrow_godInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBorrow_godInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBorrow_godInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const god_nameUpdateOneRequiredWithoutBorrow_godNestedInputSchema: z.ZodType<Prisma.god_nameUpdateOneRequiredWithoutBorrow_godNestedInput> = z.object({
  create: z.union([ z.lazy(() => god_nameCreateWithoutBorrow_godInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutBorrow_godInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => god_nameCreateOrConnectWithoutBorrow_godInputSchema).optional(),
  upsert: z.lazy(() => god_nameUpsertWithoutBorrow_godInputSchema).optional(),
  connect: z.lazy(() => god_nameWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => god_nameUpdateToOneWithWhereWithoutBorrow_godInputSchema),z.lazy(() => god_nameUpdateWithoutBorrow_godInputSchema),z.lazy(() => god_nameUncheckedUpdateWithoutBorrow_godInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutBorrow_godNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutBorrow_godNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBorrow_godInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBorrow_godInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutBorrow_godInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUpdateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBorrow_godInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutBuddhistInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBuddhistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBuddhistInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutBuddhistNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutBuddhistNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBuddhistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBuddhistInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutBuddhistInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutBuddhistInputSchema),z.lazy(() => OrganizationUpdateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBuddhistInputSchema) ]).optional(),
}).strict();

export const anomaly_eventCreateNestedOneWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_eventCreateNestedOneWithoutEvent_label_linkInput> = z.object({
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutEvent_label_linkInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => anomaly_eventCreateOrConnectWithoutEvent_label_linkInputSchema).optional(),
  connect: z.lazy(() => anomaly_eventWhereUniqueInputSchema).optional()
}).strict();

export const anomaly_labelCreateNestedOneWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_labelCreateNestedOneWithoutEvent_label_linkInput> = z.object({
  create: z.union([ z.lazy(() => anomaly_labelCreateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_labelUncheckedCreateWithoutEvent_label_linkInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => anomaly_labelCreateOrConnectWithoutEvent_label_linkInputSchema).optional(),
  connect: z.lazy(() => anomaly_labelWhereUniqueInputSchema).optional()
}).strict();

export const anomaly_eventUpdateOneRequiredWithoutEvent_label_linkNestedInputSchema: z.ZodType<Prisma.anomaly_eventUpdateOneRequiredWithoutEvent_label_linkNestedInput> = z.object({
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutEvent_label_linkInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => anomaly_eventCreateOrConnectWithoutEvent_label_linkInputSchema).optional(),
  upsert: z.lazy(() => anomaly_eventUpsertWithoutEvent_label_linkInputSchema).optional(),
  connect: z.lazy(() => anomaly_eventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => anomaly_eventUpdateToOneWithWhereWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_eventUpdateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_eventUncheckedUpdateWithoutEvent_label_linkInputSchema) ]).optional(),
}).strict();

export const anomaly_labelUpdateOneRequiredWithoutEvent_label_linkNestedInputSchema: z.ZodType<Prisma.anomaly_labelUpdateOneRequiredWithoutEvent_label_linkNestedInput> = z.object({
  create: z.union([ z.lazy(() => anomaly_labelCreateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_labelUncheckedCreateWithoutEvent_label_linkInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => anomaly_labelCreateOrConnectWithoutEvent_label_linkInputSchema).optional(),
  upsert: z.lazy(() => anomaly_labelUpsertWithoutEvent_label_linkInputSchema).optional(),
  connect: z.lazy(() => anomaly_labelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => anomaly_labelUpdateToOneWithWhereWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_labelUpdateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_labelUncheckedUpdateWithoutEvent_label_linkInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamilyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFamilyInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const family_memberCreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberCreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => family_memberCreateWithoutFamilyInputSchema),z.lazy(() => family_memberCreateWithoutFamilyInputSchema).array(),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => family_memberCreateOrConnectWithoutFamilyInputSchema),z.lazy(() => family_memberCreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => family_memberCreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing1CreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1CreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutFamilyInputSchema),z.lazy(() => servicing1CreateWithoutFamilyInputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => servicing1CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing2CreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2CreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutFamilyInputSchema),z.lazy(() => servicing2CreateWithoutFamilyInputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => servicing2CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const family_memberUncheckedCreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberUncheckedCreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => family_memberCreateWithoutFamilyInputSchema),z.lazy(() => family_memberCreateWithoutFamilyInputSchema).array(),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => family_memberCreateOrConnectWithoutFamilyInputSchema),z.lazy(() => family_memberCreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => family_memberCreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1UncheckedCreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutFamilyInputSchema),z.lazy(() => servicing1CreateWithoutFamilyInputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => servicing1CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2UncheckedCreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutFamilyInputSchema),z.lazy(() => servicing2CreateWithoutFamilyInputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => servicing2CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamilyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFamilyInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutFamilyInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutFamilyInputSchema),z.lazy(() => OrganizationUpdateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamilyInputSchema) ]).optional(),
}).strict();

export const family_memberUpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.family_memberUpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => family_memberCreateWithoutFamilyInputSchema),z.lazy(() => family_memberCreateWithoutFamilyInputSchema).array(),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => family_memberCreateOrConnectWithoutFamilyInputSchema),z.lazy(() => family_memberCreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => family_memberUpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => family_memberUpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => family_memberCreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => family_memberUpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => family_memberUpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => family_memberUpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => family_memberUpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => family_memberScalarWhereInputSchema),z.lazy(() => family_memberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing1UpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.servicing1UpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutFamilyInputSchema),z.lazy(() => servicing1CreateWithoutFamilyInputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => servicing1CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing1UpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => servicing1UpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing2UpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.servicing2UpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutFamilyInputSchema),z.lazy(() => servicing2CreateWithoutFamilyInputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => servicing2CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const family_memberUncheckedUpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.family_memberUncheckedUpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => family_memberCreateWithoutFamilyInputSchema),z.lazy(() => family_memberCreateWithoutFamilyInputSchema).array(),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => family_memberCreateOrConnectWithoutFamilyInputSchema),z.lazy(() => family_memberCreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => family_memberUpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => family_memberUpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => family_memberCreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => family_memberWhereUniqueInputSchema),z.lazy(() => family_memberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => family_memberUpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => family_memberUpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => family_memberUpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => family_memberUpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => family_memberScalarWhereInputSchema),z.lazy(() => family_memberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutFamilyInputSchema),z.lazy(() => servicing1CreateWithoutFamilyInputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => servicing1CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing1UpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => servicing1UpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutFamilyInputSchema),z.lazy(() => servicing2CreateWithoutFamilyInputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => servicing2CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const familyCreateNestedOneWithoutFamily_memberInputSchema: z.ZodType<Prisma.familyCreateNestedOneWithoutFamily_memberInput> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutFamily_memberInputSchema),z.lazy(() => familyUncheckedCreateWithoutFamily_memberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => familyCreateOrConnectWithoutFamily_memberInputSchema).optional(),
  connect: z.lazy(() => familyWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutFamily_memberInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamily_memberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFamily_memberInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const familyUpdateOneRequiredWithoutFamily_memberNestedInputSchema: z.ZodType<Prisma.familyUpdateOneRequiredWithoutFamily_memberNestedInput> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutFamily_memberInputSchema),z.lazy(() => familyUncheckedCreateWithoutFamily_memberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => familyCreateOrConnectWithoutFamily_memberInputSchema).optional(),
  upsert: z.lazy(() => familyUpsertWithoutFamily_memberInputSchema).optional(),
  connect: z.lazy(() => familyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => familyUpdateToOneWithWhereWithoutFamily_memberInputSchema),z.lazy(() => familyUpdateWithoutFamily_memberInputSchema),z.lazy(() => familyUncheckedUpdateWithoutFamily_memberInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutFamily_memberNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutFamily_memberNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamily_memberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFamily_memberInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutFamily_memberInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUpdateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamily_memberInputSchema) ]).optional(),
}).strict();

export const borrow_godCreateNestedManyWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godCreateNestedManyWithoutGod_nameInput> = z.object({
  create: z.union([ z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema).array(),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => borrow_godCreateOrConnectWithoutGod_nameInputSchema),z.lazy(() => borrow_godCreateOrConnectWithoutGod_nameInputSchema).array() ]).optional(),
  createMany: z.lazy(() => borrow_godCreateManyGod_nameInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutGod_nameInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGod_nameInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutGod_nameInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const borrow_godUncheckedCreateNestedManyWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godUncheckedCreateNestedManyWithoutGod_nameInput> = z.object({
  create: z.union([ z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema).array(),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => borrow_godCreateOrConnectWithoutGod_nameInputSchema),z.lazy(() => borrow_godCreateOrConnectWithoutGod_nameInputSchema).array() ]).optional(),
  createMany: z.lazy(() => borrow_godCreateManyGod_nameInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const borrow_godUpdateManyWithoutGod_nameNestedInputSchema: z.ZodType<Prisma.borrow_godUpdateManyWithoutGod_nameNestedInput> = z.object({
  create: z.union([ z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema).array(),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => borrow_godCreateOrConnectWithoutGod_nameInputSchema),z.lazy(() => borrow_godCreateOrConnectWithoutGod_nameInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => borrow_godUpsertWithWhereUniqueWithoutGod_nameInputSchema),z.lazy(() => borrow_godUpsertWithWhereUniqueWithoutGod_nameInputSchema).array() ]).optional(),
  createMany: z.lazy(() => borrow_godCreateManyGod_nameInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => borrow_godUpdateWithWhereUniqueWithoutGod_nameInputSchema),z.lazy(() => borrow_godUpdateWithWhereUniqueWithoutGod_nameInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => borrow_godUpdateManyWithWhereWithoutGod_nameInputSchema),z.lazy(() => borrow_godUpdateManyWithWhereWithoutGod_nameInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => borrow_godScalarWhereInputSchema),z.lazy(() => borrow_godScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutGod_nameNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutGod_nameNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGod_nameInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutGod_nameInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutGod_nameInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutGod_nameInputSchema),z.lazy(() => OrganizationUpdateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutGod_nameInputSchema) ]).optional(),
}).strict();

export const borrow_godUncheckedUpdateManyWithoutGod_nameNestedInputSchema: z.ZodType<Prisma.borrow_godUncheckedUpdateManyWithoutGod_nameNestedInput> = z.object({
  create: z.union([ z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema).array(),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => borrow_godCreateOrConnectWithoutGod_nameInputSchema),z.lazy(() => borrow_godCreateOrConnectWithoutGod_nameInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => borrow_godUpsertWithWhereUniqueWithoutGod_nameInputSchema),z.lazy(() => borrow_godUpsertWithWhereUniqueWithoutGod_nameInputSchema).array() ]).optional(),
  createMany: z.lazy(() => borrow_godCreateManyGod_nameInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => borrow_godWhereUniqueInputSchema),z.lazy(() => borrow_godWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => borrow_godUpdateWithWhereUniqueWithoutGod_nameInputSchema),z.lazy(() => borrow_godUpdateWithWhereUniqueWithoutGod_nameInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => borrow_godUpdateManyWithWhereWithoutGod_nameInputSchema),z.lazy(() => borrow_godUpdateManyWithWhereWithoutGod_nameInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => borrow_godScalarWhereInputSchema),z.lazy(() => borrow_godScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMember_classInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMember_classInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMember_classInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutMember_classNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMember_classNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMember_classInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMember_classInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMember_classInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMember_classInputSchema),z.lazy(() => OrganizationUpdateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMember_classInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMgyearInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMgyearInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMgyearInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutMgyearNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMgyearNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMgyearInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMgyearInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMgyearInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMgyearInputSchema),z.lazy(() => OrganizationUpdateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMgyearInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutService1InputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutService1InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const service2CreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.service2CreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutService1InputSchema),z.lazy(() => service2CreateWithoutService1InputSchema).array(),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service2CreateOrConnectWithoutService1InputSchema),z.lazy(() => service2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => service2CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing1CreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.servicing1CreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutService1InputSchema),z.lazy(() => servicing1CreateWithoutService1InputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutService1InputSchema),z.lazy(() => servicing1CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing2CreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.servicing2CreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutService1InputSchema),z.lazy(() => servicing2CreateWithoutService1InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutService1InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const service2UncheckedCreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.service2UncheckedCreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutService1InputSchema),z.lazy(() => service2CreateWithoutService1InputSchema).array(),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service2CreateOrConnectWithoutService1InputSchema),z.lazy(() => service2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => service2CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing1UncheckedCreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.servicing1UncheckedCreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutService1InputSchema),z.lazy(() => servicing1CreateWithoutService1InputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutService1InputSchema),z.lazy(() => servicing1CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedCreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.servicing2UncheckedCreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutService1InputSchema),z.lazy(() => servicing2CreateWithoutService1InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutService1InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutService1NestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutService1InputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutService1InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutService1InputSchema),z.lazy(() => OrganizationUpdateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService1InputSchema) ]).optional(),
}).strict();

export const service2UpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.service2UpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutService1InputSchema),z.lazy(() => service2CreateWithoutService1InputSchema).array(),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service2CreateOrConnectWithoutService1InputSchema),z.lazy(() => service2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => service2UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => service2UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => service2CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => service2UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => service2UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => service2UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => service2UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => service2ScalarWhereInputSchema),z.lazy(() => service2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing1UpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.servicing1UpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutService1InputSchema),z.lazy(() => servicing1CreateWithoutService1InputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutService1InputSchema),z.lazy(() => servicing1CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing1UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => servicing1UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing1UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => servicing1UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing1UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => servicing1UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing2UpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.servicing2UpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutService1InputSchema),z.lazy(() => servicing2CreateWithoutService1InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutService1InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const service2UncheckedUpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.service2UncheckedUpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutService1InputSchema),z.lazy(() => service2CreateWithoutService1InputSchema).array(),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => service2CreateOrConnectWithoutService1InputSchema),z.lazy(() => service2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => service2UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => service2UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => service2CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => service2WhereUniqueInputSchema),z.lazy(() => service2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => service2UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => service2UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => service2UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => service2UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => service2ScalarWhereInputSchema),z.lazy(() => service2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing1UncheckedUpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutService1InputSchema),z.lazy(() => servicing1CreateWithoutService1InputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutService1InputSchema),z.lazy(() => servicing1CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing1UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => servicing1UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing1UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => servicing1UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing1UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => servicing1UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutService1InputSchema),z.lazy(() => servicing2CreateWithoutService1InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutService1InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutService2InputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutService2InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const service1CreateNestedOneWithoutService2InputSchema: z.ZodType<Prisma.service1CreateNestedOneWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutService2InputSchema),z.lazy(() => service1UncheckedCreateWithoutService2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service1CreateOrConnectWithoutService2InputSchema).optional(),
  connect: z.lazy(() => service1WhereUniqueInputSchema).optional()
}).strict();

export const servicing1CreateNestedManyWithoutService2InputSchema: z.ZodType<Prisma.servicing1CreateNestedManyWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutService2InputSchema),z.lazy(() => servicing1CreateWithoutService2InputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutService2InputSchema),z.lazy(() => servicing1CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyService2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing2CreateNestedManyWithoutService2InputSchema: z.ZodType<Prisma.servicing2CreateNestedManyWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutService2InputSchema),z.lazy(() => servicing2CreateWithoutService2InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutService2InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyService2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing1UncheckedCreateNestedManyWithoutService2InputSchema: z.ZodType<Prisma.servicing1UncheckedCreateNestedManyWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutService2InputSchema),z.lazy(() => servicing1CreateWithoutService2InputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutService2InputSchema),z.lazy(() => servicing1CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyService2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedCreateNestedManyWithoutService2InputSchema: z.ZodType<Prisma.servicing2UncheckedCreateNestedManyWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutService2InputSchema),z.lazy(() => servicing2CreateWithoutService2InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutService2InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyService2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutService2NestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutService2InputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutService2InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutService2InputSchema),z.lazy(() => OrganizationUpdateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService2InputSchema) ]).optional(),
}).strict();

export const service1UpdateOneRequiredWithoutService2NestedInputSchema: z.ZodType<Prisma.service1UpdateOneRequiredWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutService2InputSchema),z.lazy(() => service1UncheckedCreateWithoutService2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service1CreateOrConnectWithoutService2InputSchema).optional(),
  upsert: z.lazy(() => service1UpsertWithoutService2InputSchema).optional(),
  connect: z.lazy(() => service1WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => service1UpdateToOneWithWhereWithoutService2InputSchema),z.lazy(() => service1UpdateWithoutService2InputSchema),z.lazy(() => service1UncheckedUpdateWithoutService2InputSchema) ]).optional(),
}).strict();

export const servicing1UpdateManyWithoutService2NestedInputSchema: z.ZodType<Prisma.servicing1UpdateManyWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutService2InputSchema),z.lazy(() => servicing1CreateWithoutService2InputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutService2InputSchema),z.lazy(() => servicing1CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing1UpsertWithWhereUniqueWithoutService2InputSchema),z.lazy(() => servicing1UpsertWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyService2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing1UpdateWithWhereUniqueWithoutService2InputSchema),z.lazy(() => servicing1UpdateWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing1UpdateManyWithWhereWithoutService2InputSchema),z.lazy(() => servicing1UpdateManyWithWhereWithoutService2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing2UpdateManyWithoutService2NestedInputSchema: z.ZodType<Prisma.servicing2UpdateManyWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutService2InputSchema),z.lazy(() => servicing2CreateWithoutService2InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutService2InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutService2InputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyService2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutService2InputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutService2InputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutService2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing1UncheckedUpdateManyWithoutService2NestedInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateManyWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutService2InputSchema),z.lazy(() => servicing1CreateWithoutService2InputSchema).array(),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing1CreateOrConnectWithoutService2InputSchema),z.lazy(() => servicing1CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing1UpsertWithWhereUniqueWithoutService2InputSchema),z.lazy(() => servicing1UpsertWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing1CreateManyService2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing1WhereUniqueInputSchema),z.lazy(() => servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing1UpdateWithWhereUniqueWithoutService2InputSchema),z.lazy(() => servicing1UpdateWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing1UpdateManyWithWhereWithoutService2InputSchema),z.lazy(() => servicing1UpdateManyWithWhereWithoutService2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutService2NestedInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutService2InputSchema),z.lazy(() => servicing2CreateWithoutService2InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutService2InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutService2InputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyService2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutService2InputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutService2InputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutService2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const familyCreateNestedOneWithoutServicing1InputSchema: z.ZodType<Prisma.familyCreateNestedOneWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutServicing1InputSchema),z.lazy(() => familyUncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => familyCreateOrConnectWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => familyWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const service1CreateNestedOneWithoutServicing1InputSchema: z.ZodType<Prisma.service1CreateNestedOneWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutServicing1InputSchema),z.lazy(() => service1UncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service1CreateOrConnectWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => service1WhereUniqueInputSchema).optional()
}).strict();

export const service2CreateNestedOneWithoutServicing1InputSchema: z.ZodType<Prisma.service2CreateNestedOneWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutServicing1InputSchema),z.lazy(() => service2UncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service2CreateOrConnectWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => service2WhereUniqueInputSchema).optional()
}).strict();

export const servicing2CreateNestedManyWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2CreateNestedManyWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutServicing1InputSchema),z.lazy(() => servicing2CreateWithoutServicing1InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutServicing1InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutServicing1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyServicing1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2UncheckedCreateNestedManyWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutServicing1InputSchema),z.lazy(() => servicing2CreateWithoutServicing1InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutServicing1InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutServicing1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyServicing1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const familyUpdateOneRequiredWithoutServicing1NestedInputSchema: z.ZodType<Prisma.familyUpdateOneRequiredWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutServicing1InputSchema),z.lazy(() => familyUncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => familyCreateOrConnectWithoutServicing1InputSchema).optional(),
  upsert: z.lazy(() => familyUpsertWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => familyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => familyUpdateToOneWithWhereWithoutServicing1InputSchema),z.lazy(() => familyUpdateWithoutServicing1InputSchema),z.lazy(() => familyUncheckedUpdateWithoutServicing1InputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutServicing1InputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutServicing1InputSchema),z.lazy(() => OrganizationUpdateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing1InputSchema) ]).optional(),
}).strict();

export const service1UpdateOneRequiredWithoutServicing1NestedInputSchema: z.ZodType<Prisma.service1UpdateOneRequiredWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutServicing1InputSchema),z.lazy(() => service1UncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service1CreateOrConnectWithoutServicing1InputSchema).optional(),
  upsert: z.lazy(() => service1UpsertWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => service1WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => service1UpdateToOneWithWhereWithoutServicing1InputSchema),z.lazy(() => service1UpdateWithoutServicing1InputSchema),z.lazy(() => service1UncheckedUpdateWithoutServicing1InputSchema) ]).optional(),
}).strict();

export const service2UpdateOneWithoutServicing1NestedInputSchema: z.ZodType<Prisma.service2UpdateOneWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutServicing1InputSchema),z.lazy(() => service2UncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service2CreateOrConnectWithoutServicing1InputSchema).optional(),
  upsert: z.lazy(() => service2UpsertWithoutServicing1InputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => service2WhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => service2WhereInputSchema) ]).optional(),
  connect: z.lazy(() => service2WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => service2UpdateToOneWithWhereWithoutServicing1InputSchema),z.lazy(() => service2UpdateWithoutServicing1InputSchema),z.lazy(() => service2UncheckedUpdateWithoutServicing1InputSchema) ]).optional(),
}).strict();

export const servicing2UpdateManyWithoutServicing1NestedInputSchema: z.ZodType<Prisma.servicing2UpdateManyWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutServicing1InputSchema),z.lazy(() => servicing2CreateWithoutServicing1InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutServicing1InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutServicing1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyServicing1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutServicing1InputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutServicing1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing2CreateWithoutServicing1InputSchema),z.lazy(() => servicing2CreateWithoutServicing1InputSchema).array(),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => servicing2CreateOrConnectWithoutServicing1InputSchema),z.lazy(() => servicing2CreateOrConnectWithoutServicing1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema),z.lazy(() => servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => servicing2CreateManyServicing1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => servicing2WhereUniqueInputSchema),z.lazy(() => servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema),z.lazy(() => servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => servicing2UpdateManyWithWhereWithoutServicing1InputSchema),z.lazy(() => servicing2UpdateManyWithWhereWithoutServicing1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const familyCreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.familyCreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutServicing2InputSchema),z.lazy(() => familyUncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => familyCreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => familyWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const service1CreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.service1CreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutServicing2InputSchema),z.lazy(() => service1UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service1CreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => service1WhereUniqueInputSchema).optional()
}).strict();

export const service2CreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.service2CreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutServicing2InputSchema),z.lazy(() => service2UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service2CreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => service2WhereUniqueInputSchema).optional()
}).strict();

export const servicing1CreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.servicing1CreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutServicing2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => servicing1CreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => servicing1WhereUniqueInputSchema).optional()
}).strict();

export const familyUpdateOneRequiredWithoutServicing2NestedInputSchema: z.ZodType<Prisma.familyUpdateOneRequiredWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => familyCreateWithoutServicing2InputSchema),z.lazy(() => familyUncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => familyCreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => familyUpsertWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => familyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => familyUpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => familyUpdateWithoutServicing2InputSchema),z.lazy(() => familyUncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => OrganizationUpdateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const service1UpdateOneRequiredWithoutServicing2NestedInputSchema: z.ZodType<Prisma.service1UpdateOneRequiredWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => service1CreateWithoutServicing2InputSchema),z.lazy(() => service1UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service1CreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => service1UpsertWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => service1WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => service1UpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => service1UpdateWithoutServicing2InputSchema),z.lazy(() => service1UncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const service2UpdateOneWithoutServicing2NestedInputSchema: z.ZodType<Prisma.service2UpdateOneWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => service2CreateWithoutServicing2InputSchema),z.lazy(() => service2UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => service2CreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => service2UpsertWithoutServicing2InputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => service2WhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => service2WhereInputSchema) ]).optional(),
  connect: z.lazy(() => service2WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => service2UpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => service2UpdateWithoutServicing2InputSchema),z.lazy(() => service2UncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema: z.ZodType<Prisma.servicing1UpdateOneRequiredWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => servicing1CreateWithoutServicing2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => servicing1CreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => servicing1UpsertWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => servicing1WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => servicing1UpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => servicing1UpdateWithoutServicing2InputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutTempleInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTempleInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutTempleInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutTempleNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutTempleNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTempleInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutTempleInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutTempleInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutTempleInputSchema),z.lazy(() => OrganizationUpdateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTempleInputSchema) ]).optional(),
}).strict();

export const ExperimentRunCreateNestedOneWithoutTrainedModelInputSchema: z.ZodType<Prisma.ExperimentRunCreateNestedOneWithoutTrainedModelInput> = z.object({
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutTrainedModelInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutTrainedModelInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExperimentRunCreateOrConnectWithoutTrainedModelInputSchema).optional(),
  connect: z.lazy(() => ExperimentRunWhereUniqueInputSchema).optional()
}).strict();

export const ExperimentRunUpdateOneWithoutTrainedModelNestedInputSchema: z.ZodType<Prisma.ExperimentRunUpdateOneWithoutTrainedModelNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutTrainedModelInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutTrainedModelInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExperimentRunCreateOrConnectWithoutTrainedModelInputSchema).optional(),
  upsert: z.lazy(() => ExperimentRunUpsertWithoutTrainedModelInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ExperimentRunWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExperimentRunUpdateToOneWithWhereWithoutTrainedModelInputSchema),z.lazy(() => ExperimentRunUpdateWithoutTrainedModelInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutTrainedModelInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedDecimalNullableFilterSchema: z.ZodType<Prisma.NestedDecimalNullableFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
}).strict();

export const NestedEnumPurchaseTypeFilterSchema: z.ZodType<Prisma.NestedEnumPurchaseTypeFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPurchaseTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPurchaseTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedDecimalFilterSchema: z.ZodType<Prisma.NestedDecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const NestedDecimalWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedEnumExperimentRunStatusFilterSchema: z.ZodType<Prisma.NestedEnumExperimentRunStatusFilter> = z.object({
  equals: z.lazy(() => ExperimentRunStatusSchema).optional(),
  in: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => NestedEnumExperimentRunStatusFilterSchema) ]).optional(),
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedEnumExperimentRunStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumExperimentRunStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ExperimentRunStatusSchema).optional(),
  in: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => NestedEnumExperimentRunStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumExperimentRunStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumExperimentRunStatusFilterSchema).optional()
}).strict();

export const NestedEnumAnomalyEventStatusFilterSchema: z.ZodType<Prisma.NestedEnumAnomalyEventStatusFilter> = z.object({
  equals: z.lazy(() => AnomalyEventStatusSchema).optional(),
  in: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  notIn: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema) ]).optional(),
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedEnumAnomalyEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumAnomalyEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AnomalyEventStatusSchema).optional(),
  in: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  notIn: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => NestedEnumAnomalyEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema).optional()
}).strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountCreateManyUserInputSchema),z.lazy(() => AccountCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AiChatCreateWithoutUserInputSchema: z.ZodType<Prisma.AiChatCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputSchema).optional()
}).strict();

export const AiChatUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AiChatCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AiChatCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AiChatCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AiChatCreateManyUserInputSchema),z.lazy(() => AiChatCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date()
}).strict();

export const InvitationCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InvitationCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyUserInputSchema),z.lazy(() => InvitationCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MemberCreateWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  createdAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const MemberCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyUserInputSchema),z.lazy(() => MemberCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PasskeyCreateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PasskeyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PasskeyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PasskeyCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PasskeyCreateManyUserInputSchema),z.lazy(() => PasskeyCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PurchaseCreateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputSchema).optional()
}).strict();

export const PurchaseUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PurchaseCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PurchaseCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PurchaseCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PurchaseCreateManyUserInputSchema),z.lazy(() => PurchaseCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TwoFactorCreateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const TwoFactorUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const TwoFactorCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TwoFactorCreateManyUserInputSchema),z.lazy(() => TwoFactorCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateManyMutationInputSchema),z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AiChatUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AiChatUpdateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AiChatUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AiChatUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateManyMutationInputSchema),z.lazy(() => AiChatUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AiChatScalarWhereInputSchema: z.ZodType<Prisma.AiChatScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const InvitationScalarWhereInputSchema: z.ZodType<Prisma.InvitationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const MemberUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutUserInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutUserInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const MemberScalarWhereInputSchema: z.ZodType<Prisma.MemberScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PasskeyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PasskeyUpdateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PasskeyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PasskeyUpdateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PasskeyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PasskeyUpdateManyMutationInputSchema),z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PasskeyScalarWhereInputSchema: z.ZodType<Prisma.PasskeyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const PurchaseUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PurchaseUpdateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PurchaseUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PurchaseUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateManyMutationInputSchema),z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PurchaseScalarWhereInputSchema: z.ZodType<Prisma.PurchaseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subscriptionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TwoFactorUpdateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TwoFactorUpdateManyMutationInputSchema),z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorScalarWhereInputSchema: z.ZodType<Prisma.TwoFactorScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserCreateWithoutPasskeysInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPasskeysInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPasskeysInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPasskeysInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]),
}).strict();

export const UserUpsertWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUpsertWithoutPasskeysInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPasskeysInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputSchema) ]),
}).strict();

export const UserUpdateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUpdateWithoutPasskeysInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPasskeysInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateWithoutTwofactorsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTwofactorsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]),
}).strict();

export const UserUpsertWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpsertWithoutTwofactorsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]),
}).strict();

export const UserUpdateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpdateWithoutTwofactorsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTwofactorsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const AiChatCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputSchema).optional()
}).strict();

export const AiChatUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.AiChatCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AiChatCreateManyOrganizationInputSchema),z.lazy(() => AiChatCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BankAccountCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutBankAccountsInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.BankAccountCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BankAccountCreateManyOrganizationInputSchema),z.lazy(() => BankAccountCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const borrow_godCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  god_name: z.lazy(() => god_nameCreateNestedOneWithoutBorrow_godInputSchema)
}).strict();

export const borrow_godUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const borrow_godCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => borrow_godWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const borrow_godCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.borrow_godCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => borrow_godCreateManyOrganizationInputSchema),z.lazy(() => borrow_godCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const buddhistCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const buddhistUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const buddhistCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => buddhistWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => buddhistCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const buddhistCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.buddhistCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => buddhistCreateManyOrganizationInputSchema),z.lazy(() => buddhistCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyOrganizationInputSchema),z.lazy(() => CustomerCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExpenseCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rm: z.lazy(() => RelationshipManagerCreateNestedOneWithoutExpensesInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmId: z.string().optional().nullable()
}).strict();

export const ExpenseCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ExpenseCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseCreateManyOrganizationInputSchema),z.lazy(() => ExpenseCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const familyCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.familyCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.familyUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.familyCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => familyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => familyCreateWithoutOrganizationInputSchema),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const familyCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.familyCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => familyCreateManyOrganizationInputSchema),z.lazy(() => familyCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const family_memberCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutFamily_memberInputSchema)
}).strict();

export const family_memberUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  familyId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const family_memberCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => family_memberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => family_memberCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const family_memberCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.family_memberCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => family_memberCreateManyOrganizationInputSchema),z.lazy(() => family_memberCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const god_nameCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutGod_nameInputSchema).optional()
}).strict();

export const god_nameUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutGod_nameInputSchema).optional()
}).strict();

export const god_nameCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => god_nameWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => god_nameCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const god_nameCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.god_nameCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => god_nameCreateManyOrganizationInputSchema),z.lazy(() => god_nameCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyOrganizationInputSchema),z.lazy(() => InvitationCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MemberCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  createdAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyOrganizationInputSchema),z.lazy(() => MemberCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const member_classCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const member_classUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const member_classCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => member_classWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => member_classCreateWithoutOrganizationInputSchema),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const member_classCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.member_classCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => member_classCreateManyOrganizationInputSchema),z.lazy(() => member_classCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const mgyearCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const mgyearUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const mgyearCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => mgyearWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => mgyearCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const mgyearCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.mgyearCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => mgyearCreateManyOrganizationInputSchema),z.lazy(() => mgyearCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProductCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ProductCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCreateManyOrganizationInputSchema),z.lazy(() => ProductCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProfitSharingCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountCreateNestedOneWithoutProfitSharingInputSchema).optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutProfitSharingInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProfitSharingCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ProfitSharingCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfitSharingCreateManyOrganizationInputSchema),z.lazy(() => ProfitSharingCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PurchaseCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputSchema).optional()
}).strict();

export const PurchaseUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.PurchaseCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PurchaseCreateManyOrganizationInputSchema),z.lazy(() => PurchaseCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RelationshipManagerCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.RelationshipManagerCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RelationshipManagerCreateManyOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const service1CreateWithoutOrganizationInputSchema: z.ZodType<Prisma.service1CreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => service2CreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1UncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.service1UncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1CreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.service1CreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => service1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => service1CreateWithoutOrganizationInputSchema),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const service1CreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.service1CreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => service1CreateManyOrganizationInputSchema),z.lazy(() => service1CreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const service2CreateWithoutOrganizationInputSchema: z.ZodType<Prisma.service2CreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service1: z.lazy(() => service1CreateNestedOneWithoutService2InputSchema),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2UncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.service2UncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2CreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.service2CreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => service2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => service2CreateWithoutOrganizationInputSchema),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const service2CreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.service2CreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => service2CreateManyOrganizationInputSchema),z.lazy(() => service2CreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const servicing1CreateWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1CreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1UncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1UncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1CreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1CreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const servicing1CreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.servicing1CreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => servicing1CreateManyOrganizationInputSchema),z.lazy(() => servicing1CreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const servicing2CreateWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2CreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing2InputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const servicing2UncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2UncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2CreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2CreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const servicing2CreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.servicing2CreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => servicing2CreateManyOrganizationInputSchema),z.lazy(() => servicing2CreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const templeCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.templeCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const templeUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.templeUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const templeCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.templeCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => templeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => templeCreateWithoutOrganizationInputSchema),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const templeCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.templeCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => templeCreateManyOrganizationInputSchema),z.lazy(() => templeCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AiChatUpdateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateManyMutationInputSchema),z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BankAccountUpdateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BankAccountUpdateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BankAccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BankAccountUpdateManyMutationInputSchema),z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountScalarWhereInputSchema: z.ZodType<Prisma.BankAccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BankAccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accountNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  balance: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const borrow_godUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => borrow_godWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => borrow_godUpdateWithoutOrganizationInputSchema),z.lazy(() => borrow_godUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => borrow_godCreateWithoutOrganizationInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const borrow_godUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => borrow_godWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => borrow_godUpdateWithoutOrganizationInputSchema),z.lazy(() => borrow_godUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const borrow_godUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => borrow_godScalarWhereInputSchema),
  data: z.union([ z.lazy(() => borrow_godUpdateManyMutationInputSchema),z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const borrow_godScalarWhereInputSchema: z.ZodType<Prisma.borrow_godScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => borrow_godScalarWhereInputSchema),z.lazy(() => borrow_godScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => borrow_godScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => borrow_godScalarWhereInputSchema),z.lazy(() => borrow_godScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  godNameId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  typeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const buddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => buddhistWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => buddhistUpdateWithoutOrganizationInputSchema),z.lazy(() => buddhistUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => buddhistCreateWithoutOrganizationInputSchema),z.lazy(() => buddhistUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const buddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => buddhistWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => buddhistUpdateWithoutOrganizationInputSchema),z.lazy(() => buddhistUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const buddhistUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => buddhistScalarWhereInputSchema),
  data: z.union([ z.lazy(() => buddhistUpdateManyMutationInputSchema),z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const buddhistScalarWhereInputSchema: z.ZodType<Prisma.buddhistScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => buddhistScalarWhereInputSchema),z.lazy(() => buddhistScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => buddhistScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => buddhistScalarWhereInputSchema),z.lazy(() => buddhistScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  templeNowText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerScalarWhereInputSchema: z.ZodType<Prisma.CustomerScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateManyMutationInputSchema),z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseScalarWhereInputSchema: z.ZodType<Prisma.ExpenseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  exchangeRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  receiptUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  sgdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const familyUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.familyUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => familyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => familyUpdateWithoutOrganizationInputSchema),z.lazy(() => familyUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => familyCreateWithoutOrganizationInputSchema),z.lazy(() => familyUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const familyUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.familyUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => familyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => familyUpdateWithoutOrganizationInputSchema),z.lazy(() => familyUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const familyUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.familyUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => familyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => familyUpdateManyMutationInputSchema),z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const familyScalarWhereInputSchema: z.ZodType<Prisma.familyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => familyScalarWhereInputSchema),z.lazy(() => familyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => familyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => familyScalarWhereInputSchema),z.lazy(() => familyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const family_memberUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => family_memberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => family_memberUpdateWithoutOrganizationInputSchema),z.lazy(() => family_memberUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => family_memberCreateWithoutOrganizationInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const family_memberUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => family_memberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => family_memberUpdateWithoutOrganizationInputSchema),z.lazy(() => family_memberUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const family_memberUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => family_memberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => family_memberUpdateManyMutationInputSchema),z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const family_memberScalarWhereInputSchema: z.ZodType<Prisma.family_memberScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => family_memberScalarWhereInputSchema),z.lazy(() => family_memberScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => family_memberScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => family_memberScalarWhereInputSchema),z.lazy(() => family_memberScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birthday: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lunarDate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mainPerson: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mailThis: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isLive: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  postcode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const god_nameUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => god_nameWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => god_nameUpdateWithoutOrganizationInputSchema),z.lazy(() => god_nameUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => god_nameCreateWithoutOrganizationInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const god_nameUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => god_nameWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => god_nameUpdateWithoutOrganizationInputSchema),z.lazy(() => god_nameUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const god_nameUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => god_nameScalarWhereInputSchema),
  data: z.union([ z.lazy(() => god_nameUpdateManyMutationInputSchema),z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const god_nameScalarWhereInputSchema: z.ZodType<Prisma.god_nameScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => god_nameScalarWhereInputSchema),z.lazy(() => god_nameScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => god_nameScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => god_nameScalarWhereInputSchema),z.lazy(() => god_nameScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const member_classUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => member_classWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => member_classUpdateWithoutOrganizationInputSchema),z.lazy(() => member_classUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => member_classCreateWithoutOrganizationInputSchema),z.lazy(() => member_classUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const member_classUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => member_classWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => member_classUpdateWithoutOrganizationInputSchema),z.lazy(() => member_classUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const member_classUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => member_classScalarWhereInputSchema),
  data: z.union([ z.lazy(() => member_classUpdateManyMutationInputSchema),z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const member_classScalarWhereInputSchema: z.ZodType<Prisma.member_classScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => member_classScalarWhereInputSchema),z.lazy(() => member_classScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => member_classScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => member_classScalarWhereInputSchema),z.lazy(() => member_classScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const mgyearUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => mgyearWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => mgyearUpdateWithoutOrganizationInputSchema),z.lazy(() => mgyearUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => mgyearCreateWithoutOrganizationInputSchema),z.lazy(() => mgyearUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const mgyearUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => mgyearWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => mgyearUpdateWithoutOrganizationInputSchema),z.lazy(() => mgyearUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const mgyearUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => mgyearScalarWhereInputSchema),
  data: z.union([ z.lazy(() => mgyearUpdateManyMutationInputSchema),z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const mgyearScalarWhereInputSchema: z.ZodType<Prisma.mgyearScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => mgyearScalarWhereInputSchema),z.lazy(() => mgyearScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => mgyearScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => mgyearScalarWhereInputSchema),z.lazy(() => mgyearScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgyear: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductUpdateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProductUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProductScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateManyMutationInputSchema),z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ProductScalarWhereInputSchema: z.ZodType<Prisma.ProductScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  distributionType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProfitSharingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateManyMutationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ProfitSharingScalarWhereInputSchema: z.ZodType<Prisma.ProfitSharingScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfitSharingScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankAccountId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profitDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  companyProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenue: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  directTradeBookingFee: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finderProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  fxRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shareable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyFeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
}).strict();

export const PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PurchaseUpdateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateManyMutationInputSchema),z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RelationshipManagerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateManyMutationInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerScalarWhereInputSchema: z.ZodType<Prisma.RelationshipManagerScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RelationshipManagerScalarWhereInputSchema),z.lazy(() => RelationshipManagerScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelationshipManagerScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelationshipManagerScalarWhereInputSchema),z.lazy(() => RelationshipManagerScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  joinDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resignDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const service1UpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.service1UpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => service1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => service1UpdateWithoutOrganizationInputSchema),z.lazy(() => service1UncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => service1CreateWithoutOrganizationInputSchema),z.lazy(() => service1UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const service1UpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.service1UpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => service1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => service1UpdateWithoutOrganizationInputSchema),z.lazy(() => service1UncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const service1UpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.service1UpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => service1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => service1UpdateManyMutationInputSchema),z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const service1ScalarWhereInputSchema: z.ZodType<Prisma.service1ScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => service1ScalarWhereInputSchema),z.lazy(() => service1ScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => service1ScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => service1ScalarWhereInputSchema),z.lazy(() => service1ScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const service2UpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.service2UpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => service2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => service2UpdateWithoutOrganizationInputSchema),z.lazy(() => service2UncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => service2CreateWithoutOrganizationInputSchema),z.lazy(() => service2UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const service2UpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.service2UpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => service2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => service2UpdateWithoutOrganizationInputSchema),z.lazy(() => service2UncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const service2UpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.service2UpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => service2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => service2UpdateManyMutationInputSchema),z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const service2ScalarWhereInputSchema: z.ZodType<Prisma.service2ScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => service2ScalarWhereInputSchema),z.lazy(() => service2ScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => service2ScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => service2ScalarWhereInputSchema),z.lazy(() => service2ScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1UpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => servicing1UpdateWithoutOrganizationInputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1UpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => servicing1UpdateWithoutOrganizationInputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const servicing1UpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1UpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => servicing1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => servicing1UpdateManyMutationInputSchema),z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const servicing1ScalarWhereInputSchema: z.ZodType<Prisma.servicing1ScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => servicing1ScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => servicing1ScalarWhereInputSchema),z.lazy(() => servicing1ScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  applyText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accReceivable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accReceived: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accPending: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  payStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payMethod: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payCurrency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  receiptNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  booksNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  advisePeople: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2UpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => servicing2UpdateWithoutOrganizationInputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2UpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateWithoutOrganizationInputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const servicing2UpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2UpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateManyMutationInputSchema),z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const servicing2ScalarWhereInputSchema: z.ZodType<Prisma.servicing2ScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => servicing2ScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => servicing2ScalarWhereInputSchema),z.lazy(() => servicing2ScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  servicing1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  praytypeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  livename: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people1: z.lazy(() => JsonNullableFilterSchema).optional(),
  passname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname4: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people0: z.lazy(() => JsonNullableFilterSchema).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  liveYear: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  boxNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rowTotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bornYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornMonth: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornDay: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const templeUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.templeUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => templeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => templeUpdateWithoutOrganizationInputSchema),z.lazy(() => templeUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => templeCreateWithoutOrganizationInputSchema),z.lazy(() => templeUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const templeUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.templeUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => templeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => templeUpdateWithoutOrganizationInputSchema),z.lazy(() => templeUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const templeUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.templeUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => templeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => templeUpdateManyMutationInputSchema),z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const templeScalarWhereInputSchema: z.ZodType<Prisma.templeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => templeScalarWhereInputSchema),z.lazy(() => templeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => templeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => templeScalarWhereInputSchema),z.lazy(() => templeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomerCreateWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerCreateWithoutFinder1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutFinder1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutFinder1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema) ]),
}).strict();

export const CustomerCreateManyFinder1InputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyFinder1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyFinder1InputSchema),z.lazy(() => CustomerCreateManyFinder1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerCreateWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerCreateWithoutFinder2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutFinder2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutFinder2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema) ]),
}).strict();

export const CustomerCreateManyFinder2InputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyFinder2InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyFinder2InputSchema),z.lazy(() => CustomerCreateManyFinder2InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerCreateWithoutRm1InputSchema: z.ZodType<Prisma.CustomerCreateWithoutRm1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutRm1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutRm1InputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutRm1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema) ]),
}).strict();

export const CustomerCreateManyRm1InputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyRm1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyRm1InputSchema),z.lazy(() => CustomerCreateManyRm1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerCreateWithoutRm2InputSchema: z.ZodType<Prisma.CustomerCreateWithoutRm2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutRm2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutRm2InputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutRm2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema) ]),
}).strict();

export const CustomerCreateManyRm2InputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyRm2InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyRm2InputSchema),z.lazy(() => CustomerCreateManyRm2InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExpenseCreateWithoutRmInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutRmInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpensesInputSchema)
}).strict();

export const ExpenseUncheckedCreateWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutRmInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const ExpenseCreateOrConnectWithoutRmInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutRmInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema) ]),
}).strict();

export const ExpenseCreateManyRmInputEnvelopeSchema: z.ZodType<Prisma.ExpenseCreateManyRmInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseCreateManyRmInputSchema),z.lazy(() => ExpenseCreateManyRmInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutRelationshipManagersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutRelationshipManagersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutRelationshipManagersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema) ]),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutFinder1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutFinder1InputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutFinder1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutFinder1InputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutFinder1Input> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1InputSchema) ]),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutFinder2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutFinder2InputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutFinder2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutFinder2InputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutFinder2Input> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2InputSchema) ]),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutRm1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutRm1InputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutRm1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutRm1InputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutRm1Input> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1InputSchema) ]),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutRm2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutRm2InputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutRm2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutRm2InputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutRm2Input> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2InputSchema) ]),
}).strict();

export const ExpenseUpsertWithWhereUniqueWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUpsertWithWhereUniqueWithoutRmInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutRmInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema) ]),
}).strict();

export const ExpenseUpdateWithWhereUniqueWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUpdateWithWhereUniqueWithoutRmInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutRmInputSchema) ]),
}).strict();

export const ExpenseUpdateManyWithWhereWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithWhereWithoutRmInput> = z.object({
  where: z.lazy(() => ExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateManyMutationInputSchema),z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutRelationshipManagersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRelationshipManagersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutRelationshipManagersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRelationshipManagersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutRelationshipManagersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutRelationshipManagersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const AssetTransactionCreateWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AssetTransactionUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AssetTransactionCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionCreateOrConnectWithoutCustomerInput> = z.object({
  where: z.lazy(() => AssetTransactionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const AssetTransactionCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.AssetTransactionCreateManyCustomerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AssetTransactionCreateManyCustomerInputSchema),z.lazy(() => AssetTransactionCreateManyCustomerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BankAccountCreateWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBankAccountsInputSchema),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountCreateOrConnectWithoutCustomerInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const BankAccountCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.BankAccountCreateManyCustomerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BankAccountCreateManyCustomerInputSchema),z.lazy(() => BankAccountCreateManyCustomerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RelationshipManagerCreateWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutFinder1CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutFinder1CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutFinder1CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerCreateWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutFinder2CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutFinder2CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutFinder2CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutCustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutCustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutCustomersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]),
}).strict();

export const RelationshipManagerCreateWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutRm1CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutRm1CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutRm1CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerCreateWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutRm2CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutRm2CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutRm2CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema) ]),
}).strict();

export const ProfitSharingCreateWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountCreateNestedOneWithoutProfitSharingInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProfitSharingInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingCreateOrConnectWithoutCustomerInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const ProfitSharingCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.ProfitSharingCreateManyCustomerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfitSharingCreateManyCustomerInputSchema),z.lazy(() => ProfitSharingCreateManyCustomerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUpsertWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => AssetTransactionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AssetTransactionUpdateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedUpdateWithoutCustomerInputSchema) ]),
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUpdateWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => AssetTransactionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AssetTransactionUpdateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedUpdateWithoutCustomerInputSchema) ]),
}).strict();

export const AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUpdateManyWithWhereWithoutCustomerInput> = z.object({
  where: z.lazy(() => AssetTransactionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AssetTransactionUpdateManyMutationInputSchema),z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerInputSchema) ]),
}).strict();

export const AssetTransactionScalarWhereInputSchema: z.ZodType<Prisma.AssetTransactionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AssetTransactionScalarWhereInputSchema),z.lazy(() => AssetTransactionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AssetTransactionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AssetTransactionScalarWhereInputSchema),z.lazy(() => AssetTransactionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUpsertWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BankAccountUpdateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutCustomerInputSchema) ]),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUpdateWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BankAccountUpdateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutCustomerInputSchema) ]),
}).strict();

export const BankAccountUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUpdateManyWithWhereWithoutCustomerInput> = z.object({
  where: z.lazy(() => BankAccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BankAccountUpdateManyMutationInputSchema),z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerInputSchema) ]),
}).strict();

export const RelationshipManagerUpsertWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutFinder1CustomersInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutFinder1CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutFinder1CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUpsertWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutFinder2CustomersInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutFinder2CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutFinder2CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutCustomersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutCustomersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUpsertWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutRm1CustomersInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm1CustomersInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutRm1CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm1CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutRm1CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutRm1CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUpsertWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutRm2CustomersInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm2CustomersInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutRm2CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm2CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutRm2CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutRm2CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUpsertWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutCustomerInputSchema) ]),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutCustomerInputSchema) ]),
}).strict();

export const ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithWhereWithoutCustomerInput> = z.object({
  where: z.lazy(() => ProfitSharingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateManyMutationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]),
}).strict();

export const UserCreateWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutMembersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMembersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutMembersInputSchema: z.ZodType<Prisma.UserUpsertWithoutMembersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutMembersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]),
}).strict();

export const UserUpdateWithoutMembersInputSchema: z.ZodType<Prisma.UserUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutMembersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutPurchasesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]),
}).strict();

export const UserCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPurchasesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPurchasesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutPurchasesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutPurchasesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUpsertWithoutPurchasesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPurchasesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputSchema) ]),
}).strict();

export const UserUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutAiChatsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]),
}).strict();

export const UserCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAiChatsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAiChatsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutAiChatsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutAiChatsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAiChatsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAiChatsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const CustomerCreateWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerCreateWithoutBankAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutBankAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutBankAccountsInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutBankAccountsInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutBankAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutBankAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutBankAccountsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBankAccountsInputSchema) ]),
}).strict();

export const ProfitSharingCreateWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingCreateWithoutBankAccountInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutProfitSharingInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProfitSharingInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateWithoutBankAccountInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingCreateOrConnectWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingCreateOrConnectWithoutBankAccountInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema) ]),
}).strict();

export const ProfitSharingCreateManyBankAccountInputEnvelopeSchema: z.ZodType<Prisma.ProfitSharingCreateManyBankAccountInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfitSharingCreateManyBankAccountInputSchema),z.lazy(() => ProfitSharingCreateManyBankAccountInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerUpsertWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUpsertWithoutBankAccountsInput> = z.object({
  update: z.union([ z.lazy(() => CustomerUpdateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutBankAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutBankAccountsInputSchema) ]),
  where: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerUpdateToOneWithWhereWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUpdateToOneWithWhereWithoutBankAccountsInput> = z.object({
  where: z.lazy(() => CustomerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutBankAccountsInputSchema) ]),
}).strict();

export const CustomerUpdateWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutBankAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutBankAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutBankAccountsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBankAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBankAccountsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutBankAccountsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBankAccountsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutBankAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutBankAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutBankAccountInputSchema) ]),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema) ]),
}).strict();

export const ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutBankAccountInputSchema) ]),
}).strict();

export const ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithWhereWithoutBankAccountInput> = z.object({
  where: z.lazy(() => ProfitSharingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateManyMutationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutBankAccountInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutExpensesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]),
}).strict();

export const RelationshipManagerCreateWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutExpensesInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutExpensesInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutExpensesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutExpensesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpensesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUpsertWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutExpensesInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutExpensesInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutExpensesInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutExpensesInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutProductsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const ProfitSharingCreateWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingCreateWithoutProductInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountCreateNestedOneWithoutProfitSharingInputSchema).optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutProfitSharingInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const ProfitSharingCreateManyProductInputEnvelopeSchema: z.ZodType<Prisma.ProfitSharingCreateManyProductInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfitSharingCreateManyProductInputSchema),z.lazy(() => ProfitSharingCreateManyProductInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUpsertWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const ProfitSharingUpdateManyWithWhereWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => ProfitSharingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateManyMutationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutProductInputSchema) ]),
}).strict();

export const BankAccountCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutBankAccountsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBankAccountsInputSchema)
}).strict();

export const BankAccountUncheckedCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable()
}).strict();

export const BankAccountCreateOrConnectWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountCreateOrConnectWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutProfitSharingInputSchema) ]),
}).strict();

export const CustomerCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutProfitSharingInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProfitSharingInputSchema) ]),
}).strict();

export const ProductCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const ProductUncheckedCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string()
}).strict();

export const ProductCreateOrConnectWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutProfitSharingInputSchema) ]),
}).strict();

export const BankAccountUpsertWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUpsertWithoutProfitSharingInput> = z.object({
  update: z.union([ z.lazy(() => BankAccountUpdateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutProfitSharingInputSchema) ]),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutProfitSharingInputSchema) ]),
  where: z.lazy(() => BankAccountWhereInputSchema).optional()
}).strict();

export const BankAccountUpdateToOneWithWhereWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUpdateToOneWithWhereWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => BankAccountWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => BankAccountUpdateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutProfitSharingInputSchema) ]),
}).strict();

export const BankAccountUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneWithoutBankAccountsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBankAccountsNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CustomerUpsertWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUpsertWithoutProfitSharingInput> = z.object({
  update: z.union([ z.lazy(() => CustomerUpdateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutProfitSharingInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutProfitSharingInputSchema) ]),
  where: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerUpdateToOneWithWhereWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUpdateToOneWithWhereWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => CustomerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutProfitSharingInputSchema) ]),
}).strict();

export const CustomerUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutProfitSharingInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProfitSharingInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProfitSharingInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProfitSharingInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ProductUpsertWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUpsertWithoutProfitSharingInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutProfitSharingInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutProfitSharingInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutProfitSharingInputSchema) ]),
}).strict();

export const ProductUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerCreateWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerCreateWithoutAssetTransactionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutAssetTransactionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutAssetTransactionsInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutAssetTransactionsInputSchema) ]),
}).strict();

export const CustomerUpsertWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUpsertWithoutAssetTransactionsInput> = z.object({
  update: z.union([ z.lazy(() => CustomerUpdateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutAssetTransactionsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutAssetTransactionsInputSchema) ]),
  where: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerUpdateToOneWithWhereWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUpdateToOneWithWhereWithoutAssetTransactionsInput> = z.object({
  where: z.lazy(() => CustomerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutAssetTransactionsInputSchema) ]),
}).strict();

export const CustomerUpdateWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutAssetTransactionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutAssetTransactionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const anomaly_eventCreateWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventCreateWithoutExperimentRunInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  event_label_link: z.lazy(() => event_label_linkCreateNestedManyWithoutAnomaly_eventInputSchema).optional()
}).strict();

export const anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedCreateWithoutExperimentRunInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  event_label_link: z.lazy(() => event_label_linkUncheckedCreateNestedManyWithoutAnomaly_eventInputSchema).optional()
}).strict();

export const anomaly_eventCreateOrConnectWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventCreateOrConnectWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => anomaly_eventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema) ]),
}).strict();

export const anomaly_eventCreateManyExperimentRunInputEnvelopeSchema: z.ZodType<Prisma.anomaly_eventCreateManyExperimentRunInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => anomaly_eventCreateManyExperimentRunInputSchema),z.lazy(() => anomaly_eventCreateManyExperimentRunInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TrainedModelCreateWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelCreateWithoutExperimentRunInput> = z.object({
  id: z.string().cuid().optional(),
  modelName: z.string(),
  modelType: z.string(),
  modelPath: z.string(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TrainedModelUncheckedCreateWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUncheckedCreateWithoutExperimentRunInput> = z.object({
  id: z.string().cuid().optional(),
  modelName: z.string(),
  modelType: z.string(),
  modelPath: z.string(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TrainedModelCreateOrConnectWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelCreateOrConnectWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => TrainedModelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema) ]),
}).strict();

export const anomaly_eventUpsertWithWhereUniqueWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventUpsertWithWhereUniqueWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => anomaly_eventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => anomaly_eventUpdateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUncheckedUpdateWithoutExperimentRunInputSchema) ]),
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutExperimentRunInputSchema) ]),
}).strict();

export const anomaly_eventUpdateWithWhereUniqueWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventUpdateWithWhereUniqueWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => anomaly_eventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => anomaly_eventUpdateWithoutExperimentRunInputSchema),z.lazy(() => anomaly_eventUncheckedUpdateWithoutExperimentRunInputSchema) ]),
}).strict();

export const anomaly_eventUpdateManyWithWhereWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventUpdateManyWithWhereWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => anomaly_eventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => anomaly_eventUpdateManyMutationInputSchema),z.lazy(() => anomaly_eventUncheckedUpdateManyWithoutExperimentRunInputSchema) ]),
}).strict();

export const anomaly_eventScalarWhereInputSchema: z.ZodType<Prisma.anomaly_eventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => anomaly_eventScalarWhereInputSchema),z.lazy(() => anomaly_eventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => anomaly_eventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => anomaly_eventScalarWhereInputSchema),z.lazy(() => anomaly_eventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  meterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventTimestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  detectionRule: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  dataWindow: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumAnomalyEventStatusFilterSchema),z.lazy(() => AnomalyEventStatusSchema) ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reviewTimestamp: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  justificationNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  experimentRunId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TrainedModelUpsertWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUpsertWithoutExperimentRunInput> = z.object({
  update: z.union([ z.lazy(() => TrainedModelUpdateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedUpdateWithoutExperimentRunInputSchema) ]),
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema) ]),
  where: z.lazy(() => TrainedModelWhereInputSchema).optional()
}).strict();

export const TrainedModelUpdateToOneWithWhereWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUpdateToOneWithWhereWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => TrainedModelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TrainedModelUpdateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedUpdateWithoutExperimentRunInputSchema) ]),
}).strict();

export const TrainedModelUpdateWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUpdateWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TrainedModelUncheckedUpdateWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trainingDataSummary: z.union([ z.lazy(() => JsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExperimentRunCreateWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunCreateWithoutAnomalyEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  trainedModel: z.lazy(() => TrainedModelCreateNestedOneWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedCreateWithoutAnomalyEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  trainedModel: z.lazy(() => TrainedModelUncheckedCreateNestedOneWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunCreateOrConnectWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunCreateOrConnectWithoutAnomalyEventsInput> = z.object({
  where: z.lazy(() => ExperimentRunWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema) ]),
}).strict();

export const event_label_linkCreateWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkCreateWithoutAnomaly_eventInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date().optional(),
  anomaly_label: z.lazy(() => anomaly_labelCreateNestedOneWithoutEvent_label_linkInputSchema)
}).strict();

export const event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkUncheckedCreateWithoutAnomaly_eventInput> = z.object({
  id: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const event_label_linkCreateOrConnectWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkCreateOrConnectWithoutAnomaly_eventInput> = z.object({
  where: z.lazy(() => event_label_linkWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema) ]),
}).strict();

export const event_label_linkCreateManyAnomaly_eventInputEnvelopeSchema: z.ZodType<Prisma.event_label_linkCreateManyAnomaly_eventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => event_label_linkCreateManyAnomaly_eventInputSchema),z.lazy(() => event_label_linkCreateManyAnomaly_eventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExperimentRunUpsertWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUpsertWithoutAnomalyEventsInput> = z.object({
  update: z.union([ z.lazy(() => ExperimentRunUpdateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutAnomalyEventsInputSchema) ]),
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema) ]),
  where: z.lazy(() => ExperimentRunWhereInputSchema).optional()
}).strict();

export const ExperimentRunUpdateToOneWithWhereWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUpdateToOneWithWhereWithoutAnomalyEventsInput> = z.object({
  where: z.lazy(() => ExperimentRunWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ExperimentRunUpdateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutAnomalyEventsInputSchema) ]),
}).strict();

export const ExperimentRunUpdateWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUpdateWithoutAnomalyEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  trainedModel: z.lazy(() => TrainedModelUpdateOneWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedUpdateWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedUpdateWithoutAnomalyEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  trainedModel: z.lazy(() => TrainedModelUncheckedUpdateOneWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const event_label_linkUpsertWithWhereUniqueWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkUpsertWithWhereUniqueWithoutAnomaly_eventInput> = z.object({
  where: z.lazy(() => event_label_linkWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => event_label_linkUpdateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUncheckedUpdateWithoutAnomaly_eventInputSchema) ]),
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_eventInputSchema) ]),
}).strict();

export const event_label_linkUpdateWithWhereUniqueWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkUpdateWithWhereUniqueWithoutAnomaly_eventInput> = z.object({
  where: z.lazy(() => event_label_linkWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => event_label_linkUpdateWithoutAnomaly_eventInputSchema),z.lazy(() => event_label_linkUncheckedUpdateWithoutAnomaly_eventInputSchema) ]),
}).strict();

export const event_label_linkUpdateManyWithWhereWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkUpdateManyWithWhereWithoutAnomaly_eventInput> = z.object({
  where: z.lazy(() => event_label_linkScalarWhereInputSchema),
  data: z.union([ z.lazy(() => event_label_linkUpdateManyMutationInputSchema),z.lazy(() => event_label_linkUncheckedUpdateManyWithoutAnomaly_eventInputSchema) ]),
}).strict();

export const event_label_linkScalarWhereInputSchema: z.ZodType<Prisma.event_label_linkScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => event_label_linkScalarWhereInputSchema),z.lazy(() => event_label_linkScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => event_label_linkScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => event_label_linkScalarWhereInputSchema),z.lazy(() => event_label_linkScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  labelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const event_label_linkCreateWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkCreateWithoutAnomaly_labelInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date().optional(),
  anomaly_event: z.lazy(() => anomaly_eventCreateNestedOneWithoutEvent_label_linkInputSchema)
}).strict();

export const event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkUncheckedCreateWithoutAnomaly_labelInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const event_label_linkCreateOrConnectWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkCreateOrConnectWithoutAnomaly_labelInput> = z.object({
  where: z.lazy(() => event_label_linkWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema) ]),
}).strict();

export const event_label_linkCreateManyAnomaly_labelInputEnvelopeSchema: z.ZodType<Prisma.event_label_linkCreateManyAnomaly_labelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => event_label_linkCreateManyAnomaly_labelInputSchema),z.lazy(() => event_label_linkCreateManyAnomaly_labelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const event_label_linkUpsertWithWhereUniqueWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkUpsertWithWhereUniqueWithoutAnomaly_labelInput> = z.object({
  where: z.lazy(() => event_label_linkWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => event_label_linkUpdateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUncheckedUpdateWithoutAnomaly_labelInputSchema) ]),
  create: z.union([ z.lazy(() => event_label_linkCreateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUncheckedCreateWithoutAnomaly_labelInputSchema) ]),
}).strict();

export const event_label_linkUpdateWithWhereUniqueWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkUpdateWithWhereUniqueWithoutAnomaly_labelInput> = z.object({
  where: z.lazy(() => event_label_linkWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => event_label_linkUpdateWithoutAnomaly_labelInputSchema),z.lazy(() => event_label_linkUncheckedUpdateWithoutAnomaly_labelInputSchema) ]),
}).strict();

export const event_label_linkUpdateManyWithWhereWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkUpdateManyWithWhereWithoutAnomaly_labelInput> = z.object({
  where: z.lazy(() => event_label_linkScalarWhereInputSchema),
  data: z.union([ z.lazy(() => event_label_linkUpdateManyMutationInputSchema),z.lazy(() => event_label_linkUncheckedUpdateManyWithoutAnomaly_labelInputSchema) ]),
}).strict();

export const god_nameCreateWithoutBorrow_godInputSchema: z.ZodType<Prisma.god_nameCreateWithoutBorrow_godInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutGod_nameInputSchema)
}).strict();

export const god_nameUncheckedCreateWithoutBorrow_godInputSchema: z.ZodType<Prisma.god_nameUncheckedCreateWithoutBorrow_godInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const god_nameCreateOrConnectWithoutBorrow_godInputSchema: z.ZodType<Prisma.god_nameCreateOrConnectWithoutBorrow_godInput> = z.object({
  where: z.lazy(() => god_nameWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => god_nameCreateWithoutBorrow_godInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutBorrow_godInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutBorrow_godInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutBorrow_godInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutBorrow_godInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBorrow_godInputSchema) ]),
}).strict();

export const god_nameUpsertWithoutBorrow_godInputSchema: z.ZodType<Prisma.god_nameUpsertWithoutBorrow_godInput> = z.object({
  update: z.union([ z.lazy(() => god_nameUpdateWithoutBorrow_godInputSchema),z.lazy(() => god_nameUncheckedUpdateWithoutBorrow_godInputSchema) ]),
  create: z.union([ z.lazy(() => god_nameCreateWithoutBorrow_godInputSchema),z.lazy(() => god_nameUncheckedCreateWithoutBorrow_godInputSchema) ]),
  where: z.lazy(() => god_nameWhereInputSchema).optional()
}).strict();

export const god_nameUpdateToOneWithWhereWithoutBorrow_godInputSchema: z.ZodType<Prisma.god_nameUpdateToOneWithWhereWithoutBorrow_godInput> = z.object({
  where: z.lazy(() => god_nameWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => god_nameUpdateWithoutBorrow_godInputSchema),z.lazy(() => god_nameUncheckedUpdateWithoutBorrow_godInputSchema) ]),
}).strict();

export const god_nameUpdateWithoutBorrow_godInputSchema: z.ZodType<Prisma.god_nameUpdateWithoutBorrow_godInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutGod_nameNestedInputSchema).optional()
}).strict();

export const god_nameUncheckedUpdateWithoutBorrow_godInputSchema: z.ZodType<Prisma.god_nameUncheckedUpdateWithoutBorrow_godInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpsertWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutBorrow_godInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBorrow_godInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBorrow_godInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutBorrow_godInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBorrow_godInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutBorrow_godInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutBorrow_godInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutBuddhistInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutBuddhistInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutBuddhistInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBuddhistInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutBuddhistInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBuddhistInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBuddhistInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutBuddhistInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBuddhistInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutBuddhistInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutBuddhistInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const anomaly_eventCreateWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_eventCreateWithoutEvent_label_linkInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  experimentRun: z.lazy(() => ExperimentRunCreateNestedOneWithoutAnomalyEventsInputSchema).optional()
}).strict();

export const anomaly_eventUncheckedCreateWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedCreateWithoutEvent_label_linkInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  experimentRunId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const anomaly_eventCreateOrConnectWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_eventCreateOrConnectWithoutEvent_label_linkInput> = z.object({
  where: z.lazy(() => anomaly_eventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutEvent_label_linkInputSchema) ]),
}).strict();

export const anomaly_labelCreateWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_labelCreateWithoutEvent_label_linkInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const anomaly_labelUncheckedCreateWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_labelUncheckedCreateWithoutEvent_label_linkInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const anomaly_labelCreateOrConnectWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_labelCreateOrConnectWithoutEvent_label_linkInput> = z.object({
  where: z.lazy(() => anomaly_labelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => anomaly_labelCreateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_labelUncheckedCreateWithoutEvent_label_linkInputSchema) ]),
}).strict();

export const anomaly_eventUpsertWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_eventUpsertWithoutEvent_label_linkInput> = z.object({
  update: z.union([ z.lazy(() => anomaly_eventUpdateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_eventUncheckedUpdateWithoutEvent_label_linkInputSchema) ]),
  create: z.union([ z.lazy(() => anomaly_eventCreateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_eventUncheckedCreateWithoutEvent_label_linkInputSchema) ]),
  where: z.lazy(() => anomaly_eventWhereInputSchema).optional()
}).strict();

export const anomaly_eventUpdateToOneWithWhereWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_eventUpdateToOneWithWhereWithoutEvent_label_linkInput> = z.object({
  where: z.lazy(() => anomaly_eventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => anomaly_eventUpdateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_eventUncheckedUpdateWithoutEvent_label_linkInputSchema) ]),
}).strict();

export const anomaly_eventUpdateWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_eventUpdateWithoutEvent_label_linkInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRun: z.lazy(() => ExperimentRunUpdateOneWithoutAnomalyEventsNestedInputSchema).optional()
}).strict();

export const anomaly_eventUncheckedUpdateWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedUpdateWithoutEvent_label_linkInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experimentRunId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const anomaly_labelUpsertWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_labelUpsertWithoutEvent_label_linkInput> = z.object({
  update: z.union([ z.lazy(() => anomaly_labelUpdateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_labelUncheckedUpdateWithoutEvent_label_linkInputSchema) ]),
  create: z.union([ z.lazy(() => anomaly_labelCreateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_labelUncheckedCreateWithoutEvent_label_linkInputSchema) ]),
  where: z.lazy(() => anomaly_labelWhereInputSchema).optional()
}).strict();

export const anomaly_labelUpdateToOneWithWhereWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_labelUpdateToOneWithWhereWithoutEvent_label_linkInput> = z.object({
  where: z.lazy(() => anomaly_labelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => anomaly_labelUpdateWithoutEvent_label_linkInputSchema),z.lazy(() => anomaly_labelUncheckedUpdateWithoutEvent_label_linkInputSchema) ]),
}).strict();

export const anomaly_labelUpdateWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_labelUpdateWithoutEvent_label_linkInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const anomaly_labelUncheckedUpdateWithoutEvent_label_linkInputSchema: z.ZodType<Prisma.anomaly_labelUncheckedUpdateWithoutEvent_label_linkInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutFamilyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutFamilyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutFamilyInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const family_memberCreateWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberCreateWithoutFamilyInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamily_memberInputSchema)
}).strict();

export const family_memberUncheckedCreateWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberUncheckedCreateWithoutFamilyInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const family_memberCreateOrConnectWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberCreateOrConnectWithoutFamilyInput> = z.object({
  where: z.lazy(() => family_memberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => family_memberCreateWithoutFamilyInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const family_memberCreateManyFamilyInputEnvelopeSchema: z.ZodType<Prisma.family_memberCreateManyFamilyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => family_memberCreateManyFamilyInputSchema),z.lazy(() => family_memberCreateManyFamilyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const servicing1CreateWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1CreateWithoutFamilyInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1UncheckedCreateWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1UncheckedCreateWithoutFamilyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1CreateOrConnectWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1CreateOrConnectWithoutFamilyInput> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing1CreateWithoutFamilyInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const servicing1CreateManyFamilyInputEnvelopeSchema: z.ZodType<Prisma.servicing1CreateManyFamilyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => servicing1CreateManyFamilyInputSchema),z.lazy(() => servicing1CreateManyFamilyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const servicing2CreateWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2CreateWithoutFamilyInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing2InputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const servicing2UncheckedCreateWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2UncheckedCreateWithoutFamilyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2CreateOrConnectWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2CreateOrConnectWithoutFamilyInput> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing2CreateWithoutFamilyInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const servicing2CreateManyFamilyInputEnvelopeSchema: z.ZodType<Prisma.servicing2CreateManyFamilyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => servicing2CreateManyFamilyInputSchema),z.lazy(() => servicing2CreateManyFamilyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutFamilyInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamilyInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamilyInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutFamilyInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamilyInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const family_memberUpsertWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberUpsertWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => family_memberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => family_memberUpdateWithoutFamilyInputSchema),z.lazy(() => family_memberUncheckedUpdateWithoutFamilyInputSchema) ]),
  create: z.union([ z.lazy(() => family_memberCreateWithoutFamilyInputSchema),z.lazy(() => family_memberUncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const family_memberUpdateWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberUpdateWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => family_memberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => family_memberUpdateWithoutFamilyInputSchema),z.lazy(() => family_memberUncheckedUpdateWithoutFamilyInputSchema) ]),
}).strict();

export const family_memberUpdateManyWithWhereWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberUpdateManyWithWhereWithoutFamilyInput> = z.object({
  where: z.lazy(() => family_memberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => family_memberUpdateManyMutationInputSchema),z.lazy(() => family_memberUncheckedUpdateManyWithoutFamilyInputSchema) ]),
}).strict();

export const servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1UpsertWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => servicing1UpdateWithoutFamilyInputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutFamilyInputSchema) ]),
  create: z.union([ z.lazy(() => servicing1CreateWithoutFamilyInputSchema),z.lazy(() => servicing1UncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1UpdateWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => servicing1UpdateWithoutFamilyInputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutFamilyInputSchema) ]),
}).strict();

export const servicing1UpdateManyWithWhereWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1UpdateManyWithWhereWithoutFamilyInput> = z.object({
  where: z.lazy(() => servicing1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => servicing1UpdateManyMutationInputSchema),z.lazy(() => servicing1UncheckedUpdateManyWithoutFamilyInputSchema) ]),
}).strict();

export const servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2UpsertWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => servicing2UpdateWithoutFamilyInputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutFamilyInputSchema) ]),
  create: z.union([ z.lazy(() => servicing2CreateWithoutFamilyInputSchema),z.lazy(() => servicing2UncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2UpdateWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateWithoutFamilyInputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutFamilyInputSchema) ]),
}).strict();

export const servicing2UpdateManyWithWhereWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2UpdateManyWithWhereWithoutFamilyInput> = z.object({
  where: z.lazy(() => servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateManyMutationInputSchema),z.lazy(() => servicing2UncheckedUpdateManyWithoutFamilyInputSchema) ]),
}).strict();

export const familyCreateWithoutFamily_memberInputSchema: z.ZodType<Prisma.familyCreateWithoutFamily_memberInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamilyInputSchema),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyUncheckedCreateWithoutFamily_memberInputSchema: z.ZodType<Prisma.familyUncheckedCreateWithoutFamily_memberInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyCreateOrConnectWithoutFamily_memberInputSchema: z.ZodType<Prisma.familyCreateOrConnectWithoutFamily_memberInput> = z.object({
  where: z.lazy(() => familyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => familyCreateWithoutFamily_memberInputSchema),z.lazy(() => familyUncheckedCreateWithoutFamily_memberInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutFamily_memberInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutFamily_memberInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutFamily_memberInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamily_memberInputSchema) ]),
}).strict();

export const familyUpsertWithoutFamily_memberInputSchema: z.ZodType<Prisma.familyUpsertWithoutFamily_memberInput> = z.object({
  update: z.union([ z.lazy(() => familyUpdateWithoutFamily_memberInputSchema),z.lazy(() => familyUncheckedUpdateWithoutFamily_memberInputSchema) ]),
  create: z.union([ z.lazy(() => familyCreateWithoutFamily_memberInputSchema),z.lazy(() => familyUncheckedCreateWithoutFamily_memberInputSchema) ]),
  where: z.lazy(() => familyWhereInputSchema).optional()
}).strict();

export const familyUpdateToOneWithWhereWithoutFamily_memberInputSchema: z.ZodType<Prisma.familyUpdateToOneWithWhereWithoutFamily_memberInput> = z.object({
  where: z.lazy(() => familyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => familyUpdateWithoutFamily_memberInputSchema),z.lazy(() => familyUncheckedUpdateWithoutFamily_memberInputSchema) ]),
}).strict();

export const familyUpdateWithoutFamily_memberInputSchema: z.ZodType<Prisma.familyUpdateWithoutFamily_memberInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const familyUncheckedUpdateWithoutFamily_memberInputSchema: z.ZodType<Prisma.familyUncheckedUpdateWithoutFamily_memberInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutFamily_memberInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamily_memberInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamily_memberInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutFamily_memberInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamily_memberInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutFamily_memberInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutFamily_memberInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const borrow_godCreateWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godCreateWithoutGod_nameInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBorrow_godInputSchema)
}).strict();

export const borrow_godUncheckedCreateWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godUncheckedCreateWithoutGod_nameInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const borrow_godCreateOrConnectWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godCreateOrConnectWithoutGod_nameInput> = z.object({
  where: z.lazy(() => borrow_godWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema) ]),
}).strict();

export const borrow_godCreateManyGod_nameInputEnvelopeSchema: z.ZodType<Prisma.borrow_godCreateManyGod_nameInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => borrow_godCreateManyGod_nameInputSchema),z.lazy(() => borrow_godCreateManyGod_nameInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutGod_nameInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutGod_nameInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutGod_nameInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGod_nameInputSchema) ]),
}).strict();

export const borrow_godUpsertWithWhereUniqueWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godUpsertWithWhereUniqueWithoutGod_nameInput> = z.object({
  where: z.lazy(() => borrow_godWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => borrow_godUpdateWithoutGod_nameInputSchema),z.lazy(() => borrow_godUncheckedUpdateWithoutGod_nameInputSchema) ]),
  create: z.union([ z.lazy(() => borrow_godCreateWithoutGod_nameInputSchema),z.lazy(() => borrow_godUncheckedCreateWithoutGod_nameInputSchema) ]),
}).strict();

export const borrow_godUpdateWithWhereUniqueWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godUpdateWithWhereUniqueWithoutGod_nameInput> = z.object({
  where: z.lazy(() => borrow_godWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => borrow_godUpdateWithoutGod_nameInputSchema),z.lazy(() => borrow_godUncheckedUpdateWithoutGod_nameInputSchema) ]),
}).strict();

export const borrow_godUpdateManyWithWhereWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godUpdateManyWithWhereWithoutGod_nameInput> = z.object({
  where: z.lazy(() => borrow_godScalarWhereInputSchema),
  data: z.union([ z.lazy(() => borrow_godUpdateManyMutationInputSchema),z.lazy(() => borrow_godUncheckedUpdateManyWithoutGod_nameInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutGod_nameInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutGod_nameInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGod_nameInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutGod_nameInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutGod_nameInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutGod_nameInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutGod_nameInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutMember_classInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMember_classInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMember_classInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMember_classInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMember_classInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMember_classInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMember_classInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMember_classInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMember_classInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMember_classInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMember_classInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutMgyearInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMgyearInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMgyearInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMgyearInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMgyearInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMgyearInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMgyearInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMgyearInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMgyearInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMgyearInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMgyearInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutService1InputSchema: z.ZodType<Prisma.OrganizationCreateWithoutService1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutService1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutService1InputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutService1Input> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const service2CreateWithoutService1InputSchema: z.ZodType<Prisma.service2CreateWithoutService1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService2InputSchema),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2UncheckedCreateWithoutService1InputSchema: z.ZodType<Prisma.service2UncheckedCreateWithoutService1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2CreateOrConnectWithoutService1InputSchema: z.ZodType<Prisma.service2CreateOrConnectWithoutService1Input> = z.object({
  where: z.lazy(() => service2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => service2CreateWithoutService1InputSchema),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const service2CreateManyService1InputEnvelopeSchema: z.ZodType<Prisma.service2CreateManyService1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => service2CreateManyService1InputSchema),z.lazy(() => service2CreateManyService1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const servicing1CreateWithoutService1InputSchema: z.ZodType<Prisma.servicing1CreateWithoutService1Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing1InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1UncheckedCreateWithoutService1InputSchema: z.ZodType<Prisma.servicing1UncheckedCreateWithoutService1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1CreateOrConnectWithoutService1InputSchema: z.ZodType<Prisma.servicing1CreateOrConnectWithoutService1Input> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing1CreateWithoutService1InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const servicing1CreateManyService1InputEnvelopeSchema: z.ZodType<Prisma.servicing1CreateManyService1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => servicing1CreateManyService1InputSchema),z.lazy(() => servicing1CreateManyService1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const servicing2CreateWithoutService1InputSchema: z.ZodType<Prisma.servicing2CreateWithoutService1Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing2InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing2InputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const servicing2UncheckedCreateWithoutService1InputSchema: z.ZodType<Prisma.servicing2UncheckedCreateWithoutService1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2CreateOrConnectWithoutService1InputSchema: z.ZodType<Prisma.servicing2CreateOrConnectWithoutService1Input> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing2CreateWithoutService1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const servicing2CreateManyService1InputEnvelopeSchema: z.ZodType<Prisma.servicing2CreateManyService1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => servicing2CreateManyService1InputSchema),z.lazy(() => servicing2CreateManyService1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutService1Input> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService1InputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService1InputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutService1Input> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService1InputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const service2UpsertWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.service2UpsertWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => service2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => service2UpdateWithoutService1InputSchema),z.lazy(() => service2UncheckedUpdateWithoutService1InputSchema) ]),
  create: z.union([ z.lazy(() => service2CreateWithoutService1InputSchema),z.lazy(() => service2UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const service2UpdateWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.service2UpdateWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => service2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => service2UpdateWithoutService1InputSchema),z.lazy(() => service2UncheckedUpdateWithoutService1InputSchema) ]),
}).strict();

export const service2UpdateManyWithWhereWithoutService1InputSchema: z.ZodType<Prisma.service2UpdateManyWithWhereWithoutService1Input> = z.object({
  where: z.lazy(() => service2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => service2UpdateManyMutationInputSchema),z.lazy(() => service2UncheckedUpdateManyWithoutService1InputSchema) ]),
}).strict();

export const servicing1UpsertWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.servicing1UpsertWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => servicing1UpdateWithoutService1InputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutService1InputSchema) ]),
  create: z.union([ z.lazy(() => servicing1CreateWithoutService1InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const servicing1UpdateWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.servicing1UpdateWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => servicing1UpdateWithoutService1InputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutService1InputSchema) ]),
}).strict();

export const servicing1UpdateManyWithWhereWithoutService1InputSchema: z.ZodType<Prisma.servicing1UpdateManyWithWhereWithoutService1Input> = z.object({
  where: z.lazy(() => servicing1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => servicing1UpdateManyMutationInputSchema),z.lazy(() => servicing1UncheckedUpdateManyWithoutService1InputSchema) ]),
}).strict();

export const servicing2UpsertWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.servicing2UpsertWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => servicing2UpdateWithoutService1InputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutService1InputSchema) ]),
  create: z.union([ z.lazy(() => servicing2CreateWithoutService1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const servicing2UpdateWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.servicing2UpdateWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateWithoutService1InputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutService1InputSchema) ]),
}).strict();

export const servicing2UpdateManyWithWhereWithoutService1InputSchema: z.ZodType<Prisma.servicing2UpdateManyWithWhereWithoutService1Input> = z.object({
  where: z.lazy(() => servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateManyMutationInputSchema),z.lazy(() => servicing2UncheckedUpdateManyWithoutService1InputSchema) ]),
}).strict();

export const OrganizationCreateWithoutService2InputSchema: z.ZodType<Prisma.OrganizationCreateWithoutService2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutService2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutService2InputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutService2Input> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const service1CreateWithoutService2InputSchema: z.ZodType<Prisma.service1CreateWithoutService2Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService1InputSchema),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1UncheckedCreateWithoutService2InputSchema: z.ZodType<Prisma.service1UncheckedCreateWithoutService2Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1CreateOrConnectWithoutService2InputSchema: z.ZodType<Prisma.service1CreateOrConnectWithoutService2Input> = z.object({
  where: z.lazy(() => service1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => service1CreateWithoutService2InputSchema),z.lazy(() => service1UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const servicing1CreateWithoutService2InputSchema: z.ZodType<Prisma.servicing1CreateWithoutService2Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing1InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing1InputSchema),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1UncheckedCreateWithoutService2InputSchema: z.ZodType<Prisma.servicing1UncheckedCreateWithoutService2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1CreateOrConnectWithoutService2InputSchema: z.ZodType<Prisma.servicing1CreateOrConnectWithoutService2Input> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing1CreateWithoutService2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const servicing1CreateManyService2InputEnvelopeSchema: z.ZodType<Prisma.servicing1CreateManyService2InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => servicing1CreateManyService2InputSchema),z.lazy(() => servicing1CreateManyService2InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const servicing2CreateWithoutService2InputSchema: z.ZodType<Prisma.servicing2CreateWithoutService2Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing2InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing2InputSchema),
  servicing1: z.lazy(() => servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const servicing2UncheckedCreateWithoutService2InputSchema: z.ZodType<Prisma.servicing2UncheckedCreateWithoutService2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2CreateOrConnectWithoutService2InputSchema: z.ZodType<Prisma.servicing2CreateOrConnectWithoutService2Input> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing2CreateWithoutService2InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const servicing2CreateManyService2InputEnvelopeSchema: z.ZodType<Prisma.servicing2CreateManyService2InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => servicing2CreateManyService2InputSchema),z.lazy(() => servicing2CreateManyService2InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutService2Input> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService2InputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService2InputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutService2Input> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService2InputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const service1UpsertWithoutService2InputSchema: z.ZodType<Prisma.service1UpsertWithoutService2Input> = z.object({
  update: z.union([ z.lazy(() => service1UpdateWithoutService2InputSchema),z.lazy(() => service1UncheckedUpdateWithoutService2InputSchema) ]),
  create: z.union([ z.lazy(() => service1CreateWithoutService2InputSchema),z.lazy(() => service1UncheckedCreateWithoutService2InputSchema) ]),
  where: z.lazy(() => service1WhereInputSchema).optional()
}).strict();

export const service1UpdateToOneWithWhereWithoutService2InputSchema: z.ZodType<Prisma.service1UpdateToOneWithWhereWithoutService2Input> = z.object({
  where: z.lazy(() => service1WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => service1UpdateWithoutService2InputSchema),z.lazy(() => service1UncheckedUpdateWithoutService2InputSchema) ]),
}).strict();

export const service1UpdateWithoutService2InputSchema: z.ZodType<Prisma.service1UpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const service1UncheckedUpdateWithoutService2InputSchema: z.ZodType<Prisma.service1UncheckedUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const servicing1UpsertWithWhereUniqueWithoutService2InputSchema: z.ZodType<Prisma.servicing1UpsertWithWhereUniqueWithoutService2Input> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => servicing1UpdateWithoutService2InputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutService2InputSchema) ]),
  create: z.union([ z.lazy(() => servicing1CreateWithoutService2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const servicing1UpdateWithWhereUniqueWithoutService2InputSchema: z.ZodType<Prisma.servicing1UpdateWithWhereUniqueWithoutService2Input> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => servicing1UpdateWithoutService2InputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutService2InputSchema) ]),
}).strict();

export const servicing1UpdateManyWithWhereWithoutService2InputSchema: z.ZodType<Prisma.servicing1UpdateManyWithWhereWithoutService2Input> = z.object({
  where: z.lazy(() => servicing1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => servicing1UpdateManyMutationInputSchema),z.lazy(() => servicing1UncheckedUpdateManyWithoutService2InputSchema) ]),
}).strict();

export const servicing2UpsertWithWhereUniqueWithoutService2InputSchema: z.ZodType<Prisma.servicing2UpsertWithWhereUniqueWithoutService2Input> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => servicing2UpdateWithoutService2InputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutService2InputSchema) ]),
  create: z.union([ z.lazy(() => servicing2CreateWithoutService2InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const servicing2UpdateWithWhereUniqueWithoutService2InputSchema: z.ZodType<Prisma.servicing2UpdateWithWhereUniqueWithoutService2Input> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateWithoutService2InputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutService2InputSchema) ]),
}).strict();

export const servicing2UpdateManyWithWhereWithoutService2InputSchema: z.ZodType<Prisma.servicing2UpdateManyWithWhereWithoutService2Input> = z.object({
  where: z.lazy(() => servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateManyMutationInputSchema),z.lazy(() => servicing2UncheckedUpdateManyWithoutService2InputSchema) ]),
}).strict();

export const familyCreateWithoutServicing1InputSchema: z.ZodType<Prisma.familyCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamilyInputSchema),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyUncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.familyUncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyCreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.familyCreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => familyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => familyCreateWithoutServicing1InputSchema),z.lazy(() => familyUncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const OrganizationCreateWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationCreateWithoutServicing1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const service1CreateWithoutServicing1InputSchema: z.ZodType<Prisma.service1CreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService1InputSchema),
  service2: z.lazy(() => service2CreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1UncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.service1UncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1CreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.service1CreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => service1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => service1CreateWithoutServicing1InputSchema),z.lazy(() => service1UncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const service2CreateWithoutServicing1InputSchema: z.ZodType<Prisma.service2CreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService2InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutService2InputSchema),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2UncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.service2UncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2CreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.service2CreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => service2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => service2CreateWithoutServicing1InputSchema),z.lazy(() => service2UncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const servicing2CreateWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2CreateWithoutServicing1Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing2InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing2InputSchema).optional()
}).strict();

export const servicing2UncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2UncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2CreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2CreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing2CreateWithoutServicing1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const servicing2CreateManyServicing1InputEnvelopeSchema: z.ZodType<Prisma.servicing2CreateManyServicing1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => servicing2CreateManyServicing1InputSchema),z.lazy(() => servicing2CreateManyServicing1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const familyUpsertWithoutServicing1InputSchema: z.ZodType<Prisma.familyUpsertWithoutServicing1Input> = z.object({
  update: z.union([ z.lazy(() => familyUpdateWithoutServicing1InputSchema),z.lazy(() => familyUncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => familyCreateWithoutServicing1InputSchema),z.lazy(() => familyUncheckedCreateWithoutServicing1InputSchema) ]),
  where: z.lazy(() => familyWhereInputSchema).optional()
}).strict();

export const familyUpdateToOneWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.familyUpdateToOneWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => familyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => familyUpdateWithoutServicing1InputSchema),z.lazy(() => familyUncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const familyUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.familyUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const familyUncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.familyUncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutServicing1Input> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing1InputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const service1UpsertWithoutServicing1InputSchema: z.ZodType<Prisma.service1UpsertWithoutServicing1Input> = z.object({
  update: z.union([ z.lazy(() => service1UpdateWithoutServicing1InputSchema),z.lazy(() => service1UncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => service1CreateWithoutServicing1InputSchema),z.lazy(() => service1UncheckedCreateWithoutServicing1InputSchema) ]),
  where: z.lazy(() => service1WhereInputSchema).optional()
}).strict();

export const service1UpdateToOneWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.service1UpdateToOneWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => service1WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => service1UpdateWithoutServicing1InputSchema),z.lazy(() => service1UncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const service1UpdateWithoutServicing1InputSchema: z.ZodType<Prisma.service1UpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService1NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const service1UncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.service1UncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const service2UpsertWithoutServicing1InputSchema: z.ZodType<Prisma.service2UpsertWithoutServicing1Input> = z.object({
  update: z.union([ z.lazy(() => service2UpdateWithoutServicing1InputSchema),z.lazy(() => service2UncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => service2CreateWithoutServicing1InputSchema),z.lazy(() => service2UncheckedCreateWithoutServicing1InputSchema) ]),
  where: z.lazy(() => service2WhereInputSchema).optional()
}).strict();

export const service2UpdateToOneWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.service2UpdateToOneWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => service2WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => service2UpdateWithoutServicing1InputSchema),z.lazy(() => service2UncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const service2UpdateWithoutServicing1InputSchema: z.ZodType<Prisma.service2UpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const service2UncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.service2UncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2UpsertWithWhereUniqueWithoutServicing1Input> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => servicing2UpdateWithoutServicing1InputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => servicing2CreateWithoutServicing1InputSchema),z.lazy(() => servicing2UncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2UpdateWithWhereUniqueWithoutServicing1Input> = z.object({
  where: z.lazy(() => servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateWithoutServicing1InputSchema),z.lazy(() => servicing2UncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const servicing2UpdateManyWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2UpdateManyWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => servicing2UpdateManyMutationInputSchema),z.lazy(() => servicing2UncheckedUpdateManyWithoutServicing1InputSchema) ]),
}).strict();

export const familyCreateWithoutServicing2InputSchema: z.ZodType<Prisma.familyCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamilyInputSchema),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyUncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.familyUncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const familyCreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.familyCreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => familyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => familyCreateWithoutServicing2InputSchema),z.lazy(() => familyUncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const OrganizationCreateWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationCreateWithoutServicing2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const service1CreateWithoutServicing2InputSchema: z.ZodType<Prisma.service1CreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService1InputSchema),
  service2: z.lazy(() => service2CreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1UncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.service1UncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const service1CreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.service1CreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => service1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => service1CreateWithoutServicing2InputSchema),z.lazy(() => service1UncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const service2CreateWithoutServicing2InputSchema: z.ZodType<Prisma.service2CreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService2InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutService2InputSchema),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2UncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.service2UncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const service2CreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.service2CreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => service2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => service2CreateWithoutServicing2InputSchema),z.lazy(() => service2UncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const servicing1CreateWithoutServicing2InputSchema: z.ZodType<Prisma.servicing1CreateWithoutServicing2Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => familyCreateNestedOneWithoutServicing1InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => service1CreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => service2CreateNestedOneWithoutServicing1InputSchema).optional()
}).strict();

export const servicing1UncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.servicing1UncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing1CreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.servicing1CreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => servicing1CreateWithoutServicing2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const familyUpsertWithoutServicing2InputSchema: z.ZodType<Prisma.familyUpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => familyUpdateWithoutServicing2InputSchema),z.lazy(() => familyUncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => familyCreateWithoutServicing2InputSchema),z.lazy(() => familyUncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => familyWhereInputSchema).optional()
}).strict();

export const familyUpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.familyUpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => familyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => familyUpdateWithoutServicing2InputSchema),z.lazy(() => familyUncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const familyUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.familyUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const familyUncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.familyUncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => templeUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const service1UpsertWithoutServicing2InputSchema: z.ZodType<Prisma.service1UpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => service1UpdateWithoutServicing2InputSchema),z.lazy(() => service1UncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => service1CreateWithoutServicing2InputSchema),z.lazy(() => service1UncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => service1WhereInputSchema).optional()
}).strict();

export const service1UpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.service1UpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => service1WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => service1UpdateWithoutServicing2InputSchema),z.lazy(() => service1UncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const service1UpdateWithoutServicing2InputSchema: z.ZodType<Prisma.service1UpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService1NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const service1UncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.service1UncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const service2UpsertWithoutServicing2InputSchema: z.ZodType<Prisma.service2UpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => service2UpdateWithoutServicing2InputSchema),z.lazy(() => service2UncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => service2CreateWithoutServicing2InputSchema),z.lazy(() => service2UncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => service2WhereInputSchema).optional()
}).strict();

export const service2UpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.service2UpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => service2WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => service2UpdateWithoutServicing2InputSchema),z.lazy(() => service2UncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const service2UpdateWithoutServicing2InputSchema: z.ZodType<Prisma.service2UpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const service2UncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.service2UncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const servicing1UpsertWithoutServicing2InputSchema: z.ZodType<Prisma.servicing1UpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => servicing1UpdateWithoutServicing2InputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => servicing1CreateWithoutServicing2InputSchema),z.lazy(() => servicing1UncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => servicing1WhereInputSchema).optional()
}).strict();

export const servicing1UpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.servicing1UpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => servicing1WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => servicing1UpdateWithoutServicing2InputSchema),z.lazy(() => servicing1UncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const servicing1UpdateWithoutServicing2InputSchema: z.ZodType<Prisma.servicing1UpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutTempleInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2CreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutTempleInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => familyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutTempleInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTempleInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutTempleInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTempleInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTempleInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutTempleInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTempleInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutTempleInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutTempleInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => buddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => familyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => god_nameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => member_classUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => mgyearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ExperimentRunCreateWithoutTrainedModelInputSchema: z.ZodType<Prisma.ExperimentRunCreateWithoutTrainedModelInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  anomalyEvents: z.lazy(() => anomaly_eventCreateNestedManyWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedCreateWithoutTrainedModelInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedCreateWithoutTrainedModelInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  anomalyEvents: z.lazy(() => anomaly_eventUncheckedCreateNestedManyWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunCreateOrConnectWithoutTrainedModelInputSchema: z.ZodType<Prisma.ExperimentRunCreateOrConnectWithoutTrainedModelInput> = z.object({
  where: z.lazy(() => ExperimentRunWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutTrainedModelInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutTrainedModelInputSchema) ]),
}).strict();

export const ExperimentRunUpsertWithoutTrainedModelInputSchema: z.ZodType<Prisma.ExperimentRunUpsertWithoutTrainedModelInput> = z.object({
  update: z.union([ z.lazy(() => ExperimentRunUpdateWithoutTrainedModelInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutTrainedModelInputSchema) ]),
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutTrainedModelInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutTrainedModelInputSchema) ]),
  where: z.lazy(() => ExperimentRunWhereInputSchema).optional()
}).strict();

export const ExperimentRunUpdateToOneWithWhereWithoutTrainedModelInputSchema: z.ZodType<Prisma.ExperimentRunUpdateToOneWithWhereWithoutTrainedModelInput> = z.object({
  where: z.lazy(() => ExperimentRunWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ExperimentRunUpdateWithoutTrainedModelInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutTrainedModelInputSchema) ]),
}).strict();

export const ExperimentRunUpdateWithoutTrainedModelInputSchema: z.ZodType<Prisma.ExperimentRunUpdateWithoutTrainedModelInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEvents: z.lazy(() => anomaly_eventUpdateManyWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedUpdateWithoutTrainedModelInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedUpdateWithoutTrainedModelInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEvents: z.lazy(() => anomaly_eventUncheckedUpdateManyWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const AccountCreateManyUserInputSchema: z.ZodType<Prisma.AccountCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AiChatCreateManyUserInputSchema: z.ZodType<Prisma.AiChatCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateManyUserInputSchema: z.ZodType<Prisma.InvitationCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date()
}).strict();

export const MemberCreateManyUserInputSchema: z.ZodType<Prisma.MemberCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const PasskeyCreateManyUserInputSchema: z.ZodType<Prisma.PasskeyCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PurchaseCreateManyUserInputSchema: z.ZodType<Prisma.PurchaseCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const TwoFactorCreateManyUserInputSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUpdateWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputSchema).optional()
}).strict();

export const AiChatUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUpdateWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasskeyUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PurchaseUpdateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputSchema).optional()
}).strict();

export const PurchaseUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUpdateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateManyOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const BankAccountCreateManyOrganizationInputSchema: z.ZodType<Prisma.BankAccountCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable()
}).strict();

export const borrow_godCreateManyOrganizationInputSchema: z.ZodType<Prisma.borrow_godCreateManyOrganizationInput> = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const buddhistCreateManyOrganizationInputSchema: z.ZodType<Prisma.buddhistCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const CustomerCreateManyOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const ExpenseCreateManyOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmId: z.string().optional().nullable()
}).strict();

export const familyCreateManyOrganizationInputSchema: z.ZodType<Prisma.familyCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const family_memberCreateManyOrganizationInputSchema: z.ZodType<Prisma.family_memberCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  familyId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const god_nameCreateManyOrganizationInputSchema: z.ZodType<Prisma.god_nameCreateManyOrganizationInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const InvitationCreateManyOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const MemberCreateManyOrganizationInputSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const member_classCreateManyOrganizationInputSchema: z.ZodType<Prisma.member_classCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const mgyearCreateManyOrganizationInputSchema: z.ZodType<Prisma.mgyearCreateManyOrganizationInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const ProductCreateManyOrganizationInputSchema: z.ZodType<Prisma.ProductCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string()
}).strict();

export const ProfitSharingCreateManyOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const PurchaseCreateManyOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RelationshipManagerCreateManyOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable()
}).strict();

export const service1CreateManyOrganizationInputSchema: z.ZodType<Prisma.service1CreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const service2CreateManyOrganizationInputSchema: z.ZodType<Prisma.service2CreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing1CreateManyOrganizationInputSchema: z.ZodType<Prisma.servicing1CreateManyOrganizationInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2CreateManyOrganizationInputSchema: z.ZodType<Prisma.servicing2CreateManyOrganizationInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const templeCreateManyOrganizationInputSchema: z.ZodType<Prisma.templeCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const AiChatUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputSchema).optional()
}).strict();

export const AiChatUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BankAccountUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneWithoutBankAccountsNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const borrow_godUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  god_name: z.lazy(() => god_nameUpdateOneRequiredWithoutBorrow_godNestedInputSchema).optional()
}).strict();

export const borrow_godUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  godNameId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const borrow_godUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.borrow_godUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  godNameId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const buddhistUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const buddhistUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const buddhistUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.buddhistUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rm: z.lazy(() => RelationshipManagerUpdateOneWithoutExpensesNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const familyUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.familyUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family_member: z.lazy(() => family_memberUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const familyUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.familyUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family_member: z.lazy(() => family_memberUncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const familyUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.familyUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const family_memberUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutFamily_memberNestedInputSchema).optional()
}).strict();

export const family_memberUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const family_memberUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.family_memberUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const god_nameUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  borrow_god: z.lazy(() => borrow_godUpdateManyWithoutGod_nameNestedInputSchema).optional()
}).strict();

export const god_nameUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  borrow_god: z.lazy(() => borrow_godUncheckedUpdateManyWithoutGod_nameNestedInputSchema).optional()
}).strict();

export const god_nameUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.god_nameUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const member_classUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const member_classUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const member_classUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.member_classUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mgyearUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mgyearUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const mgyearUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.mgyearUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountUpdateOneWithoutProfitSharingNestedInputSchema).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PurchaseUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputSchema).optional()
}).strict();

export const PurchaseUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const service1UpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.service1UpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => service2UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const service1UncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.service1UncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => service2UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const service1UncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.service1UncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const service2UpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.service2UpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const service2UncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.service2UncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const service2UncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.service2UncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing1UpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1UpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2UpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const servicing2UncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const templeUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.templeUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const templeUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.templeUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const templeUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.templeUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerCreateManyFinder1InputSchema: z.ZodType<Prisma.CustomerCreateManyFinder1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const CustomerCreateManyFinder2InputSchema: z.ZodType<Prisma.CustomerCreateManyFinder2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const CustomerCreateManyRm1InputSchema: z.ZodType<Prisma.CustomerCreateManyRm1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const CustomerCreateManyRm2InputSchema: z.ZodType<Prisma.CustomerCreateManyRm2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const ExpenseCreateManyRmInputSchema: z.ZodType<Prisma.ExpenseCreateManyRmInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const CustomerUpdateWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUpdateWithoutFinder1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutFinder1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutFinder1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUpdateWithoutFinder2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutFinder2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutFinder2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUpdateWithoutRm1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutRm1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutRm1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUpdateWithoutRm2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutRm2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutRm2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUpdateWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutRmInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutRmInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutRmInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionCreateManyCustomerInputSchema: z.ZodType<Prisma.AssetTransactionCreateManyCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const BankAccountCreateManyCustomerInputSchema: z.ZodType<Prisma.BankAccountCreateManyCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfitSharingCreateManyCustomerInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const AssetTransactionUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionUncheckedUpdateManyWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateManyWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BankAccountUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBankAccountsNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateManyWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountUpdateOneWithoutProfitSharingNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingCreateManyBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyBankAccountInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingUpdateWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithoutBankAccountInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateWithoutBankAccountInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutBankAccountInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingCreateManyProductInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyProductInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingUpdateWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountUpdateOneWithoutProfitSharingNestedInputSchema).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const anomaly_eventCreateManyExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventCreateManyExperimentRunInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const anomaly_eventUpdateWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventUpdateWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event_label_link: z.lazy(() => event_label_linkUpdateManyWithoutAnomaly_eventNestedInputSchema).optional()
}).strict();

export const anomaly_eventUncheckedUpdateWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedUpdateWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event_label_link: z.lazy(() => event_label_linkUncheckedUpdateManyWithoutAnomaly_eventNestedInputSchema).optional()
}).strict();

export const anomaly_eventUncheckedUpdateManyWithoutExperimentRunInputSchema: z.ZodType<Prisma.anomaly_eventUncheckedUpdateManyWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const event_label_linkCreateManyAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkCreateManyAnomaly_eventInput> = z.object({
  id: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const event_label_linkUpdateWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkUpdateWithoutAnomaly_eventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomaly_label: z.lazy(() => anomaly_labelUpdateOneRequiredWithoutEvent_label_linkNestedInputSchema).optional()
}).strict();

export const event_label_linkUncheckedUpdateWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkUncheckedUpdateWithoutAnomaly_eventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  labelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const event_label_linkUncheckedUpdateManyWithoutAnomaly_eventInputSchema: z.ZodType<Prisma.event_label_linkUncheckedUpdateManyWithoutAnomaly_eventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  labelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const event_label_linkCreateManyAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkCreateManyAnomaly_labelInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const event_label_linkUpdateWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkUpdateWithoutAnomaly_labelInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomaly_event: z.lazy(() => anomaly_eventUpdateOneRequiredWithoutEvent_label_linkNestedInputSchema).optional()
}).strict();

export const event_label_linkUncheckedUpdateWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkUncheckedUpdateWithoutAnomaly_labelInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const event_label_linkUncheckedUpdateManyWithoutAnomaly_labelInputSchema: z.ZodType<Prisma.event_label_linkUncheckedUpdateManyWithoutAnomaly_labelInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const family_memberCreateManyFamilyInputSchema: z.ZodType<Prisma.family_memberCreateManyFamilyInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing1CreateManyFamilyInputSchema: z.ZodType<Prisma.servicing1CreateManyFamilyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2CreateManyFamilyInputSchema: z.ZodType<Prisma.servicing2CreateManyFamilyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const family_memberUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamily_memberNestedInputSchema).optional()
}).strict();

export const family_memberUncheckedUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberUncheckedUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const family_memberUncheckedUpdateManyWithoutFamilyInputSchema: z.ZodType<Prisma.family_memberUncheckedUpdateManyWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing1UpdateWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1UpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateManyWithoutFamilyInputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateManyWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UpdateWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2UpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const servicing2UncheckedUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutFamilyInputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const borrow_godCreateManyGod_nameInputSchema: z.ZodType<Prisma.borrow_godCreateManyGod_nameInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const borrow_godUpdateWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godUpdateWithoutGod_nameInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBorrow_godNestedInputSchema).optional()
}).strict();

export const borrow_godUncheckedUpdateWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godUncheckedUpdateWithoutGod_nameInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const borrow_godUncheckedUpdateManyWithoutGod_nameInputSchema: z.ZodType<Prisma.borrow_godUncheckedUpdateManyWithoutGod_nameInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const service2CreateManyService1InputSchema: z.ZodType<Prisma.service2CreateManyService1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing1CreateManyService1InputSchema: z.ZodType<Prisma.servicing1CreateManyService1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2CreateManyService1InputSchema: z.ZodType<Prisma.servicing2CreateManyService1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const service2UpdateWithoutService1InputSchema: z.ZodType<Prisma.service2UpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const service2UncheckedUpdateWithoutService1InputSchema: z.ZodType<Prisma.service2UncheckedUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => servicing1UncheckedUpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const service2UncheckedUpdateManyWithoutService1InputSchema: z.ZodType<Prisma.service2UncheckedUpdateManyWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing1UpdateWithoutService1InputSchema: z.ZodType<Prisma.servicing1UpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateWithoutService1InputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateManyWithoutService1InputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateManyWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UpdateWithoutService1InputSchema: z.ZodType<Prisma.servicing2UpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const servicing2UncheckedUpdateWithoutService1InputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutService1InputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing1CreateManyService2InputSchema: z.ZodType<Prisma.servicing1CreateManyService2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2CreateManyService2InputSchema: z.ZodType<Prisma.servicing2CreateManyService2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing1UpdateWithoutService2InputSchema: z.ZodType<Prisma.servicing1UpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateWithoutService2InputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const servicing1UncheckedUpdateManyWithoutService2InputSchema: z.ZodType<Prisma.servicing1UncheckedUpdateManyWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UpdateWithoutService2InputSchema: z.ZodType<Prisma.servicing2UpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const servicing2UncheckedUpdateWithoutService2InputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutService2InputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2CreateManyServicing1InputSchema: z.ZodType<Prisma.servicing2CreateManyServicing1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const servicing2UpdateWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2UpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => familyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => service2UpdateOneWithoutServicing2NestedInputSchema).optional()
}).strict();

export const servicing2UncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const servicing2UncheckedUpdateManyWithoutServicing1InputSchema: z.ZodType<Prisma.servicing2UncheckedUpdateManyWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const UserFindFirstArgsSchema: z.ZodType<Omit<Prisma.UserFindFirstArgs, "select" | "include">> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.UserFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Omit<Prisma.UserFindManyArgs, "select" | "include">> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Omit<Prisma.UserFindUniqueArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.UserFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Omit<Prisma.SessionFindFirstArgs, "select" | "include">> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.SessionFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Omit<Prisma.SessionFindManyArgs, "select" | "include">> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Omit<Prisma.SessionFindUniqueArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.SessionFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const AccountFindFirstArgsSchema: z.ZodType<Omit<Prisma.AccountFindFirstArgs, "select" | "include">> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AccountFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindManyArgsSchema: z.ZodType<Omit<Prisma.AccountFindManyArgs, "select" | "include">> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AccountFindUniqueArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AccountFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindFirstArgsSchema: z.ZodType<Omit<Prisma.VerificationFindFirstArgs, "select">> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.VerificationFindFirstOrThrowArgs, "select">> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindManyArgsSchema: z.ZodType<Omit<Prisma.VerificationFindManyArgs, "select">> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationAggregateArgsSchema: z.ZodType<Prisma.VerificationAggregateArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationGroupByArgsSchema: z.ZodType<Prisma.VerificationGroupByArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithAggregationInputSchema.array(),VerificationOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationScalarFieldEnumSchema.array(),
  having: VerificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationFindUniqueArgsSchema: z.ZodType<Omit<Prisma.VerificationFindUniqueArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.VerificationFindUniqueOrThrowArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const PasskeyFindFirstArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindFirstArgs, "select" | "include">> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasskeyScalarFieldEnumSchema,PasskeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasskeyFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasskeyScalarFieldEnumSchema,PasskeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasskeyFindManyArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindManyArgs, "select" | "include">> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasskeyScalarFieldEnumSchema,PasskeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasskeyAggregateArgsSchema: z.ZodType<Prisma.PasskeyAggregateArgs> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasskeyGroupByArgsSchema: z.ZodType<Prisma.PasskeyGroupByArgs> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithAggregationInputSchema.array(),PasskeyOrderByWithAggregationInputSchema ]).optional(),
  by: PasskeyScalarFieldEnumSchema.array(),
  having: PasskeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasskeyFindUniqueArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindUniqueArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const PasskeyFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorFindFirstArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindFirstArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorFindManyArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindManyArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorAggregateArgsSchema: z.ZodType<Prisma.TwoFactorAggregateArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TwoFactorGroupByArgsSchema: z.ZodType<Prisma.TwoFactorGroupByArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithAggregationInputSchema.array(),TwoFactorOrderByWithAggregationInputSchema ]).optional(),
  by: TwoFactorScalarFieldEnumSchema.array(),
  having: TwoFactorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TwoFactorFindUniqueArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindUniqueArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindFirstArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindFirstArgs, "select" | "include">> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindManyArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindManyArgs, "select" | "include">> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFindUniqueArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindUniqueArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const RelationshipManagerFindFirstArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindFirstArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithRelationInputSchema.array(),RelationshipManagerOrderByWithRelationInputSchema ]).optional(),
  cursor: RelationshipManagerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RelationshipManagerScalarFieldEnumSchema,RelationshipManagerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RelationshipManagerFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithRelationInputSchema.array(),RelationshipManagerOrderByWithRelationInputSchema ]).optional(),
  cursor: RelationshipManagerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RelationshipManagerScalarFieldEnumSchema,RelationshipManagerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RelationshipManagerFindManyArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindManyArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithRelationInputSchema.array(),RelationshipManagerOrderByWithRelationInputSchema ]).optional(),
  cursor: RelationshipManagerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RelationshipManagerScalarFieldEnumSchema,RelationshipManagerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RelationshipManagerAggregateArgsSchema: z.ZodType<Prisma.RelationshipManagerAggregateArgs> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithRelationInputSchema.array(),RelationshipManagerOrderByWithRelationInputSchema ]).optional(),
  cursor: RelationshipManagerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RelationshipManagerGroupByArgsSchema: z.ZodType<Prisma.RelationshipManagerGroupByArgs> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithAggregationInputSchema.array(),RelationshipManagerOrderByWithAggregationInputSchema ]).optional(),
  by: RelationshipManagerScalarFieldEnumSchema.array(),
  having: RelationshipManagerScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RelationshipManagerFindUniqueArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindUniqueArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereUniqueInputSchema,
}).strict() ;

export const RelationshipManagerFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereUniqueInputSchema,
}).strict() ;

export const CustomerFindFirstArgsSchema: z.ZodType<Omit<Prisma.CustomerFindFirstArgs, "select" | "include">> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerScalarFieldEnumSchema,CustomerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.CustomerFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerScalarFieldEnumSchema,CustomerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerFindManyArgsSchema: z.ZodType<Omit<Prisma.CustomerFindManyArgs, "select" | "include">> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerScalarFieldEnumSchema,CustomerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerAggregateArgsSchema: z.ZodType<Prisma.CustomerAggregateArgs> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerGroupByArgsSchema: z.ZodType<Prisma.CustomerGroupByArgs> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithAggregationInputSchema.array(),CustomerOrderByWithAggregationInputSchema ]).optional(),
  by: CustomerScalarFieldEnumSchema.array(),
  having: CustomerScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerFindUniqueArgsSchema: z.ZodType<Omit<Prisma.CustomerFindUniqueArgs, "select" | "include">> = z.object({
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.CustomerFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const MemberFindFirstArgsSchema: z.ZodType<Omit<Prisma.MemberFindFirstArgs, "select" | "include">> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.MemberFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberFindManyArgsSchema: z.ZodType<Omit<Prisma.MemberFindManyArgs, "select" | "include">> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberAggregateArgsSchema: z.ZodType<Prisma.MemberAggregateArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberGroupByArgsSchema: z.ZodType<Prisma.MemberGroupByArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithAggregationInputSchema.array(),MemberOrderByWithAggregationInputSchema ]).optional(),
  by: MemberScalarFieldEnumSchema.array(),
  having: MemberScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberFindUniqueArgsSchema: z.ZodType<Omit<Prisma.MemberFindUniqueArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.MemberFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindFirstArgsSchema: z.ZodType<Omit<Prisma.InvitationFindFirstArgs, "select" | "include">> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.InvitationFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindManyArgsSchema: z.ZodType<Omit<Prisma.InvitationFindManyArgs, "select" | "include">> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationAggregateArgsSchema: z.ZodType<Prisma.InvitationAggregateArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationGroupByArgsSchema: z.ZodType<Prisma.InvitationGroupByArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithAggregationInputSchema.array(),InvitationOrderByWithAggregationInputSchema ]).optional(),
  by: InvitationScalarFieldEnumSchema.array(),
  having: InvitationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationFindUniqueArgsSchema: z.ZodType<Omit<Prisma.InvitationFindUniqueArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.InvitationFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const PurchaseFindFirstArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindFirstArgs, "select" | "include">> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurchaseScalarFieldEnumSchema,PurchaseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurchaseFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurchaseScalarFieldEnumSchema,PurchaseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurchaseFindManyArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindManyArgs, "select" | "include">> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurchaseScalarFieldEnumSchema,PurchaseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurchaseAggregateArgsSchema: z.ZodType<Prisma.PurchaseAggregateArgs> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PurchaseGroupByArgsSchema: z.ZodType<Prisma.PurchaseGroupByArgs> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithAggregationInputSchema.array(),PurchaseOrderByWithAggregationInputSchema ]).optional(),
  by: PurchaseScalarFieldEnumSchema.array(),
  having: PurchaseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PurchaseFindUniqueArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindUniqueArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const PurchaseFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const AiChatFindFirstArgsSchema: z.ZodType<Omit<Prisma.AiChatFindFirstArgs, "select" | "include">> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AiChatScalarFieldEnumSchema,AiChatScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AiChatFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AiChatFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AiChatScalarFieldEnumSchema,AiChatScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AiChatFindManyArgsSchema: z.ZodType<Omit<Prisma.AiChatFindManyArgs, "select" | "include">> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AiChatScalarFieldEnumSchema,AiChatScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AiChatAggregateArgsSchema: z.ZodType<Prisma.AiChatAggregateArgs> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AiChatGroupByArgsSchema: z.ZodType<Prisma.AiChatGroupByArgs> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithAggregationInputSchema.array(),AiChatOrderByWithAggregationInputSchema ]).optional(),
  by: AiChatScalarFieldEnumSchema.array(),
  having: AiChatScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AiChatFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AiChatFindUniqueArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const AiChatFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AiChatFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const BankAccountFindFirstArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindFirstArgs, "select" | "include">> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithRelationInputSchema.array(),BankAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: BankAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BankAccountScalarFieldEnumSchema,BankAccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BankAccountFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithRelationInputSchema.array(),BankAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: BankAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BankAccountScalarFieldEnumSchema,BankAccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BankAccountFindManyArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindManyArgs, "select" | "include">> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithRelationInputSchema.array(),BankAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: BankAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BankAccountScalarFieldEnumSchema,BankAccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BankAccountAggregateArgsSchema: z.ZodType<Prisma.BankAccountAggregateArgs> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithRelationInputSchema.array(),BankAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: BankAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BankAccountGroupByArgsSchema: z.ZodType<Prisma.BankAccountGroupByArgs> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithAggregationInputSchema.array(),BankAccountOrderByWithAggregationInputSchema ]).optional(),
  by: BankAccountScalarFieldEnumSchema.array(),
  having: BankAccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BankAccountFindUniqueArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindUniqueArgs, "select" | "include">> = z.object({
  where: BankAccountWhereUniqueInputSchema,
}).strict() ;

export const BankAccountFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: BankAccountWhereUniqueInputSchema,
}).strict() ;

export const ExpenseFindFirstArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindFirstArgs, "select" | "include">> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseFindManyArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindManyArgs, "select" | "include">> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseAggregateArgsSchema: z.ZodType<Prisma.ExpenseAggregateArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseGroupByArgsSchema: z.ZodType<Prisma.ExpenseGroupByArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithAggregationInputSchema.array(),ExpenseOrderByWithAggregationInputSchema ]).optional(),
  by: ExpenseScalarFieldEnumSchema.array(),
  having: ExpenseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindUniqueArgs, "select" | "include">> = z.object({
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ProductFindFirstArgsSchema: z.ZodType<Omit<Prisma.ProductFindFirstArgs, "select" | "include">> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProductFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindManyArgsSchema: z.ZodType<Omit<Prisma.ProductFindManyArgs, "select" | "include">> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductAggregateArgsSchema: z.ZodType<Prisma.ProductAggregateArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductGroupByArgsSchema: z.ZodType<Prisma.ProductGroupByArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithAggregationInputSchema.array(),ProductOrderByWithAggregationInputSchema ]).optional(),
  by: ProductScalarFieldEnumSchema.array(),
  having: ProductScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ProductFindUniqueArgs, "select" | "include">> = z.object({
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProductFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProfitSharingFindFirstArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindFirstArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithRelationInputSchema.array(),ProfitSharingOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfitSharingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfitSharingScalarFieldEnumSchema,ProfitSharingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfitSharingFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithRelationInputSchema.array(),ProfitSharingOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfitSharingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfitSharingScalarFieldEnumSchema,ProfitSharingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfitSharingFindManyArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindManyArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithRelationInputSchema.array(),ProfitSharingOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfitSharingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfitSharingScalarFieldEnumSchema,ProfitSharingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfitSharingAggregateArgsSchema: z.ZodType<Prisma.ProfitSharingAggregateArgs> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithRelationInputSchema.array(),ProfitSharingOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfitSharingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfitSharingGroupByArgsSchema: z.ZodType<Prisma.ProfitSharingGroupByArgs> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithAggregationInputSchema.array(),ProfitSharingOrderByWithAggregationInputSchema ]).optional(),
  by: ProfitSharingScalarFieldEnumSchema.array(),
  having: ProfitSharingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfitSharingFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindUniqueArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereUniqueInputSchema,
}).strict() ;

export const ProfitSharingFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereUniqueInputSchema,
}).strict() ;

export const AssetTransactionFindFirstArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindFirstArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithRelationInputSchema.array(),AssetTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: AssetTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AssetTransactionScalarFieldEnumSchema,AssetTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AssetTransactionFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithRelationInputSchema.array(),AssetTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: AssetTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AssetTransactionScalarFieldEnumSchema,AssetTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AssetTransactionFindManyArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindManyArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithRelationInputSchema.array(),AssetTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: AssetTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AssetTransactionScalarFieldEnumSchema,AssetTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AssetTransactionAggregateArgsSchema: z.ZodType<Prisma.AssetTransactionAggregateArgs> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithRelationInputSchema.array(),AssetTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: AssetTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AssetTransactionGroupByArgsSchema: z.ZodType<Prisma.AssetTransactionGroupByArgs> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithAggregationInputSchema.array(),AssetTransactionOrderByWithAggregationInputSchema ]).optional(),
  by: AssetTransactionScalarFieldEnumSchema.array(),
  having: AssetTransactionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AssetTransactionFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindUniqueArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereUniqueInputSchema,
}).strict() ;

export const AssetTransactionFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereUniqueInputSchema,
}).strict() ;

export const ammeterFindFirstArgsSchema: z.ZodType<Omit<Prisma.ammeterFindFirstArgs, "select">> = z.object({
  where: ammeterWhereInputSchema.optional(),
  orderBy: z.union([ ammeterOrderByWithRelationInputSchema.array(),ammeterOrderByWithRelationInputSchema ]).optional(),
  cursor: ammeterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmmeterScalarFieldEnumSchema,AmmeterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ammeterFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ammeterFindFirstOrThrowArgs, "select">> = z.object({
  where: ammeterWhereInputSchema.optional(),
  orderBy: z.union([ ammeterOrderByWithRelationInputSchema.array(),ammeterOrderByWithRelationInputSchema ]).optional(),
  cursor: ammeterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmmeterScalarFieldEnumSchema,AmmeterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ammeterFindManyArgsSchema: z.ZodType<Omit<Prisma.ammeterFindManyArgs, "select">> = z.object({
  where: ammeterWhereInputSchema.optional(),
  orderBy: z.union([ ammeterOrderByWithRelationInputSchema.array(),ammeterOrderByWithRelationInputSchema ]).optional(),
  cursor: ammeterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmmeterScalarFieldEnumSchema,AmmeterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ammeterAggregateArgsSchema: z.ZodType<Prisma.ammeterAggregateArgs> = z.object({
  where: ammeterWhereInputSchema.optional(),
  orderBy: z.union([ ammeterOrderByWithRelationInputSchema.array(),ammeterOrderByWithRelationInputSchema ]).optional(),
  cursor: ammeterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ammeterGroupByArgsSchema: z.ZodType<Prisma.ammeterGroupByArgs> = z.object({
  where: ammeterWhereInputSchema.optional(),
  orderBy: z.union([ ammeterOrderByWithAggregationInputSchema.array(),ammeterOrderByWithAggregationInputSchema ]).optional(),
  by: AmmeterScalarFieldEnumSchema.array(),
  having: ammeterScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ammeterFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ammeterFindUniqueArgs, "select">> = z.object({
  where: ammeterWhereUniqueInputSchema,
}).strict() ;

export const ammeterFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ammeterFindUniqueOrThrowArgs, "select">> = z.object({
  where: ammeterWhereUniqueInputSchema,
}).strict() ;

export const ammeter_logFindFirstArgsSchema: z.ZodType<Omit<Prisma.ammeter_logFindFirstArgs, "select">> = z.object({
  where: ammeter_logWhereInputSchema.optional(),
  orderBy: z.union([ ammeter_logOrderByWithRelationInputSchema.array(),ammeter_logOrderByWithRelationInputSchema ]).optional(),
  cursor: ammeter_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Ammeter_logScalarFieldEnumSchema,Ammeter_logScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ammeter_logFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ammeter_logFindFirstOrThrowArgs, "select">> = z.object({
  where: ammeter_logWhereInputSchema.optional(),
  orderBy: z.union([ ammeter_logOrderByWithRelationInputSchema.array(),ammeter_logOrderByWithRelationInputSchema ]).optional(),
  cursor: ammeter_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Ammeter_logScalarFieldEnumSchema,Ammeter_logScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ammeter_logFindManyArgsSchema: z.ZodType<Omit<Prisma.ammeter_logFindManyArgs, "select">> = z.object({
  where: ammeter_logWhereInputSchema.optional(),
  orderBy: z.union([ ammeter_logOrderByWithRelationInputSchema.array(),ammeter_logOrderByWithRelationInputSchema ]).optional(),
  cursor: ammeter_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Ammeter_logScalarFieldEnumSchema,Ammeter_logScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ammeter_logAggregateArgsSchema: z.ZodType<Prisma.ammeter_logAggregateArgs> = z.object({
  where: ammeter_logWhereInputSchema.optional(),
  orderBy: z.union([ ammeter_logOrderByWithRelationInputSchema.array(),ammeter_logOrderByWithRelationInputSchema ]).optional(),
  cursor: ammeter_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ammeter_logGroupByArgsSchema: z.ZodType<Prisma.ammeter_logGroupByArgs> = z.object({
  where: ammeter_logWhereInputSchema.optional(),
  orderBy: z.union([ ammeter_logOrderByWithAggregationInputSchema.array(),ammeter_logOrderByWithAggregationInputSchema ]).optional(),
  by: Ammeter_logScalarFieldEnumSchema.array(),
  having: ammeter_logScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ammeter_logFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ammeter_logFindUniqueArgs, "select">> = z.object({
  where: ammeter_logWhereUniqueInputSchema,
}).strict() ;

export const ammeter_logFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ammeter_logFindUniqueOrThrowArgs, "select">> = z.object({
  where: ammeter_logWhereUniqueInputSchema,
}).strict() ;

export const ExperimentRunFindFirstArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindFirstArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithRelationInputSchema.array(),ExperimentRunOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExperimentRunScalarFieldEnumSchema,ExperimentRunScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExperimentRunFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithRelationInputSchema.array(),ExperimentRunOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExperimentRunScalarFieldEnumSchema,ExperimentRunScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExperimentRunFindManyArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindManyArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithRelationInputSchema.array(),ExperimentRunOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExperimentRunScalarFieldEnumSchema,ExperimentRunScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExperimentRunAggregateArgsSchema: z.ZodType<Prisma.ExperimentRunAggregateArgs> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithRelationInputSchema.array(),ExperimentRunOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExperimentRunGroupByArgsSchema: z.ZodType<Prisma.ExperimentRunGroupByArgs> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithAggregationInputSchema.array(),ExperimentRunOrderByWithAggregationInputSchema ]).optional(),
  by: ExperimentRunScalarFieldEnumSchema.array(),
  having: ExperimentRunScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExperimentRunFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindUniqueArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereUniqueInputSchema,
}).strict() ;

export const ExperimentRunFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereUniqueInputSchema,
}).strict() ;

export const anomaly_eventFindFirstArgsSchema: z.ZodType<Omit<Prisma.anomaly_eventFindFirstArgs, "select" | "include">> = z.object({
  where: anomaly_eventWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_eventOrderByWithRelationInputSchema.array(),anomaly_eventOrderByWithRelationInputSchema ]).optional(),
  cursor: anomaly_eventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Anomaly_eventScalarFieldEnumSchema,Anomaly_eventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const anomaly_eventFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.anomaly_eventFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: anomaly_eventWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_eventOrderByWithRelationInputSchema.array(),anomaly_eventOrderByWithRelationInputSchema ]).optional(),
  cursor: anomaly_eventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Anomaly_eventScalarFieldEnumSchema,Anomaly_eventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const anomaly_eventFindManyArgsSchema: z.ZodType<Omit<Prisma.anomaly_eventFindManyArgs, "select" | "include">> = z.object({
  where: anomaly_eventWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_eventOrderByWithRelationInputSchema.array(),anomaly_eventOrderByWithRelationInputSchema ]).optional(),
  cursor: anomaly_eventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Anomaly_eventScalarFieldEnumSchema,Anomaly_eventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const anomaly_eventAggregateArgsSchema: z.ZodType<Prisma.anomaly_eventAggregateArgs> = z.object({
  where: anomaly_eventWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_eventOrderByWithRelationInputSchema.array(),anomaly_eventOrderByWithRelationInputSchema ]).optional(),
  cursor: anomaly_eventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const anomaly_eventGroupByArgsSchema: z.ZodType<Prisma.anomaly_eventGroupByArgs> = z.object({
  where: anomaly_eventWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_eventOrderByWithAggregationInputSchema.array(),anomaly_eventOrderByWithAggregationInputSchema ]).optional(),
  by: Anomaly_eventScalarFieldEnumSchema.array(),
  having: anomaly_eventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const anomaly_eventFindUniqueArgsSchema: z.ZodType<Omit<Prisma.anomaly_eventFindUniqueArgs, "select" | "include">> = z.object({
  where: anomaly_eventWhereUniqueInputSchema,
}).strict() ;

export const anomaly_eventFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.anomaly_eventFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: anomaly_eventWhereUniqueInputSchema,
}).strict() ;

export const anomaly_labelFindFirstArgsSchema: z.ZodType<Omit<Prisma.anomaly_labelFindFirstArgs, "select" | "include">> = z.object({
  where: anomaly_labelWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_labelOrderByWithRelationInputSchema.array(),anomaly_labelOrderByWithRelationInputSchema ]).optional(),
  cursor: anomaly_labelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Anomaly_labelScalarFieldEnumSchema,Anomaly_labelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const anomaly_labelFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.anomaly_labelFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: anomaly_labelWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_labelOrderByWithRelationInputSchema.array(),anomaly_labelOrderByWithRelationInputSchema ]).optional(),
  cursor: anomaly_labelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Anomaly_labelScalarFieldEnumSchema,Anomaly_labelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const anomaly_labelFindManyArgsSchema: z.ZodType<Omit<Prisma.anomaly_labelFindManyArgs, "select" | "include">> = z.object({
  where: anomaly_labelWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_labelOrderByWithRelationInputSchema.array(),anomaly_labelOrderByWithRelationInputSchema ]).optional(),
  cursor: anomaly_labelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Anomaly_labelScalarFieldEnumSchema,Anomaly_labelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const anomaly_labelAggregateArgsSchema: z.ZodType<Prisma.anomaly_labelAggregateArgs> = z.object({
  where: anomaly_labelWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_labelOrderByWithRelationInputSchema.array(),anomaly_labelOrderByWithRelationInputSchema ]).optional(),
  cursor: anomaly_labelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const anomaly_labelGroupByArgsSchema: z.ZodType<Prisma.anomaly_labelGroupByArgs> = z.object({
  where: anomaly_labelWhereInputSchema.optional(),
  orderBy: z.union([ anomaly_labelOrderByWithAggregationInputSchema.array(),anomaly_labelOrderByWithAggregationInputSchema ]).optional(),
  by: Anomaly_labelScalarFieldEnumSchema.array(),
  having: anomaly_labelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const anomaly_labelFindUniqueArgsSchema: z.ZodType<Omit<Prisma.anomaly_labelFindUniqueArgs, "select" | "include">> = z.object({
  where: anomaly_labelWhereUniqueInputSchema,
}).strict() ;

export const anomaly_labelFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.anomaly_labelFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: anomaly_labelWhereUniqueInputSchema,
}).strict() ;

export const borrow_godFindFirstArgsSchema: z.ZodType<Omit<Prisma.borrow_godFindFirstArgs, "select" | "include">> = z.object({
  where: borrow_godWhereInputSchema.optional(),
  orderBy: z.union([ borrow_godOrderByWithRelationInputSchema.array(),borrow_godOrderByWithRelationInputSchema ]).optional(),
  cursor: borrow_godWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Borrow_godScalarFieldEnumSchema,Borrow_godScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const borrow_godFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.borrow_godFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: borrow_godWhereInputSchema.optional(),
  orderBy: z.union([ borrow_godOrderByWithRelationInputSchema.array(),borrow_godOrderByWithRelationInputSchema ]).optional(),
  cursor: borrow_godWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Borrow_godScalarFieldEnumSchema,Borrow_godScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const borrow_godFindManyArgsSchema: z.ZodType<Omit<Prisma.borrow_godFindManyArgs, "select" | "include">> = z.object({
  where: borrow_godWhereInputSchema.optional(),
  orderBy: z.union([ borrow_godOrderByWithRelationInputSchema.array(),borrow_godOrderByWithRelationInputSchema ]).optional(),
  cursor: borrow_godWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Borrow_godScalarFieldEnumSchema,Borrow_godScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const borrow_godAggregateArgsSchema: z.ZodType<Prisma.borrow_godAggregateArgs> = z.object({
  where: borrow_godWhereInputSchema.optional(),
  orderBy: z.union([ borrow_godOrderByWithRelationInputSchema.array(),borrow_godOrderByWithRelationInputSchema ]).optional(),
  cursor: borrow_godWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const borrow_godGroupByArgsSchema: z.ZodType<Prisma.borrow_godGroupByArgs> = z.object({
  where: borrow_godWhereInputSchema.optional(),
  orderBy: z.union([ borrow_godOrderByWithAggregationInputSchema.array(),borrow_godOrderByWithAggregationInputSchema ]).optional(),
  by: Borrow_godScalarFieldEnumSchema.array(),
  having: borrow_godScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const borrow_godFindUniqueArgsSchema: z.ZodType<Omit<Prisma.borrow_godFindUniqueArgs, "select" | "include">> = z.object({
  where: borrow_godWhereUniqueInputSchema,
}).strict() ;

export const borrow_godFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.borrow_godFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: borrow_godWhereUniqueInputSchema,
}).strict() ;

export const buddhistFindFirstArgsSchema: z.ZodType<Omit<Prisma.buddhistFindFirstArgs, "select" | "include">> = z.object({
  where: buddhistWhereInputSchema.optional(),
  orderBy: z.union([ buddhistOrderByWithRelationInputSchema.array(),buddhistOrderByWithRelationInputSchema ]).optional(),
  cursor: buddhistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BuddhistScalarFieldEnumSchema,BuddhistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const buddhistFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.buddhistFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: buddhistWhereInputSchema.optional(),
  orderBy: z.union([ buddhistOrderByWithRelationInputSchema.array(),buddhistOrderByWithRelationInputSchema ]).optional(),
  cursor: buddhistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BuddhistScalarFieldEnumSchema,BuddhistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const buddhistFindManyArgsSchema: z.ZodType<Omit<Prisma.buddhistFindManyArgs, "select" | "include">> = z.object({
  where: buddhistWhereInputSchema.optional(),
  orderBy: z.union([ buddhistOrderByWithRelationInputSchema.array(),buddhistOrderByWithRelationInputSchema ]).optional(),
  cursor: buddhistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BuddhistScalarFieldEnumSchema,BuddhistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const buddhistAggregateArgsSchema: z.ZodType<Prisma.buddhistAggregateArgs> = z.object({
  where: buddhistWhereInputSchema.optional(),
  orderBy: z.union([ buddhistOrderByWithRelationInputSchema.array(),buddhistOrderByWithRelationInputSchema ]).optional(),
  cursor: buddhistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const buddhistGroupByArgsSchema: z.ZodType<Prisma.buddhistGroupByArgs> = z.object({
  where: buddhistWhereInputSchema.optional(),
  orderBy: z.union([ buddhistOrderByWithAggregationInputSchema.array(),buddhistOrderByWithAggregationInputSchema ]).optional(),
  by: BuddhistScalarFieldEnumSchema.array(),
  having: buddhistScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const buddhistFindUniqueArgsSchema: z.ZodType<Omit<Prisma.buddhistFindUniqueArgs, "select" | "include">> = z.object({
  where: buddhistWhereUniqueInputSchema,
}).strict() ;

export const buddhistFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.buddhistFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: buddhistWhereUniqueInputSchema,
}).strict() ;

export const event_label_linkFindFirstArgsSchema: z.ZodType<Omit<Prisma.event_label_linkFindFirstArgs, "select" | "include">> = z.object({
  where: event_label_linkWhereInputSchema.optional(),
  orderBy: z.union([ event_label_linkOrderByWithRelationInputSchema.array(),event_label_linkOrderByWithRelationInputSchema ]).optional(),
  cursor: event_label_linkWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Event_label_linkScalarFieldEnumSchema,Event_label_linkScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const event_label_linkFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.event_label_linkFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: event_label_linkWhereInputSchema.optional(),
  orderBy: z.union([ event_label_linkOrderByWithRelationInputSchema.array(),event_label_linkOrderByWithRelationInputSchema ]).optional(),
  cursor: event_label_linkWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Event_label_linkScalarFieldEnumSchema,Event_label_linkScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const event_label_linkFindManyArgsSchema: z.ZodType<Omit<Prisma.event_label_linkFindManyArgs, "select" | "include">> = z.object({
  where: event_label_linkWhereInputSchema.optional(),
  orderBy: z.union([ event_label_linkOrderByWithRelationInputSchema.array(),event_label_linkOrderByWithRelationInputSchema ]).optional(),
  cursor: event_label_linkWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Event_label_linkScalarFieldEnumSchema,Event_label_linkScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const event_label_linkAggregateArgsSchema: z.ZodType<Prisma.event_label_linkAggregateArgs> = z.object({
  where: event_label_linkWhereInputSchema.optional(),
  orderBy: z.union([ event_label_linkOrderByWithRelationInputSchema.array(),event_label_linkOrderByWithRelationInputSchema ]).optional(),
  cursor: event_label_linkWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const event_label_linkGroupByArgsSchema: z.ZodType<Prisma.event_label_linkGroupByArgs> = z.object({
  where: event_label_linkWhereInputSchema.optional(),
  orderBy: z.union([ event_label_linkOrderByWithAggregationInputSchema.array(),event_label_linkOrderByWithAggregationInputSchema ]).optional(),
  by: Event_label_linkScalarFieldEnumSchema.array(),
  having: event_label_linkScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const event_label_linkFindUniqueArgsSchema: z.ZodType<Omit<Prisma.event_label_linkFindUniqueArgs, "select" | "include">> = z.object({
  where: event_label_linkWhereUniqueInputSchema,
}).strict() ;

export const event_label_linkFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.event_label_linkFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: event_label_linkWhereUniqueInputSchema,
}).strict() ;

export const familyFindFirstArgsSchema: z.ZodType<Omit<Prisma.familyFindFirstArgs, "select" | "include">> = z.object({
  where: familyWhereInputSchema.optional(),
  orderBy: z.union([ familyOrderByWithRelationInputSchema.array(),familyOrderByWithRelationInputSchema ]).optional(),
  cursor: familyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FamilyScalarFieldEnumSchema,FamilyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const familyFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.familyFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: familyWhereInputSchema.optional(),
  orderBy: z.union([ familyOrderByWithRelationInputSchema.array(),familyOrderByWithRelationInputSchema ]).optional(),
  cursor: familyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FamilyScalarFieldEnumSchema,FamilyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const familyFindManyArgsSchema: z.ZodType<Omit<Prisma.familyFindManyArgs, "select" | "include">> = z.object({
  where: familyWhereInputSchema.optional(),
  orderBy: z.union([ familyOrderByWithRelationInputSchema.array(),familyOrderByWithRelationInputSchema ]).optional(),
  cursor: familyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FamilyScalarFieldEnumSchema,FamilyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const familyAggregateArgsSchema: z.ZodType<Prisma.familyAggregateArgs> = z.object({
  where: familyWhereInputSchema.optional(),
  orderBy: z.union([ familyOrderByWithRelationInputSchema.array(),familyOrderByWithRelationInputSchema ]).optional(),
  cursor: familyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const familyGroupByArgsSchema: z.ZodType<Prisma.familyGroupByArgs> = z.object({
  where: familyWhereInputSchema.optional(),
  orderBy: z.union([ familyOrderByWithAggregationInputSchema.array(),familyOrderByWithAggregationInputSchema ]).optional(),
  by: FamilyScalarFieldEnumSchema.array(),
  having: familyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const familyFindUniqueArgsSchema: z.ZodType<Omit<Prisma.familyFindUniqueArgs, "select" | "include">> = z.object({
  where: familyWhereUniqueInputSchema,
}).strict() ;

export const familyFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.familyFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: familyWhereUniqueInputSchema,
}).strict() ;

export const family_memberFindFirstArgsSchema: z.ZodType<Omit<Prisma.family_memberFindFirstArgs, "select" | "include">> = z.object({
  where: family_memberWhereInputSchema.optional(),
  orderBy: z.union([ family_memberOrderByWithRelationInputSchema.array(),family_memberOrderByWithRelationInputSchema ]).optional(),
  cursor: family_memberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Family_memberScalarFieldEnumSchema,Family_memberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const family_memberFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.family_memberFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: family_memberWhereInputSchema.optional(),
  orderBy: z.union([ family_memberOrderByWithRelationInputSchema.array(),family_memberOrderByWithRelationInputSchema ]).optional(),
  cursor: family_memberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Family_memberScalarFieldEnumSchema,Family_memberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const family_memberFindManyArgsSchema: z.ZodType<Omit<Prisma.family_memberFindManyArgs, "select" | "include">> = z.object({
  where: family_memberWhereInputSchema.optional(),
  orderBy: z.union([ family_memberOrderByWithRelationInputSchema.array(),family_memberOrderByWithRelationInputSchema ]).optional(),
  cursor: family_memberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Family_memberScalarFieldEnumSchema,Family_memberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const family_memberAggregateArgsSchema: z.ZodType<Prisma.family_memberAggregateArgs> = z.object({
  where: family_memberWhereInputSchema.optional(),
  orderBy: z.union([ family_memberOrderByWithRelationInputSchema.array(),family_memberOrderByWithRelationInputSchema ]).optional(),
  cursor: family_memberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const family_memberGroupByArgsSchema: z.ZodType<Prisma.family_memberGroupByArgs> = z.object({
  where: family_memberWhereInputSchema.optional(),
  orderBy: z.union([ family_memberOrderByWithAggregationInputSchema.array(),family_memberOrderByWithAggregationInputSchema ]).optional(),
  by: Family_memberScalarFieldEnumSchema.array(),
  having: family_memberScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const family_memberFindUniqueArgsSchema: z.ZodType<Omit<Prisma.family_memberFindUniqueArgs, "select" | "include">> = z.object({
  where: family_memberWhereUniqueInputSchema,
}).strict() ;

export const family_memberFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.family_memberFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: family_memberWhereUniqueInputSchema,
}).strict() ;

export const god_nameFindFirstArgsSchema: z.ZodType<Omit<Prisma.god_nameFindFirstArgs, "select" | "include">> = z.object({
  where: god_nameWhereInputSchema.optional(),
  orderBy: z.union([ god_nameOrderByWithRelationInputSchema.array(),god_nameOrderByWithRelationInputSchema ]).optional(),
  cursor: god_nameWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ God_nameScalarFieldEnumSchema,God_nameScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const god_nameFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.god_nameFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: god_nameWhereInputSchema.optional(),
  orderBy: z.union([ god_nameOrderByWithRelationInputSchema.array(),god_nameOrderByWithRelationInputSchema ]).optional(),
  cursor: god_nameWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ God_nameScalarFieldEnumSchema,God_nameScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const god_nameFindManyArgsSchema: z.ZodType<Omit<Prisma.god_nameFindManyArgs, "select" | "include">> = z.object({
  where: god_nameWhereInputSchema.optional(),
  orderBy: z.union([ god_nameOrderByWithRelationInputSchema.array(),god_nameOrderByWithRelationInputSchema ]).optional(),
  cursor: god_nameWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ God_nameScalarFieldEnumSchema,God_nameScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const god_nameAggregateArgsSchema: z.ZodType<Prisma.god_nameAggregateArgs> = z.object({
  where: god_nameWhereInputSchema.optional(),
  orderBy: z.union([ god_nameOrderByWithRelationInputSchema.array(),god_nameOrderByWithRelationInputSchema ]).optional(),
  cursor: god_nameWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const god_nameGroupByArgsSchema: z.ZodType<Prisma.god_nameGroupByArgs> = z.object({
  where: god_nameWhereInputSchema.optional(),
  orderBy: z.union([ god_nameOrderByWithAggregationInputSchema.array(),god_nameOrderByWithAggregationInputSchema ]).optional(),
  by: God_nameScalarFieldEnumSchema.array(),
  having: god_nameScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const god_nameFindUniqueArgsSchema: z.ZodType<Omit<Prisma.god_nameFindUniqueArgs, "select" | "include">> = z.object({
  where: god_nameWhereUniqueInputSchema,
}).strict() ;

export const god_nameFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.god_nameFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: god_nameWhereUniqueInputSchema,
}).strict() ;

export const member_classFindFirstArgsSchema: z.ZodType<Omit<Prisma.member_classFindFirstArgs, "select" | "include">> = z.object({
  where: member_classWhereInputSchema.optional(),
  orderBy: z.union([ member_classOrderByWithRelationInputSchema.array(),member_classOrderByWithRelationInputSchema ]).optional(),
  cursor: member_classWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Member_classScalarFieldEnumSchema,Member_classScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const member_classFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.member_classFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: member_classWhereInputSchema.optional(),
  orderBy: z.union([ member_classOrderByWithRelationInputSchema.array(),member_classOrderByWithRelationInputSchema ]).optional(),
  cursor: member_classWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Member_classScalarFieldEnumSchema,Member_classScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const member_classFindManyArgsSchema: z.ZodType<Omit<Prisma.member_classFindManyArgs, "select" | "include">> = z.object({
  where: member_classWhereInputSchema.optional(),
  orderBy: z.union([ member_classOrderByWithRelationInputSchema.array(),member_classOrderByWithRelationInputSchema ]).optional(),
  cursor: member_classWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Member_classScalarFieldEnumSchema,Member_classScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const member_classAggregateArgsSchema: z.ZodType<Prisma.member_classAggregateArgs> = z.object({
  where: member_classWhereInputSchema.optional(),
  orderBy: z.union([ member_classOrderByWithRelationInputSchema.array(),member_classOrderByWithRelationInputSchema ]).optional(),
  cursor: member_classWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const member_classGroupByArgsSchema: z.ZodType<Prisma.member_classGroupByArgs> = z.object({
  where: member_classWhereInputSchema.optional(),
  orderBy: z.union([ member_classOrderByWithAggregationInputSchema.array(),member_classOrderByWithAggregationInputSchema ]).optional(),
  by: Member_classScalarFieldEnumSchema.array(),
  having: member_classScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const member_classFindUniqueArgsSchema: z.ZodType<Omit<Prisma.member_classFindUniqueArgs, "select" | "include">> = z.object({
  where: member_classWhereUniqueInputSchema,
}).strict() ;

export const member_classFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.member_classFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: member_classWhereUniqueInputSchema,
}).strict() ;

export const mgyearFindFirstArgsSchema: z.ZodType<Omit<Prisma.mgyearFindFirstArgs, "select" | "include">> = z.object({
  where: mgyearWhereInputSchema.optional(),
  orderBy: z.union([ mgyearOrderByWithRelationInputSchema.array(),mgyearOrderByWithRelationInputSchema ]).optional(),
  cursor: mgyearWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MgyearScalarFieldEnumSchema,MgyearScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mgyearFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.mgyearFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: mgyearWhereInputSchema.optional(),
  orderBy: z.union([ mgyearOrderByWithRelationInputSchema.array(),mgyearOrderByWithRelationInputSchema ]).optional(),
  cursor: mgyearWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MgyearScalarFieldEnumSchema,MgyearScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mgyearFindManyArgsSchema: z.ZodType<Omit<Prisma.mgyearFindManyArgs, "select" | "include">> = z.object({
  where: mgyearWhereInputSchema.optional(),
  orderBy: z.union([ mgyearOrderByWithRelationInputSchema.array(),mgyearOrderByWithRelationInputSchema ]).optional(),
  cursor: mgyearWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MgyearScalarFieldEnumSchema,MgyearScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const mgyearAggregateArgsSchema: z.ZodType<Prisma.mgyearAggregateArgs> = z.object({
  where: mgyearWhereInputSchema.optional(),
  orderBy: z.union([ mgyearOrderByWithRelationInputSchema.array(),mgyearOrderByWithRelationInputSchema ]).optional(),
  cursor: mgyearWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const mgyearGroupByArgsSchema: z.ZodType<Prisma.mgyearGroupByArgs> = z.object({
  where: mgyearWhereInputSchema.optional(),
  orderBy: z.union([ mgyearOrderByWithAggregationInputSchema.array(),mgyearOrderByWithAggregationInputSchema ]).optional(),
  by: MgyearScalarFieldEnumSchema.array(),
  having: mgyearScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const mgyearFindUniqueArgsSchema: z.ZodType<Omit<Prisma.mgyearFindUniqueArgs, "select" | "include">> = z.object({
  where: mgyearWhereUniqueInputSchema,
}).strict() ;

export const mgyearFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.mgyearFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: mgyearWhereUniqueInputSchema,
}).strict() ;

export const service1FindFirstArgsSchema: z.ZodType<Omit<Prisma.service1FindFirstArgs, "select" | "include">> = z.object({
  where: service1WhereInputSchema.optional(),
  orderBy: z.union([ service1OrderByWithRelationInputSchema.array(),service1OrderByWithRelationInputSchema ]).optional(),
  cursor: service1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service1ScalarFieldEnumSchema,Service1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const service1FindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.service1FindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: service1WhereInputSchema.optional(),
  orderBy: z.union([ service1OrderByWithRelationInputSchema.array(),service1OrderByWithRelationInputSchema ]).optional(),
  cursor: service1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service1ScalarFieldEnumSchema,Service1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const service1FindManyArgsSchema: z.ZodType<Omit<Prisma.service1FindManyArgs, "select" | "include">> = z.object({
  where: service1WhereInputSchema.optional(),
  orderBy: z.union([ service1OrderByWithRelationInputSchema.array(),service1OrderByWithRelationInputSchema ]).optional(),
  cursor: service1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service1ScalarFieldEnumSchema,Service1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const service1AggregateArgsSchema: z.ZodType<Prisma.service1AggregateArgs> = z.object({
  where: service1WhereInputSchema.optional(),
  orderBy: z.union([ service1OrderByWithRelationInputSchema.array(),service1OrderByWithRelationInputSchema ]).optional(),
  cursor: service1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const service1GroupByArgsSchema: z.ZodType<Prisma.service1GroupByArgs> = z.object({
  where: service1WhereInputSchema.optional(),
  orderBy: z.union([ service1OrderByWithAggregationInputSchema.array(),service1OrderByWithAggregationInputSchema ]).optional(),
  by: Service1ScalarFieldEnumSchema.array(),
  having: service1ScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const service1FindUniqueArgsSchema: z.ZodType<Omit<Prisma.service1FindUniqueArgs, "select" | "include">> = z.object({
  where: service1WhereUniqueInputSchema,
}).strict() ;

export const service1FindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.service1FindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: service1WhereUniqueInputSchema,
}).strict() ;

export const service2FindFirstArgsSchema: z.ZodType<Omit<Prisma.service2FindFirstArgs, "select" | "include">> = z.object({
  where: service2WhereInputSchema.optional(),
  orderBy: z.union([ service2OrderByWithRelationInputSchema.array(),service2OrderByWithRelationInputSchema ]).optional(),
  cursor: service2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service2ScalarFieldEnumSchema,Service2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const service2FindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.service2FindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: service2WhereInputSchema.optional(),
  orderBy: z.union([ service2OrderByWithRelationInputSchema.array(),service2OrderByWithRelationInputSchema ]).optional(),
  cursor: service2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service2ScalarFieldEnumSchema,Service2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const service2FindManyArgsSchema: z.ZodType<Omit<Prisma.service2FindManyArgs, "select" | "include">> = z.object({
  where: service2WhereInputSchema.optional(),
  orderBy: z.union([ service2OrderByWithRelationInputSchema.array(),service2OrderByWithRelationInputSchema ]).optional(),
  cursor: service2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service2ScalarFieldEnumSchema,Service2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const service2AggregateArgsSchema: z.ZodType<Prisma.service2AggregateArgs> = z.object({
  where: service2WhereInputSchema.optional(),
  orderBy: z.union([ service2OrderByWithRelationInputSchema.array(),service2OrderByWithRelationInputSchema ]).optional(),
  cursor: service2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const service2GroupByArgsSchema: z.ZodType<Prisma.service2GroupByArgs> = z.object({
  where: service2WhereInputSchema.optional(),
  orderBy: z.union([ service2OrderByWithAggregationInputSchema.array(),service2OrderByWithAggregationInputSchema ]).optional(),
  by: Service2ScalarFieldEnumSchema.array(),
  having: service2ScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const service2FindUniqueArgsSchema: z.ZodType<Omit<Prisma.service2FindUniqueArgs, "select" | "include">> = z.object({
  where: service2WhereUniqueInputSchema,
}).strict() ;

export const service2FindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.service2FindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: service2WhereUniqueInputSchema,
}).strict() ;

export const servicing1FindFirstArgsSchema: z.ZodType<Omit<Prisma.servicing1FindFirstArgs, "select" | "include">> = z.object({
  where: servicing1WhereInputSchema.optional(),
  orderBy: z.union([ servicing1OrderByWithRelationInputSchema.array(),servicing1OrderByWithRelationInputSchema ]).optional(),
  cursor: servicing1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing1ScalarFieldEnumSchema,Servicing1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const servicing1FindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.servicing1FindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: servicing1WhereInputSchema.optional(),
  orderBy: z.union([ servicing1OrderByWithRelationInputSchema.array(),servicing1OrderByWithRelationInputSchema ]).optional(),
  cursor: servicing1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing1ScalarFieldEnumSchema,Servicing1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const servicing1FindManyArgsSchema: z.ZodType<Omit<Prisma.servicing1FindManyArgs, "select" | "include">> = z.object({
  where: servicing1WhereInputSchema.optional(),
  orderBy: z.union([ servicing1OrderByWithRelationInputSchema.array(),servicing1OrderByWithRelationInputSchema ]).optional(),
  cursor: servicing1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing1ScalarFieldEnumSchema,Servicing1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const servicing1AggregateArgsSchema: z.ZodType<Prisma.servicing1AggregateArgs> = z.object({
  where: servicing1WhereInputSchema.optional(),
  orderBy: z.union([ servicing1OrderByWithRelationInputSchema.array(),servicing1OrderByWithRelationInputSchema ]).optional(),
  cursor: servicing1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const servicing1GroupByArgsSchema: z.ZodType<Prisma.servicing1GroupByArgs> = z.object({
  where: servicing1WhereInputSchema.optional(),
  orderBy: z.union([ servicing1OrderByWithAggregationInputSchema.array(),servicing1OrderByWithAggregationInputSchema ]).optional(),
  by: Servicing1ScalarFieldEnumSchema.array(),
  having: servicing1ScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const servicing1FindUniqueArgsSchema: z.ZodType<Omit<Prisma.servicing1FindUniqueArgs, "select" | "include">> = z.object({
  where: servicing1WhereUniqueInputSchema,
}).strict() ;

export const servicing1FindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.servicing1FindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: servicing1WhereUniqueInputSchema,
}).strict() ;

export const servicing2FindFirstArgsSchema: z.ZodType<Omit<Prisma.servicing2FindFirstArgs, "select" | "include">> = z.object({
  where: servicing2WhereInputSchema.optional(),
  orderBy: z.union([ servicing2OrderByWithRelationInputSchema.array(),servicing2OrderByWithRelationInputSchema ]).optional(),
  cursor: servicing2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing2ScalarFieldEnumSchema,Servicing2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const servicing2FindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.servicing2FindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: servicing2WhereInputSchema.optional(),
  orderBy: z.union([ servicing2OrderByWithRelationInputSchema.array(),servicing2OrderByWithRelationInputSchema ]).optional(),
  cursor: servicing2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing2ScalarFieldEnumSchema,Servicing2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const servicing2FindManyArgsSchema: z.ZodType<Omit<Prisma.servicing2FindManyArgs, "select" | "include">> = z.object({
  where: servicing2WhereInputSchema.optional(),
  orderBy: z.union([ servicing2OrderByWithRelationInputSchema.array(),servicing2OrderByWithRelationInputSchema ]).optional(),
  cursor: servicing2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing2ScalarFieldEnumSchema,Servicing2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const servicing2AggregateArgsSchema: z.ZodType<Prisma.servicing2AggregateArgs> = z.object({
  where: servicing2WhereInputSchema.optional(),
  orderBy: z.union([ servicing2OrderByWithRelationInputSchema.array(),servicing2OrderByWithRelationInputSchema ]).optional(),
  cursor: servicing2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const servicing2GroupByArgsSchema: z.ZodType<Prisma.servicing2GroupByArgs> = z.object({
  where: servicing2WhereInputSchema.optional(),
  orderBy: z.union([ servicing2OrderByWithAggregationInputSchema.array(),servicing2OrderByWithAggregationInputSchema ]).optional(),
  by: Servicing2ScalarFieldEnumSchema.array(),
  having: servicing2ScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const servicing2FindUniqueArgsSchema: z.ZodType<Omit<Prisma.servicing2FindUniqueArgs, "select" | "include">> = z.object({
  where: servicing2WhereUniqueInputSchema,
}).strict() ;

export const servicing2FindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.servicing2FindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: servicing2WhereUniqueInputSchema,
}).strict() ;

export const templeFindFirstArgsSchema: z.ZodType<Omit<Prisma.templeFindFirstArgs, "select" | "include">> = z.object({
  where: templeWhereInputSchema.optional(),
  orderBy: z.union([ templeOrderByWithRelationInputSchema.array(),templeOrderByWithRelationInputSchema ]).optional(),
  cursor: templeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TempleScalarFieldEnumSchema,TempleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const templeFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.templeFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: templeWhereInputSchema.optional(),
  orderBy: z.union([ templeOrderByWithRelationInputSchema.array(),templeOrderByWithRelationInputSchema ]).optional(),
  cursor: templeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TempleScalarFieldEnumSchema,TempleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const templeFindManyArgsSchema: z.ZodType<Omit<Prisma.templeFindManyArgs, "select" | "include">> = z.object({
  where: templeWhereInputSchema.optional(),
  orderBy: z.union([ templeOrderByWithRelationInputSchema.array(),templeOrderByWithRelationInputSchema ]).optional(),
  cursor: templeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TempleScalarFieldEnumSchema,TempleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const templeAggregateArgsSchema: z.ZodType<Prisma.templeAggregateArgs> = z.object({
  where: templeWhereInputSchema.optional(),
  orderBy: z.union([ templeOrderByWithRelationInputSchema.array(),templeOrderByWithRelationInputSchema ]).optional(),
  cursor: templeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const templeGroupByArgsSchema: z.ZodType<Prisma.templeGroupByArgs> = z.object({
  where: templeWhereInputSchema.optional(),
  orderBy: z.union([ templeOrderByWithAggregationInputSchema.array(),templeOrderByWithAggregationInputSchema ]).optional(),
  by: TempleScalarFieldEnumSchema.array(),
  having: templeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const templeFindUniqueArgsSchema: z.ZodType<Omit<Prisma.templeFindUniqueArgs, "select" | "include">> = z.object({
  where: templeWhereUniqueInputSchema,
}).strict() ;

export const templeFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.templeFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: templeWhereUniqueInputSchema,
}).strict() ;

export const TrainedModelFindFirstArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindFirstArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithRelationInputSchema.array(),TrainedModelOrderByWithRelationInputSchema ]).optional(),
  cursor: TrainedModelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TrainedModelScalarFieldEnumSchema,TrainedModelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TrainedModelFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithRelationInputSchema.array(),TrainedModelOrderByWithRelationInputSchema ]).optional(),
  cursor: TrainedModelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TrainedModelScalarFieldEnumSchema,TrainedModelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TrainedModelFindManyArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindManyArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithRelationInputSchema.array(),TrainedModelOrderByWithRelationInputSchema ]).optional(),
  cursor: TrainedModelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TrainedModelScalarFieldEnumSchema,TrainedModelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TrainedModelAggregateArgsSchema: z.ZodType<Prisma.TrainedModelAggregateArgs> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithRelationInputSchema.array(),TrainedModelOrderByWithRelationInputSchema ]).optional(),
  cursor: TrainedModelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TrainedModelGroupByArgsSchema: z.ZodType<Prisma.TrainedModelGroupByArgs> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithAggregationInputSchema.array(),TrainedModelOrderByWithAggregationInputSchema ]).optional(),
  by: TrainedModelScalarFieldEnumSchema.array(),
  having: TrainedModelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TrainedModelFindUniqueArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindUniqueArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereUniqueInputSchema,
}).strict() ;

export const TrainedModelFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereUniqueInputSchema,
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Omit<Prisma.UserCreateArgs, "select" | "include">> = z.object({
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Omit<Prisma.UserUpsertArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Omit<Prisma.UserDeleteArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Omit<Prisma.UserUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Omit<Prisma.SessionCreateArgs, "select" | "include">> = z.object({
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Omit<Prisma.SessionUpsertArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionCreateManyAndReturnArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Omit<Prisma.SessionDeleteArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Omit<Prisma.SessionUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountCreateArgsSchema: z.ZodType<Omit<Prisma.AccountCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
}).strict() ;

export const AccountUpsertArgsSchema: z.ZodType<Omit<Prisma.AccountUpsertArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountCreateManyAndReturnArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountDeleteArgsSchema: z.ZodType<Omit<Prisma.AccountDeleteArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateArgsSchema: z.ZodType<Omit<Prisma.AccountUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationCreateArgsSchema: z.ZodType<Omit<Prisma.VerificationCreateArgs, "select">> = z.object({
  data: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
}).strict() ;

export const VerificationUpsertArgsSchema: z.ZodType<Omit<Prisma.VerificationUpsertArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
  create: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
  update: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
}).strict() ;

export const VerificationCreateManyArgsSchema: z.ZodType<Prisma.VerificationCreateManyArgs> = z.object({
  data: z.union([ VerificationCreateManyInputSchema,VerificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationCreateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationCreateManyInputSchema,VerificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationDeleteArgsSchema: z.ZodType<Omit<Prisma.VerificationDeleteArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateArgsSchema: z.ZodType<Omit<Prisma.VerificationUpdateArgs, "select">> = z.object({
  data: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateManyArgsSchema: z.ZodType<Prisma.VerificationUpdateManyArgs> = z.object({
  data: z.union([ VerificationUpdateManyMutationInputSchema,VerificationUncheckedUpdateManyInputSchema ]),
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationUpdateManyMutationInputSchema,VerificationUncheckedUpdateManyInputSchema ]),
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationDeleteManyArgsSchema: z.ZodType<Prisma.VerificationDeleteManyArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasskeyCreateArgsSchema: z.ZodType<Omit<Prisma.PasskeyCreateArgs, "select" | "include">> = z.object({
  data: z.union([ PasskeyCreateInputSchema,PasskeyUncheckedCreateInputSchema ]),
}).strict() ;

export const PasskeyUpsertArgsSchema: z.ZodType<Omit<Prisma.PasskeyUpsertArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
  create: z.union([ PasskeyCreateInputSchema,PasskeyUncheckedCreateInputSchema ]),
  update: z.union([ PasskeyUpdateInputSchema,PasskeyUncheckedUpdateInputSchema ]),
}).strict() ;

export const PasskeyCreateManyArgsSchema: z.ZodType<Prisma.PasskeyCreateManyArgs> = z.object({
  data: z.union([ PasskeyCreateManyInputSchema,PasskeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasskeyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PasskeyCreateManyAndReturnArgs> = z.object({
  data: z.union([ PasskeyCreateManyInputSchema,PasskeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasskeyDeleteArgsSchema: z.ZodType<Omit<Prisma.PasskeyDeleteArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const PasskeyUpdateArgsSchema: z.ZodType<Omit<Prisma.PasskeyUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ PasskeyUpdateInputSchema,PasskeyUncheckedUpdateInputSchema ]),
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const PasskeyUpdateManyArgsSchema: z.ZodType<Prisma.PasskeyUpdateManyArgs> = z.object({
  data: z.union([ PasskeyUpdateManyMutationInputSchema,PasskeyUncheckedUpdateManyInputSchema ]),
  where: PasskeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasskeyUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PasskeyUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PasskeyUpdateManyMutationInputSchema,PasskeyUncheckedUpdateManyInputSchema ]),
  where: PasskeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasskeyDeleteManyArgsSchema: z.ZodType<Prisma.PasskeyDeleteManyArgs> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorCreateArgsSchema: z.ZodType<Omit<Prisma.TwoFactorCreateArgs, "select" | "include">> = z.object({
  data: z.union([ TwoFactorCreateInputSchema,TwoFactorUncheckedCreateInputSchema ]),
}).strict() ;

export const TwoFactorUpsertArgsSchema: z.ZodType<Omit<Prisma.TwoFactorUpsertArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
  create: z.union([ TwoFactorCreateInputSchema,TwoFactorUncheckedCreateInputSchema ]),
  update: z.union([ TwoFactorUpdateInputSchema,TwoFactorUncheckedUpdateInputSchema ]),
}).strict() ;

export const TwoFactorCreateManyArgsSchema: z.ZodType<Prisma.TwoFactorCreateManyArgs> = z.object({
  data: z.union([ TwoFactorCreateManyInputSchema,TwoFactorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TwoFactorCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TwoFactorCreateManyAndReturnArgs> = z.object({
  data: z.union([ TwoFactorCreateManyInputSchema,TwoFactorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TwoFactorDeleteArgsSchema: z.ZodType<Omit<Prisma.TwoFactorDeleteArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorUpdateArgsSchema: z.ZodType<Omit<Prisma.TwoFactorUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ TwoFactorUpdateInputSchema,TwoFactorUncheckedUpdateInputSchema ]),
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorUpdateManyArgsSchema: z.ZodType<Prisma.TwoFactorUpdateManyArgs> = z.object({
  data: z.union([ TwoFactorUpdateManyMutationInputSchema,TwoFactorUncheckedUpdateManyInputSchema ]),
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TwoFactorUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TwoFactorUpdateManyMutationInputSchema,TwoFactorUncheckedUpdateManyInputSchema ]),
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorDeleteManyArgsSchema: z.ZodType<Prisma.TwoFactorDeleteManyArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationCreateArgsSchema: z.ZodType<Omit<Prisma.OrganizationCreateArgs, "select" | "include">> = z.object({
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const OrganizationUpsertArgsSchema: z.ZodType<Omit<Prisma.OrganizationUpsertArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationDeleteArgsSchema: z.ZodType<Omit<Prisma.OrganizationDeleteArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateArgsSchema: z.ZodType<Omit<Prisma.OrganizationUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RelationshipManagerCreateArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerCreateArgs, "select" | "include">> = z.object({
  data: z.union([ RelationshipManagerCreateInputSchema,RelationshipManagerUncheckedCreateInputSchema ]),
}).strict() ;

export const RelationshipManagerUpsertArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerUpsertArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereUniqueInputSchema,
  create: z.union([ RelationshipManagerCreateInputSchema,RelationshipManagerUncheckedCreateInputSchema ]),
  update: z.union([ RelationshipManagerUpdateInputSchema,RelationshipManagerUncheckedUpdateInputSchema ]),
}).strict() ;

export const RelationshipManagerCreateManyArgsSchema: z.ZodType<Prisma.RelationshipManagerCreateManyArgs> = z.object({
  data: z.union([ RelationshipManagerCreateManyInputSchema,RelationshipManagerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RelationshipManagerCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RelationshipManagerCreateManyAndReturnArgs> = z.object({
  data: z.union([ RelationshipManagerCreateManyInputSchema,RelationshipManagerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RelationshipManagerDeleteArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerDeleteArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereUniqueInputSchema,
}).strict() ;

export const RelationshipManagerUpdateArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ RelationshipManagerUpdateInputSchema,RelationshipManagerUncheckedUpdateInputSchema ]),
  where: RelationshipManagerWhereUniqueInputSchema,
}).strict() ;

export const RelationshipManagerUpdateManyArgsSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyArgs> = z.object({
  data: z.union([ RelationshipManagerUpdateManyMutationInputSchema,RelationshipManagerUncheckedUpdateManyInputSchema ]),
  where: RelationshipManagerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RelationshipManagerUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RelationshipManagerUpdateManyMutationInputSchema,RelationshipManagerUncheckedUpdateManyInputSchema ]),
  where: RelationshipManagerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RelationshipManagerDeleteManyArgsSchema: z.ZodType<Prisma.RelationshipManagerDeleteManyArgs> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomerCreateArgsSchema: z.ZodType<Omit<Prisma.CustomerCreateArgs, "select" | "include">> = z.object({
  data: z.union([ CustomerCreateInputSchema,CustomerUncheckedCreateInputSchema ]),
}).strict() ;

export const CustomerUpsertArgsSchema: z.ZodType<Omit<Prisma.CustomerUpsertArgs, "select" | "include">> = z.object({
  where: CustomerWhereUniqueInputSchema,
  create: z.union([ CustomerCreateInputSchema,CustomerUncheckedCreateInputSchema ]),
  update: z.union([ CustomerUpdateInputSchema,CustomerUncheckedUpdateInputSchema ]),
}).strict() ;

export const CustomerCreateManyArgsSchema: z.ZodType<Prisma.CustomerCreateManyArgs> = z.object({
  data: z.union([ CustomerCreateManyInputSchema,CustomerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomerCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomerCreateManyInputSchema,CustomerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerDeleteArgsSchema: z.ZodType<Omit<Prisma.CustomerDeleteArgs, "select" | "include">> = z.object({
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerUpdateArgsSchema: z.ZodType<Omit<Prisma.CustomerUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ CustomerUpdateInputSchema,CustomerUncheckedUpdateInputSchema ]),
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerUpdateManyArgsSchema: z.ZodType<Prisma.CustomerUpdateManyArgs> = z.object({
  data: z.union([ CustomerUpdateManyMutationInputSchema,CustomerUncheckedUpdateManyInputSchema ]),
  where: CustomerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomerUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomerUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CustomerUpdateManyMutationInputSchema,CustomerUncheckedUpdateManyInputSchema ]),
  where: CustomerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomerDeleteManyArgsSchema: z.ZodType<Prisma.CustomerDeleteManyArgs> = z.object({
  where: CustomerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberCreateArgsSchema: z.ZodType<Omit<Prisma.MemberCreateArgs, "select" | "include">> = z.object({
  data: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
}).strict() ;

export const MemberUpsertArgsSchema: z.ZodType<Omit<Prisma.MemberUpsertArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
  create: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
  update: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
}).strict() ;

export const MemberCreateManyArgsSchema: z.ZodType<Prisma.MemberCreateManyArgs> = z.object({
  data: z.union([ MemberCreateManyInputSchema,MemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberCreateManyAndReturnArgs> = z.object({
  data: z.union([ MemberCreateManyInputSchema,MemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberDeleteArgsSchema: z.ZodType<Omit<Prisma.MemberDeleteArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberUpdateArgsSchema: z.ZodType<Omit<Prisma.MemberUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberUpdateManyArgsSchema: z.ZodType<Prisma.MemberUpdateManyArgs> = z.object({
  data: z.union([ MemberUpdateManyMutationInputSchema,MemberUncheckedUpdateManyInputSchema ]),
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MemberUpdateManyMutationInputSchema,MemberUncheckedUpdateManyInputSchema ]),
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberDeleteManyArgsSchema: z.ZodType<Prisma.MemberDeleteManyArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationCreateArgsSchema: z.ZodType<Omit<Prisma.InvitationCreateArgs, "select" | "include">> = z.object({
  data: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
}).strict() ;

export const InvitationUpsertArgsSchema: z.ZodType<Omit<Prisma.InvitationUpsertArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
  create: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
  update: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
}).strict() ;

export const InvitationCreateManyArgsSchema: z.ZodType<Prisma.InvitationCreateManyArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationCreateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationDeleteArgsSchema: z.ZodType<Omit<Prisma.InvitationDeleteArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateArgsSchema: z.ZodType<Omit<Prisma.InvitationUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateManyArgsSchema: z.ZodType<Prisma.InvitationUpdateManyArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationDeleteManyArgsSchema: z.ZodType<Prisma.InvitationDeleteManyArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurchaseCreateArgsSchema: z.ZodType<Omit<Prisma.PurchaseCreateArgs, "select" | "include">> = z.object({
  data: z.union([ PurchaseCreateInputSchema,PurchaseUncheckedCreateInputSchema ]),
}).strict() ;

export const PurchaseUpsertArgsSchema: z.ZodType<Omit<Prisma.PurchaseUpsertArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
  create: z.union([ PurchaseCreateInputSchema,PurchaseUncheckedCreateInputSchema ]),
  update: z.union([ PurchaseUpdateInputSchema,PurchaseUncheckedUpdateInputSchema ]),
}).strict() ;

export const PurchaseCreateManyArgsSchema: z.ZodType<Prisma.PurchaseCreateManyArgs> = z.object({
  data: z.union([ PurchaseCreateManyInputSchema,PurchaseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PurchaseCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PurchaseCreateManyAndReturnArgs> = z.object({
  data: z.union([ PurchaseCreateManyInputSchema,PurchaseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PurchaseDeleteArgsSchema: z.ZodType<Omit<Prisma.PurchaseDeleteArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const PurchaseUpdateArgsSchema: z.ZodType<Omit<Prisma.PurchaseUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ PurchaseUpdateInputSchema,PurchaseUncheckedUpdateInputSchema ]),
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const PurchaseUpdateManyArgsSchema: z.ZodType<Prisma.PurchaseUpdateManyArgs> = z.object({
  data: z.union([ PurchaseUpdateManyMutationInputSchema,PurchaseUncheckedUpdateManyInputSchema ]),
  where: PurchaseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurchaseUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PurchaseUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PurchaseUpdateManyMutationInputSchema,PurchaseUncheckedUpdateManyInputSchema ]),
  where: PurchaseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurchaseDeleteManyArgsSchema: z.ZodType<Prisma.PurchaseDeleteManyArgs> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AiChatCreateArgsSchema: z.ZodType<Omit<Prisma.AiChatCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AiChatCreateInputSchema,AiChatUncheckedCreateInputSchema ]),
}).strict() ;

export const AiChatUpsertArgsSchema: z.ZodType<Omit<Prisma.AiChatUpsertArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
  create: z.union([ AiChatCreateInputSchema,AiChatUncheckedCreateInputSchema ]),
  update: z.union([ AiChatUpdateInputSchema,AiChatUncheckedUpdateInputSchema ]),
}).strict() ;

export const AiChatCreateManyArgsSchema: z.ZodType<Prisma.AiChatCreateManyArgs> = z.object({
  data: z.union([ AiChatCreateManyInputSchema,AiChatCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AiChatCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AiChatCreateManyAndReturnArgs> = z.object({
  data: z.union([ AiChatCreateManyInputSchema,AiChatCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AiChatDeleteArgsSchema: z.ZodType<Omit<Prisma.AiChatDeleteArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const AiChatUpdateArgsSchema: z.ZodType<Omit<Prisma.AiChatUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AiChatUpdateInputSchema,AiChatUncheckedUpdateInputSchema ]),
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const AiChatUpdateManyArgsSchema: z.ZodType<Prisma.AiChatUpdateManyArgs> = z.object({
  data: z.union([ AiChatUpdateManyMutationInputSchema,AiChatUncheckedUpdateManyInputSchema ]),
  where: AiChatWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AiChatUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AiChatUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AiChatUpdateManyMutationInputSchema,AiChatUncheckedUpdateManyInputSchema ]),
  where: AiChatWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AiChatDeleteManyArgsSchema: z.ZodType<Prisma.AiChatDeleteManyArgs> = z.object({
  where: AiChatWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BankAccountCreateArgsSchema: z.ZodType<Omit<Prisma.BankAccountCreateArgs, "select" | "include">> = z.object({
  data: z.union([ BankAccountCreateInputSchema,BankAccountUncheckedCreateInputSchema ]),
}).strict() ;

export const BankAccountUpsertArgsSchema: z.ZodType<Omit<Prisma.BankAccountUpsertArgs, "select" | "include">> = z.object({
  where: BankAccountWhereUniqueInputSchema,
  create: z.union([ BankAccountCreateInputSchema,BankAccountUncheckedCreateInputSchema ]),
  update: z.union([ BankAccountUpdateInputSchema,BankAccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const BankAccountCreateManyArgsSchema: z.ZodType<Prisma.BankAccountCreateManyArgs> = z.object({
  data: z.union([ BankAccountCreateManyInputSchema,BankAccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BankAccountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.BankAccountCreateManyAndReturnArgs> = z.object({
  data: z.union([ BankAccountCreateManyInputSchema,BankAccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BankAccountDeleteArgsSchema: z.ZodType<Omit<Prisma.BankAccountDeleteArgs, "select" | "include">> = z.object({
  where: BankAccountWhereUniqueInputSchema,
}).strict() ;

export const BankAccountUpdateArgsSchema: z.ZodType<Omit<Prisma.BankAccountUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ BankAccountUpdateInputSchema,BankAccountUncheckedUpdateInputSchema ]),
  where: BankAccountWhereUniqueInputSchema,
}).strict() ;

export const BankAccountUpdateManyArgsSchema: z.ZodType<Prisma.BankAccountUpdateManyArgs> = z.object({
  data: z.union([ BankAccountUpdateManyMutationInputSchema,BankAccountUncheckedUpdateManyInputSchema ]),
  where: BankAccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BankAccountUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.BankAccountUpdateManyAndReturnArgs> = z.object({
  data: z.union([ BankAccountUpdateManyMutationInputSchema,BankAccountUncheckedUpdateManyInputSchema ]),
  where: BankAccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BankAccountDeleteManyArgsSchema: z.ZodType<Prisma.BankAccountDeleteManyArgs> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExpenseCreateArgsSchema: z.ZodType<Omit<Prisma.ExpenseCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ExpenseCreateInputSchema,ExpenseUncheckedCreateInputSchema ]),
}).strict() ;

export const ExpenseUpsertArgsSchema: z.ZodType<Omit<Prisma.ExpenseUpsertArgs, "select" | "include">> = z.object({
  where: ExpenseWhereUniqueInputSchema,
  create: z.union([ ExpenseCreateInputSchema,ExpenseUncheckedCreateInputSchema ]),
  update: z.union([ ExpenseUpdateInputSchema,ExpenseUncheckedUpdateInputSchema ]),
}).strict() ;

export const ExpenseCreateManyArgsSchema: z.ZodType<Prisma.ExpenseCreateManyArgs> = z.object({
  data: z.union([ ExpenseCreateManyInputSchema,ExpenseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ExpenseCreateManyAndReturnArgs> = z.object({
  data: z.union([ ExpenseCreateManyInputSchema,ExpenseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseDeleteArgsSchema: z.ZodType<Omit<Prisma.ExpenseDeleteArgs, "select" | "include">> = z.object({
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseUpdateArgsSchema: z.ZodType<Omit<Prisma.ExpenseUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ExpenseUpdateInputSchema,ExpenseUncheckedUpdateInputSchema ]),
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseUpdateManyArgsSchema: z.ZodType<Prisma.ExpenseUpdateManyArgs> = z.object({
  data: z.union([ ExpenseUpdateManyMutationInputSchema,ExpenseUncheckedUpdateManyInputSchema ]),
  where: ExpenseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExpenseUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ExpenseUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ExpenseUpdateManyMutationInputSchema,ExpenseUncheckedUpdateManyInputSchema ]),
  where: ExpenseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExpenseDeleteManyArgsSchema: z.ZodType<Prisma.ExpenseDeleteManyArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductCreateArgsSchema: z.ZodType<Omit<Prisma.ProductCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductUpsertArgsSchema: z.ZodType<Omit<Prisma.ProductUpsertArgs, "select" | "include">> = z.object({
  where: ProductWhereUniqueInputSchema,
  create: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
  update: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductCreateManyArgsSchema: z.ZodType<Prisma.ProductCreateManyArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductDeleteArgsSchema: z.ZodType<Omit<Prisma.ProductDeleteArgs, "select" | "include">> = z.object({
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateArgsSchema: z.ZodType<Omit<Prisma.ProductUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateManyArgsSchema: z.ZodType<Prisma.ProductUpdateManyArgs> = z.object({
  data: z.union([ ProductUpdateManyMutationInputSchema,ProductUncheckedUpdateManyInputSchema ]),
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProductUpdateManyMutationInputSchema,ProductUncheckedUpdateManyInputSchema ]),
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductDeleteManyArgsSchema: z.ZodType<Prisma.ProductDeleteManyArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProfitSharingCreateArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ProfitSharingCreateInputSchema,ProfitSharingUncheckedCreateInputSchema ]),
}).strict() ;

export const ProfitSharingUpsertArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingUpsertArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereUniqueInputSchema,
  create: z.union([ ProfitSharingCreateInputSchema,ProfitSharingUncheckedCreateInputSchema ]),
  update: z.union([ ProfitSharingUpdateInputSchema,ProfitSharingUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProfitSharingCreateManyArgsSchema: z.ZodType<Prisma.ProfitSharingCreateManyArgs> = z.object({
  data: z.union([ ProfitSharingCreateManyInputSchema,ProfitSharingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfitSharingCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProfitSharingCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProfitSharingCreateManyInputSchema,ProfitSharingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfitSharingDeleteArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingDeleteArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereUniqueInputSchema,
}).strict() ;

export const ProfitSharingUpdateArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ProfitSharingUpdateInputSchema,ProfitSharingUncheckedUpdateInputSchema ]),
  where: ProfitSharingWhereUniqueInputSchema,
}).strict() ;

export const ProfitSharingUpdateManyArgsSchema: z.ZodType<Prisma.ProfitSharingUpdateManyArgs> = z.object({
  data: z.union([ ProfitSharingUpdateManyMutationInputSchema,ProfitSharingUncheckedUpdateManyInputSchema ]),
  where: ProfitSharingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProfitSharingUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProfitSharingUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProfitSharingUpdateManyMutationInputSchema,ProfitSharingUncheckedUpdateManyInputSchema ]),
  where: ProfitSharingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProfitSharingDeleteManyArgsSchema: z.ZodType<Prisma.ProfitSharingDeleteManyArgs> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AssetTransactionCreateArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AssetTransactionCreateInputSchema,AssetTransactionUncheckedCreateInputSchema ]),
}).strict() ;

export const AssetTransactionUpsertArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionUpsertArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereUniqueInputSchema,
  create: z.union([ AssetTransactionCreateInputSchema,AssetTransactionUncheckedCreateInputSchema ]),
  update: z.union([ AssetTransactionUpdateInputSchema,AssetTransactionUncheckedUpdateInputSchema ]),
}).strict() ;

export const AssetTransactionCreateManyArgsSchema: z.ZodType<Prisma.AssetTransactionCreateManyArgs> = z.object({
  data: z.union([ AssetTransactionCreateManyInputSchema,AssetTransactionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AssetTransactionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AssetTransactionCreateManyAndReturnArgs> = z.object({
  data: z.union([ AssetTransactionCreateManyInputSchema,AssetTransactionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AssetTransactionDeleteArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionDeleteArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereUniqueInputSchema,
}).strict() ;

export const AssetTransactionUpdateArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AssetTransactionUpdateInputSchema,AssetTransactionUncheckedUpdateInputSchema ]),
  where: AssetTransactionWhereUniqueInputSchema,
}).strict() ;

export const AssetTransactionUpdateManyArgsSchema: z.ZodType<Prisma.AssetTransactionUpdateManyArgs> = z.object({
  data: z.union([ AssetTransactionUpdateManyMutationInputSchema,AssetTransactionUncheckedUpdateManyInputSchema ]),
  where: AssetTransactionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AssetTransactionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AssetTransactionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AssetTransactionUpdateManyMutationInputSchema,AssetTransactionUncheckedUpdateManyInputSchema ]),
  where: AssetTransactionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AssetTransactionDeleteManyArgsSchema: z.ZodType<Prisma.AssetTransactionDeleteManyArgs> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ammeterCreateArgsSchema: z.ZodType<Omit<Prisma.ammeterCreateArgs, "select">> = z.object({
  data: z.union([ ammeterCreateInputSchema,ammeterUncheckedCreateInputSchema ]),
}).strict() ;

export const ammeterUpsertArgsSchema: z.ZodType<Omit<Prisma.ammeterUpsertArgs, "select">> = z.object({
  where: ammeterWhereUniqueInputSchema,
  create: z.union([ ammeterCreateInputSchema,ammeterUncheckedCreateInputSchema ]),
  update: z.union([ ammeterUpdateInputSchema,ammeterUncheckedUpdateInputSchema ]),
}).strict() ;

export const ammeterCreateManyArgsSchema: z.ZodType<Prisma.ammeterCreateManyArgs> = z.object({
  data: z.union([ ammeterCreateManyInputSchema,ammeterCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ammeterCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ammeterCreateManyAndReturnArgs> = z.object({
  data: z.union([ ammeterCreateManyInputSchema,ammeterCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ammeterDeleteArgsSchema: z.ZodType<Omit<Prisma.ammeterDeleteArgs, "select">> = z.object({
  where: ammeterWhereUniqueInputSchema,
}).strict() ;

export const ammeterUpdateArgsSchema: z.ZodType<Omit<Prisma.ammeterUpdateArgs, "select">> = z.object({
  data: z.union([ ammeterUpdateInputSchema,ammeterUncheckedUpdateInputSchema ]),
  where: ammeterWhereUniqueInputSchema,
}).strict() ;

export const ammeterUpdateManyArgsSchema: z.ZodType<Prisma.ammeterUpdateManyArgs> = z.object({
  data: z.union([ ammeterUpdateManyMutationInputSchema,ammeterUncheckedUpdateManyInputSchema ]),
  where: ammeterWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ammeterUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ammeterUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ammeterUpdateManyMutationInputSchema,ammeterUncheckedUpdateManyInputSchema ]),
  where: ammeterWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ammeterDeleteManyArgsSchema: z.ZodType<Prisma.ammeterDeleteManyArgs> = z.object({
  where: ammeterWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ammeter_logCreateArgsSchema: z.ZodType<Omit<Prisma.ammeter_logCreateArgs, "select">> = z.object({
  data: z.union([ ammeter_logCreateInputSchema,ammeter_logUncheckedCreateInputSchema ]),
}).strict() ;

export const ammeter_logUpsertArgsSchema: z.ZodType<Omit<Prisma.ammeter_logUpsertArgs, "select">> = z.object({
  where: ammeter_logWhereUniqueInputSchema,
  create: z.union([ ammeter_logCreateInputSchema,ammeter_logUncheckedCreateInputSchema ]),
  update: z.union([ ammeter_logUpdateInputSchema,ammeter_logUncheckedUpdateInputSchema ]),
}).strict() ;

export const ammeter_logCreateManyArgsSchema: z.ZodType<Prisma.ammeter_logCreateManyArgs> = z.object({
  data: z.union([ ammeter_logCreateManyInputSchema,ammeter_logCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ammeter_logCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ammeter_logCreateManyAndReturnArgs> = z.object({
  data: z.union([ ammeter_logCreateManyInputSchema,ammeter_logCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ammeter_logDeleteArgsSchema: z.ZodType<Omit<Prisma.ammeter_logDeleteArgs, "select">> = z.object({
  where: ammeter_logWhereUniqueInputSchema,
}).strict() ;

export const ammeter_logUpdateArgsSchema: z.ZodType<Omit<Prisma.ammeter_logUpdateArgs, "select">> = z.object({
  data: z.union([ ammeter_logUpdateInputSchema,ammeter_logUncheckedUpdateInputSchema ]),
  where: ammeter_logWhereUniqueInputSchema,
}).strict() ;

export const ammeter_logUpdateManyArgsSchema: z.ZodType<Prisma.ammeter_logUpdateManyArgs> = z.object({
  data: z.union([ ammeter_logUpdateManyMutationInputSchema,ammeter_logUncheckedUpdateManyInputSchema ]),
  where: ammeter_logWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ammeter_logUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ammeter_logUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ammeter_logUpdateManyMutationInputSchema,ammeter_logUncheckedUpdateManyInputSchema ]),
  where: ammeter_logWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ammeter_logDeleteManyArgsSchema: z.ZodType<Prisma.ammeter_logDeleteManyArgs> = z.object({
  where: ammeter_logWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExperimentRunCreateArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ExperimentRunCreateInputSchema,ExperimentRunUncheckedCreateInputSchema ]),
}).strict() ;

export const ExperimentRunUpsertArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunUpsertArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereUniqueInputSchema,
  create: z.union([ ExperimentRunCreateInputSchema,ExperimentRunUncheckedCreateInputSchema ]),
  update: z.union([ ExperimentRunUpdateInputSchema,ExperimentRunUncheckedUpdateInputSchema ]),
}).strict() ;

export const ExperimentRunCreateManyArgsSchema: z.ZodType<Prisma.ExperimentRunCreateManyArgs> = z.object({
  data: z.union([ ExperimentRunCreateManyInputSchema,ExperimentRunCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExperimentRunCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ExperimentRunCreateManyAndReturnArgs> = z.object({
  data: z.union([ ExperimentRunCreateManyInputSchema,ExperimentRunCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExperimentRunDeleteArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunDeleteArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereUniqueInputSchema,
}).strict() ;

export const ExperimentRunUpdateArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ExperimentRunUpdateInputSchema,ExperimentRunUncheckedUpdateInputSchema ]),
  where: ExperimentRunWhereUniqueInputSchema,
}).strict() ;

export const ExperimentRunUpdateManyArgsSchema: z.ZodType<Prisma.ExperimentRunUpdateManyArgs> = z.object({
  data: z.union([ ExperimentRunUpdateManyMutationInputSchema,ExperimentRunUncheckedUpdateManyInputSchema ]),
  where: ExperimentRunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExperimentRunUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ExperimentRunUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ExperimentRunUpdateManyMutationInputSchema,ExperimentRunUncheckedUpdateManyInputSchema ]),
  where: ExperimentRunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExperimentRunDeleteManyArgsSchema: z.ZodType<Prisma.ExperimentRunDeleteManyArgs> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const anomaly_eventCreateArgsSchema: z.ZodType<Omit<Prisma.anomaly_eventCreateArgs, "select" | "include">> = z.object({
  data: z.union([ anomaly_eventCreateInputSchema,anomaly_eventUncheckedCreateInputSchema ]),
}).strict() ;

export const anomaly_eventUpsertArgsSchema: z.ZodType<Omit<Prisma.anomaly_eventUpsertArgs, "select" | "include">> = z.object({
  where: anomaly_eventWhereUniqueInputSchema,
  create: z.union([ anomaly_eventCreateInputSchema,anomaly_eventUncheckedCreateInputSchema ]),
  update: z.union([ anomaly_eventUpdateInputSchema,anomaly_eventUncheckedUpdateInputSchema ]),
}).strict() ;

export const anomaly_eventCreateManyArgsSchema: z.ZodType<Prisma.anomaly_eventCreateManyArgs> = z.object({
  data: z.union([ anomaly_eventCreateManyInputSchema,anomaly_eventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const anomaly_eventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.anomaly_eventCreateManyAndReturnArgs> = z.object({
  data: z.union([ anomaly_eventCreateManyInputSchema,anomaly_eventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const anomaly_eventDeleteArgsSchema: z.ZodType<Omit<Prisma.anomaly_eventDeleteArgs, "select" | "include">> = z.object({
  where: anomaly_eventWhereUniqueInputSchema,
}).strict() ;

export const anomaly_eventUpdateArgsSchema: z.ZodType<Omit<Prisma.anomaly_eventUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ anomaly_eventUpdateInputSchema,anomaly_eventUncheckedUpdateInputSchema ]),
  where: anomaly_eventWhereUniqueInputSchema,
}).strict() ;

export const anomaly_eventUpdateManyArgsSchema: z.ZodType<Prisma.anomaly_eventUpdateManyArgs> = z.object({
  data: z.union([ anomaly_eventUpdateManyMutationInputSchema,anomaly_eventUncheckedUpdateManyInputSchema ]),
  where: anomaly_eventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const anomaly_eventUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.anomaly_eventUpdateManyAndReturnArgs> = z.object({
  data: z.union([ anomaly_eventUpdateManyMutationInputSchema,anomaly_eventUncheckedUpdateManyInputSchema ]),
  where: anomaly_eventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const anomaly_eventDeleteManyArgsSchema: z.ZodType<Prisma.anomaly_eventDeleteManyArgs> = z.object({
  where: anomaly_eventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const anomaly_labelCreateArgsSchema: z.ZodType<Omit<Prisma.anomaly_labelCreateArgs, "select" | "include">> = z.object({
  data: z.union([ anomaly_labelCreateInputSchema,anomaly_labelUncheckedCreateInputSchema ]),
}).strict() ;

export const anomaly_labelUpsertArgsSchema: z.ZodType<Omit<Prisma.anomaly_labelUpsertArgs, "select" | "include">> = z.object({
  where: anomaly_labelWhereUniqueInputSchema,
  create: z.union([ anomaly_labelCreateInputSchema,anomaly_labelUncheckedCreateInputSchema ]),
  update: z.union([ anomaly_labelUpdateInputSchema,anomaly_labelUncheckedUpdateInputSchema ]),
}).strict() ;

export const anomaly_labelCreateManyArgsSchema: z.ZodType<Prisma.anomaly_labelCreateManyArgs> = z.object({
  data: z.union([ anomaly_labelCreateManyInputSchema,anomaly_labelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const anomaly_labelCreateManyAndReturnArgsSchema: z.ZodType<Prisma.anomaly_labelCreateManyAndReturnArgs> = z.object({
  data: z.union([ anomaly_labelCreateManyInputSchema,anomaly_labelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const anomaly_labelDeleteArgsSchema: z.ZodType<Omit<Prisma.anomaly_labelDeleteArgs, "select" | "include">> = z.object({
  where: anomaly_labelWhereUniqueInputSchema,
}).strict() ;

export const anomaly_labelUpdateArgsSchema: z.ZodType<Omit<Prisma.anomaly_labelUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ anomaly_labelUpdateInputSchema,anomaly_labelUncheckedUpdateInputSchema ]),
  where: anomaly_labelWhereUniqueInputSchema,
}).strict() ;

export const anomaly_labelUpdateManyArgsSchema: z.ZodType<Prisma.anomaly_labelUpdateManyArgs> = z.object({
  data: z.union([ anomaly_labelUpdateManyMutationInputSchema,anomaly_labelUncheckedUpdateManyInputSchema ]),
  where: anomaly_labelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const anomaly_labelUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.anomaly_labelUpdateManyAndReturnArgs> = z.object({
  data: z.union([ anomaly_labelUpdateManyMutationInputSchema,anomaly_labelUncheckedUpdateManyInputSchema ]),
  where: anomaly_labelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const anomaly_labelDeleteManyArgsSchema: z.ZodType<Prisma.anomaly_labelDeleteManyArgs> = z.object({
  where: anomaly_labelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const borrow_godCreateArgsSchema: z.ZodType<Omit<Prisma.borrow_godCreateArgs, "select" | "include">> = z.object({
  data: z.union([ borrow_godCreateInputSchema,borrow_godUncheckedCreateInputSchema ]),
}).strict() ;

export const borrow_godUpsertArgsSchema: z.ZodType<Omit<Prisma.borrow_godUpsertArgs, "select" | "include">> = z.object({
  where: borrow_godWhereUniqueInputSchema,
  create: z.union([ borrow_godCreateInputSchema,borrow_godUncheckedCreateInputSchema ]),
  update: z.union([ borrow_godUpdateInputSchema,borrow_godUncheckedUpdateInputSchema ]),
}).strict() ;

export const borrow_godCreateManyArgsSchema: z.ZodType<Prisma.borrow_godCreateManyArgs> = z.object({
  data: z.union([ borrow_godCreateManyInputSchema,borrow_godCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const borrow_godCreateManyAndReturnArgsSchema: z.ZodType<Prisma.borrow_godCreateManyAndReturnArgs> = z.object({
  data: z.union([ borrow_godCreateManyInputSchema,borrow_godCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const borrow_godDeleteArgsSchema: z.ZodType<Omit<Prisma.borrow_godDeleteArgs, "select" | "include">> = z.object({
  where: borrow_godWhereUniqueInputSchema,
}).strict() ;

export const borrow_godUpdateArgsSchema: z.ZodType<Omit<Prisma.borrow_godUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ borrow_godUpdateInputSchema,borrow_godUncheckedUpdateInputSchema ]),
  where: borrow_godWhereUniqueInputSchema,
}).strict() ;

export const borrow_godUpdateManyArgsSchema: z.ZodType<Prisma.borrow_godUpdateManyArgs> = z.object({
  data: z.union([ borrow_godUpdateManyMutationInputSchema,borrow_godUncheckedUpdateManyInputSchema ]),
  where: borrow_godWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const borrow_godUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.borrow_godUpdateManyAndReturnArgs> = z.object({
  data: z.union([ borrow_godUpdateManyMutationInputSchema,borrow_godUncheckedUpdateManyInputSchema ]),
  where: borrow_godWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const borrow_godDeleteManyArgsSchema: z.ZodType<Prisma.borrow_godDeleteManyArgs> = z.object({
  where: borrow_godWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const buddhistCreateArgsSchema: z.ZodType<Omit<Prisma.buddhistCreateArgs, "select" | "include">> = z.object({
  data: z.union([ buddhistCreateInputSchema,buddhistUncheckedCreateInputSchema ]),
}).strict() ;

export const buddhistUpsertArgsSchema: z.ZodType<Omit<Prisma.buddhistUpsertArgs, "select" | "include">> = z.object({
  where: buddhistWhereUniqueInputSchema,
  create: z.union([ buddhistCreateInputSchema,buddhistUncheckedCreateInputSchema ]),
  update: z.union([ buddhistUpdateInputSchema,buddhistUncheckedUpdateInputSchema ]),
}).strict() ;

export const buddhistCreateManyArgsSchema: z.ZodType<Prisma.buddhistCreateManyArgs> = z.object({
  data: z.union([ buddhistCreateManyInputSchema,buddhistCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const buddhistCreateManyAndReturnArgsSchema: z.ZodType<Prisma.buddhistCreateManyAndReturnArgs> = z.object({
  data: z.union([ buddhistCreateManyInputSchema,buddhistCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const buddhistDeleteArgsSchema: z.ZodType<Omit<Prisma.buddhistDeleteArgs, "select" | "include">> = z.object({
  where: buddhistWhereUniqueInputSchema,
}).strict() ;

export const buddhistUpdateArgsSchema: z.ZodType<Omit<Prisma.buddhistUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ buddhistUpdateInputSchema,buddhistUncheckedUpdateInputSchema ]),
  where: buddhistWhereUniqueInputSchema,
}).strict() ;

export const buddhistUpdateManyArgsSchema: z.ZodType<Prisma.buddhistUpdateManyArgs> = z.object({
  data: z.union([ buddhistUpdateManyMutationInputSchema,buddhistUncheckedUpdateManyInputSchema ]),
  where: buddhistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const buddhistUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.buddhistUpdateManyAndReturnArgs> = z.object({
  data: z.union([ buddhistUpdateManyMutationInputSchema,buddhistUncheckedUpdateManyInputSchema ]),
  where: buddhistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const buddhistDeleteManyArgsSchema: z.ZodType<Prisma.buddhistDeleteManyArgs> = z.object({
  where: buddhistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const event_label_linkCreateArgsSchema: z.ZodType<Omit<Prisma.event_label_linkCreateArgs, "select" | "include">> = z.object({
  data: z.union([ event_label_linkCreateInputSchema,event_label_linkUncheckedCreateInputSchema ]),
}).strict() ;

export const event_label_linkUpsertArgsSchema: z.ZodType<Omit<Prisma.event_label_linkUpsertArgs, "select" | "include">> = z.object({
  where: event_label_linkWhereUniqueInputSchema,
  create: z.union([ event_label_linkCreateInputSchema,event_label_linkUncheckedCreateInputSchema ]),
  update: z.union([ event_label_linkUpdateInputSchema,event_label_linkUncheckedUpdateInputSchema ]),
}).strict() ;

export const event_label_linkCreateManyArgsSchema: z.ZodType<Prisma.event_label_linkCreateManyArgs> = z.object({
  data: z.union([ event_label_linkCreateManyInputSchema,event_label_linkCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const event_label_linkCreateManyAndReturnArgsSchema: z.ZodType<Prisma.event_label_linkCreateManyAndReturnArgs> = z.object({
  data: z.union([ event_label_linkCreateManyInputSchema,event_label_linkCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const event_label_linkDeleteArgsSchema: z.ZodType<Omit<Prisma.event_label_linkDeleteArgs, "select" | "include">> = z.object({
  where: event_label_linkWhereUniqueInputSchema,
}).strict() ;

export const event_label_linkUpdateArgsSchema: z.ZodType<Omit<Prisma.event_label_linkUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ event_label_linkUpdateInputSchema,event_label_linkUncheckedUpdateInputSchema ]),
  where: event_label_linkWhereUniqueInputSchema,
}).strict() ;

export const event_label_linkUpdateManyArgsSchema: z.ZodType<Prisma.event_label_linkUpdateManyArgs> = z.object({
  data: z.union([ event_label_linkUpdateManyMutationInputSchema,event_label_linkUncheckedUpdateManyInputSchema ]),
  where: event_label_linkWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const event_label_linkUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.event_label_linkUpdateManyAndReturnArgs> = z.object({
  data: z.union([ event_label_linkUpdateManyMutationInputSchema,event_label_linkUncheckedUpdateManyInputSchema ]),
  where: event_label_linkWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const event_label_linkDeleteManyArgsSchema: z.ZodType<Prisma.event_label_linkDeleteManyArgs> = z.object({
  where: event_label_linkWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const familyCreateArgsSchema: z.ZodType<Omit<Prisma.familyCreateArgs, "select" | "include">> = z.object({
  data: z.union([ familyCreateInputSchema,familyUncheckedCreateInputSchema ]),
}).strict() ;

export const familyUpsertArgsSchema: z.ZodType<Omit<Prisma.familyUpsertArgs, "select" | "include">> = z.object({
  where: familyWhereUniqueInputSchema,
  create: z.union([ familyCreateInputSchema,familyUncheckedCreateInputSchema ]),
  update: z.union([ familyUpdateInputSchema,familyUncheckedUpdateInputSchema ]),
}).strict() ;

export const familyCreateManyArgsSchema: z.ZodType<Prisma.familyCreateManyArgs> = z.object({
  data: z.union([ familyCreateManyInputSchema,familyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const familyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.familyCreateManyAndReturnArgs> = z.object({
  data: z.union([ familyCreateManyInputSchema,familyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const familyDeleteArgsSchema: z.ZodType<Omit<Prisma.familyDeleteArgs, "select" | "include">> = z.object({
  where: familyWhereUniqueInputSchema,
}).strict() ;

export const familyUpdateArgsSchema: z.ZodType<Omit<Prisma.familyUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ familyUpdateInputSchema,familyUncheckedUpdateInputSchema ]),
  where: familyWhereUniqueInputSchema,
}).strict() ;

export const familyUpdateManyArgsSchema: z.ZodType<Prisma.familyUpdateManyArgs> = z.object({
  data: z.union([ familyUpdateManyMutationInputSchema,familyUncheckedUpdateManyInputSchema ]),
  where: familyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const familyUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.familyUpdateManyAndReturnArgs> = z.object({
  data: z.union([ familyUpdateManyMutationInputSchema,familyUncheckedUpdateManyInputSchema ]),
  where: familyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const familyDeleteManyArgsSchema: z.ZodType<Prisma.familyDeleteManyArgs> = z.object({
  where: familyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const family_memberCreateArgsSchema: z.ZodType<Omit<Prisma.family_memberCreateArgs, "select" | "include">> = z.object({
  data: z.union([ family_memberCreateInputSchema,family_memberUncheckedCreateInputSchema ]),
}).strict() ;

export const family_memberUpsertArgsSchema: z.ZodType<Omit<Prisma.family_memberUpsertArgs, "select" | "include">> = z.object({
  where: family_memberWhereUniqueInputSchema,
  create: z.union([ family_memberCreateInputSchema,family_memberUncheckedCreateInputSchema ]),
  update: z.union([ family_memberUpdateInputSchema,family_memberUncheckedUpdateInputSchema ]),
}).strict() ;

export const family_memberCreateManyArgsSchema: z.ZodType<Prisma.family_memberCreateManyArgs> = z.object({
  data: z.union([ family_memberCreateManyInputSchema,family_memberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const family_memberCreateManyAndReturnArgsSchema: z.ZodType<Prisma.family_memberCreateManyAndReturnArgs> = z.object({
  data: z.union([ family_memberCreateManyInputSchema,family_memberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const family_memberDeleteArgsSchema: z.ZodType<Omit<Prisma.family_memberDeleteArgs, "select" | "include">> = z.object({
  where: family_memberWhereUniqueInputSchema,
}).strict() ;

export const family_memberUpdateArgsSchema: z.ZodType<Omit<Prisma.family_memberUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ family_memberUpdateInputSchema,family_memberUncheckedUpdateInputSchema ]),
  where: family_memberWhereUniqueInputSchema,
}).strict() ;

export const family_memberUpdateManyArgsSchema: z.ZodType<Prisma.family_memberUpdateManyArgs> = z.object({
  data: z.union([ family_memberUpdateManyMutationInputSchema,family_memberUncheckedUpdateManyInputSchema ]),
  where: family_memberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const family_memberUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.family_memberUpdateManyAndReturnArgs> = z.object({
  data: z.union([ family_memberUpdateManyMutationInputSchema,family_memberUncheckedUpdateManyInputSchema ]),
  where: family_memberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const family_memberDeleteManyArgsSchema: z.ZodType<Prisma.family_memberDeleteManyArgs> = z.object({
  where: family_memberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const god_nameCreateArgsSchema: z.ZodType<Omit<Prisma.god_nameCreateArgs, "select" | "include">> = z.object({
  data: z.union([ god_nameCreateInputSchema,god_nameUncheckedCreateInputSchema ]),
}).strict() ;

export const god_nameUpsertArgsSchema: z.ZodType<Omit<Prisma.god_nameUpsertArgs, "select" | "include">> = z.object({
  where: god_nameWhereUniqueInputSchema,
  create: z.union([ god_nameCreateInputSchema,god_nameUncheckedCreateInputSchema ]),
  update: z.union([ god_nameUpdateInputSchema,god_nameUncheckedUpdateInputSchema ]),
}).strict() ;

export const god_nameCreateManyArgsSchema: z.ZodType<Prisma.god_nameCreateManyArgs> = z.object({
  data: z.union([ god_nameCreateManyInputSchema,god_nameCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const god_nameCreateManyAndReturnArgsSchema: z.ZodType<Prisma.god_nameCreateManyAndReturnArgs> = z.object({
  data: z.union([ god_nameCreateManyInputSchema,god_nameCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const god_nameDeleteArgsSchema: z.ZodType<Omit<Prisma.god_nameDeleteArgs, "select" | "include">> = z.object({
  where: god_nameWhereUniqueInputSchema,
}).strict() ;

export const god_nameUpdateArgsSchema: z.ZodType<Omit<Prisma.god_nameUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ god_nameUpdateInputSchema,god_nameUncheckedUpdateInputSchema ]),
  where: god_nameWhereUniqueInputSchema,
}).strict() ;

export const god_nameUpdateManyArgsSchema: z.ZodType<Prisma.god_nameUpdateManyArgs> = z.object({
  data: z.union([ god_nameUpdateManyMutationInputSchema,god_nameUncheckedUpdateManyInputSchema ]),
  where: god_nameWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const god_nameUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.god_nameUpdateManyAndReturnArgs> = z.object({
  data: z.union([ god_nameUpdateManyMutationInputSchema,god_nameUncheckedUpdateManyInputSchema ]),
  where: god_nameWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const god_nameDeleteManyArgsSchema: z.ZodType<Prisma.god_nameDeleteManyArgs> = z.object({
  where: god_nameWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const member_classCreateArgsSchema: z.ZodType<Omit<Prisma.member_classCreateArgs, "select" | "include">> = z.object({
  data: z.union([ member_classCreateInputSchema,member_classUncheckedCreateInputSchema ]),
}).strict() ;

export const member_classUpsertArgsSchema: z.ZodType<Omit<Prisma.member_classUpsertArgs, "select" | "include">> = z.object({
  where: member_classWhereUniqueInputSchema,
  create: z.union([ member_classCreateInputSchema,member_classUncheckedCreateInputSchema ]),
  update: z.union([ member_classUpdateInputSchema,member_classUncheckedUpdateInputSchema ]),
}).strict() ;

export const member_classCreateManyArgsSchema: z.ZodType<Prisma.member_classCreateManyArgs> = z.object({
  data: z.union([ member_classCreateManyInputSchema,member_classCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const member_classCreateManyAndReturnArgsSchema: z.ZodType<Prisma.member_classCreateManyAndReturnArgs> = z.object({
  data: z.union([ member_classCreateManyInputSchema,member_classCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const member_classDeleteArgsSchema: z.ZodType<Omit<Prisma.member_classDeleteArgs, "select" | "include">> = z.object({
  where: member_classWhereUniqueInputSchema,
}).strict() ;

export const member_classUpdateArgsSchema: z.ZodType<Omit<Prisma.member_classUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ member_classUpdateInputSchema,member_classUncheckedUpdateInputSchema ]),
  where: member_classWhereUniqueInputSchema,
}).strict() ;

export const member_classUpdateManyArgsSchema: z.ZodType<Prisma.member_classUpdateManyArgs> = z.object({
  data: z.union([ member_classUpdateManyMutationInputSchema,member_classUncheckedUpdateManyInputSchema ]),
  where: member_classWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const member_classUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.member_classUpdateManyAndReturnArgs> = z.object({
  data: z.union([ member_classUpdateManyMutationInputSchema,member_classUncheckedUpdateManyInputSchema ]),
  where: member_classWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const member_classDeleteManyArgsSchema: z.ZodType<Prisma.member_classDeleteManyArgs> = z.object({
  where: member_classWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mgyearCreateArgsSchema: z.ZodType<Omit<Prisma.mgyearCreateArgs, "select" | "include">> = z.object({
  data: z.union([ mgyearCreateInputSchema,mgyearUncheckedCreateInputSchema ]),
}).strict() ;

export const mgyearUpsertArgsSchema: z.ZodType<Omit<Prisma.mgyearUpsertArgs, "select" | "include">> = z.object({
  where: mgyearWhereUniqueInputSchema,
  create: z.union([ mgyearCreateInputSchema,mgyearUncheckedCreateInputSchema ]),
  update: z.union([ mgyearUpdateInputSchema,mgyearUncheckedUpdateInputSchema ]),
}).strict() ;

export const mgyearCreateManyArgsSchema: z.ZodType<Prisma.mgyearCreateManyArgs> = z.object({
  data: z.union([ mgyearCreateManyInputSchema,mgyearCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const mgyearCreateManyAndReturnArgsSchema: z.ZodType<Prisma.mgyearCreateManyAndReturnArgs> = z.object({
  data: z.union([ mgyearCreateManyInputSchema,mgyearCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const mgyearDeleteArgsSchema: z.ZodType<Omit<Prisma.mgyearDeleteArgs, "select" | "include">> = z.object({
  where: mgyearWhereUniqueInputSchema,
}).strict() ;

export const mgyearUpdateArgsSchema: z.ZodType<Omit<Prisma.mgyearUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ mgyearUpdateInputSchema,mgyearUncheckedUpdateInputSchema ]),
  where: mgyearWhereUniqueInputSchema,
}).strict() ;

export const mgyearUpdateManyArgsSchema: z.ZodType<Prisma.mgyearUpdateManyArgs> = z.object({
  data: z.union([ mgyearUpdateManyMutationInputSchema,mgyearUncheckedUpdateManyInputSchema ]),
  where: mgyearWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mgyearUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.mgyearUpdateManyAndReturnArgs> = z.object({
  data: z.union([ mgyearUpdateManyMutationInputSchema,mgyearUncheckedUpdateManyInputSchema ]),
  where: mgyearWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const mgyearDeleteManyArgsSchema: z.ZodType<Prisma.mgyearDeleteManyArgs> = z.object({
  where: mgyearWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const service1CreateArgsSchema: z.ZodType<Omit<Prisma.service1CreateArgs, "select" | "include">> = z.object({
  data: z.union([ service1CreateInputSchema,service1UncheckedCreateInputSchema ]),
}).strict() ;

export const service1UpsertArgsSchema: z.ZodType<Omit<Prisma.service1UpsertArgs, "select" | "include">> = z.object({
  where: service1WhereUniqueInputSchema,
  create: z.union([ service1CreateInputSchema,service1UncheckedCreateInputSchema ]),
  update: z.union([ service1UpdateInputSchema,service1UncheckedUpdateInputSchema ]),
}).strict() ;

export const service1CreateManyArgsSchema: z.ZodType<Prisma.service1CreateManyArgs> = z.object({
  data: z.union([ service1CreateManyInputSchema,service1CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const service1CreateManyAndReturnArgsSchema: z.ZodType<Prisma.service1CreateManyAndReturnArgs> = z.object({
  data: z.union([ service1CreateManyInputSchema,service1CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const service1DeleteArgsSchema: z.ZodType<Omit<Prisma.service1DeleteArgs, "select" | "include">> = z.object({
  where: service1WhereUniqueInputSchema,
}).strict() ;

export const service1UpdateArgsSchema: z.ZodType<Omit<Prisma.service1UpdateArgs, "select" | "include">> = z.object({
  data: z.union([ service1UpdateInputSchema,service1UncheckedUpdateInputSchema ]),
  where: service1WhereUniqueInputSchema,
}).strict() ;

export const service1UpdateManyArgsSchema: z.ZodType<Prisma.service1UpdateManyArgs> = z.object({
  data: z.union([ service1UpdateManyMutationInputSchema,service1UncheckedUpdateManyInputSchema ]),
  where: service1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const service1UpdateManyAndReturnArgsSchema: z.ZodType<Prisma.service1UpdateManyAndReturnArgs> = z.object({
  data: z.union([ service1UpdateManyMutationInputSchema,service1UncheckedUpdateManyInputSchema ]),
  where: service1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const service1DeleteManyArgsSchema: z.ZodType<Prisma.service1DeleteManyArgs> = z.object({
  where: service1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const service2CreateArgsSchema: z.ZodType<Omit<Prisma.service2CreateArgs, "select" | "include">> = z.object({
  data: z.union([ service2CreateInputSchema,service2UncheckedCreateInputSchema ]),
}).strict() ;

export const service2UpsertArgsSchema: z.ZodType<Omit<Prisma.service2UpsertArgs, "select" | "include">> = z.object({
  where: service2WhereUniqueInputSchema,
  create: z.union([ service2CreateInputSchema,service2UncheckedCreateInputSchema ]),
  update: z.union([ service2UpdateInputSchema,service2UncheckedUpdateInputSchema ]),
}).strict() ;

export const service2CreateManyArgsSchema: z.ZodType<Prisma.service2CreateManyArgs> = z.object({
  data: z.union([ service2CreateManyInputSchema,service2CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const service2CreateManyAndReturnArgsSchema: z.ZodType<Prisma.service2CreateManyAndReturnArgs> = z.object({
  data: z.union([ service2CreateManyInputSchema,service2CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const service2DeleteArgsSchema: z.ZodType<Omit<Prisma.service2DeleteArgs, "select" | "include">> = z.object({
  where: service2WhereUniqueInputSchema,
}).strict() ;

export const service2UpdateArgsSchema: z.ZodType<Omit<Prisma.service2UpdateArgs, "select" | "include">> = z.object({
  data: z.union([ service2UpdateInputSchema,service2UncheckedUpdateInputSchema ]),
  where: service2WhereUniqueInputSchema,
}).strict() ;

export const service2UpdateManyArgsSchema: z.ZodType<Prisma.service2UpdateManyArgs> = z.object({
  data: z.union([ service2UpdateManyMutationInputSchema,service2UncheckedUpdateManyInputSchema ]),
  where: service2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const service2UpdateManyAndReturnArgsSchema: z.ZodType<Prisma.service2UpdateManyAndReturnArgs> = z.object({
  data: z.union([ service2UpdateManyMutationInputSchema,service2UncheckedUpdateManyInputSchema ]),
  where: service2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const service2DeleteManyArgsSchema: z.ZodType<Prisma.service2DeleteManyArgs> = z.object({
  where: service2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const servicing1CreateArgsSchema: z.ZodType<Omit<Prisma.servicing1CreateArgs, "select" | "include">> = z.object({
  data: z.union([ servicing1CreateInputSchema,servicing1UncheckedCreateInputSchema ]),
}).strict() ;

export const servicing1UpsertArgsSchema: z.ZodType<Omit<Prisma.servicing1UpsertArgs, "select" | "include">> = z.object({
  where: servicing1WhereUniqueInputSchema,
  create: z.union([ servicing1CreateInputSchema,servicing1UncheckedCreateInputSchema ]),
  update: z.union([ servicing1UpdateInputSchema,servicing1UncheckedUpdateInputSchema ]),
}).strict() ;

export const servicing1CreateManyArgsSchema: z.ZodType<Prisma.servicing1CreateManyArgs> = z.object({
  data: z.union([ servicing1CreateManyInputSchema,servicing1CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const servicing1CreateManyAndReturnArgsSchema: z.ZodType<Prisma.servicing1CreateManyAndReturnArgs> = z.object({
  data: z.union([ servicing1CreateManyInputSchema,servicing1CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const servicing1DeleteArgsSchema: z.ZodType<Omit<Prisma.servicing1DeleteArgs, "select" | "include">> = z.object({
  where: servicing1WhereUniqueInputSchema,
}).strict() ;

export const servicing1UpdateArgsSchema: z.ZodType<Omit<Prisma.servicing1UpdateArgs, "select" | "include">> = z.object({
  data: z.union([ servicing1UpdateInputSchema,servicing1UncheckedUpdateInputSchema ]),
  where: servicing1WhereUniqueInputSchema,
}).strict() ;

export const servicing1UpdateManyArgsSchema: z.ZodType<Prisma.servicing1UpdateManyArgs> = z.object({
  data: z.union([ servicing1UpdateManyMutationInputSchema,servicing1UncheckedUpdateManyInputSchema ]),
  where: servicing1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const servicing1UpdateManyAndReturnArgsSchema: z.ZodType<Prisma.servicing1UpdateManyAndReturnArgs> = z.object({
  data: z.union([ servicing1UpdateManyMutationInputSchema,servicing1UncheckedUpdateManyInputSchema ]),
  where: servicing1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const servicing1DeleteManyArgsSchema: z.ZodType<Prisma.servicing1DeleteManyArgs> = z.object({
  where: servicing1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const servicing2CreateArgsSchema: z.ZodType<Omit<Prisma.servicing2CreateArgs, "select" | "include">> = z.object({
  data: z.union([ servicing2CreateInputSchema,servicing2UncheckedCreateInputSchema ]),
}).strict() ;

export const servicing2UpsertArgsSchema: z.ZodType<Omit<Prisma.servicing2UpsertArgs, "select" | "include">> = z.object({
  where: servicing2WhereUniqueInputSchema,
  create: z.union([ servicing2CreateInputSchema,servicing2UncheckedCreateInputSchema ]),
  update: z.union([ servicing2UpdateInputSchema,servicing2UncheckedUpdateInputSchema ]),
}).strict() ;

export const servicing2CreateManyArgsSchema: z.ZodType<Prisma.servicing2CreateManyArgs> = z.object({
  data: z.union([ servicing2CreateManyInputSchema,servicing2CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const servicing2CreateManyAndReturnArgsSchema: z.ZodType<Prisma.servicing2CreateManyAndReturnArgs> = z.object({
  data: z.union([ servicing2CreateManyInputSchema,servicing2CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const servicing2DeleteArgsSchema: z.ZodType<Omit<Prisma.servicing2DeleteArgs, "select" | "include">> = z.object({
  where: servicing2WhereUniqueInputSchema,
}).strict() ;

export const servicing2UpdateArgsSchema: z.ZodType<Omit<Prisma.servicing2UpdateArgs, "select" | "include">> = z.object({
  data: z.union([ servicing2UpdateInputSchema,servicing2UncheckedUpdateInputSchema ]),
  where: servicing2WhereUniqueInputSchema,
}).strict() ;

export const servicing2UpdateManyArgsSchema: z.ZodType<Prisma.servicing2UpdateManyArgs> = z.object({
  data: z.union([ servicing2UpdateManyMutationInputSchema,servicing2UncheckedUpdateManyInputSchema ]),
  where: servicing2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const servicing2UpdateManyAndReturnArgsSchema: z.ZodType<Prisma.servicing2UpdateManyAndReturnArgs> = z.object({
  data: z.union([ servicing2UpdateManyMutationInputSchema,servicing2UncheckedUpdateManyInputSchema ]),
  where: servicing2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const servicing2DeleteManyArgsSchema: z.ZodType<Prisma.servicing2DeleteManyArgs> = z.object({
  where: servicing2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const templeCreateArgsSchema: z.ZodType<Omit<Prisma.templeCreateArgs, "select" | "include">> = z.object({
  data: z.union([ templeCreateInputSchema,templeUncheckedCreateInputSchema ]),
}).strict() ;

export const templeUpsertArgsSchema: z.ZodType<Omit<Prisma.templeUpsertArgs, "select" | "include">> = z.object({
  where: templeWhereUniqueInputSchema,
  create: z.union([ templeCreateInputSchema,templeUncheckedCreateInputSchema ]),
  update: z.union([ templeUpdateInputSchema,templeUncheckedUpdateInputSchema ]),
}).strict() ;

export const templeCreateManyArgsSchema: z.ZodType<Prisma.templeCreateManyArgs> = z.object({
  data: z.union([ templeCreateManyInputSchema,templeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const templeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.templeCreateManyAndReturnArgs> = z.object({
  data: z.union([ templeCreateManyInputSchema,templeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const templeDeleteArgsSchema: z.ZodType<Omit<Prisma.templeDeleteArgs, "select" | "include">> = z.object({
  where: templeWhereUniqueInputSchema,
}).strict() ;

export const templeUpdateArgsSchema: z.ZodType<Omit<Prisma.templeUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ templeUpdateInputSchema,templeUncheckedUpdateInputSchema ]),
  where: templeWhereUniqueInputSchema,
}).strict() ;

export const templeUpdateManyArgsSchema: z.ZodType<Prisma.templeUpdateManyArgs> = z.object({
  data: z.union([ templeUpdateManyMutationInputSchema,templeUncheckedUpdateManyInputSchema ]),
  where: templeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const templeUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.templeUpdateManyAndReturnArgs> = z.object({
  data: z.union([ templeUpdateManyMutationInputSchema,templeUncheckedUpdateManyInputSchema ]),
  where: templeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const templeDeleteManyArgsSchema: z.ZodType<Prisma.templeDeleteManyArgs> = z.object({
  where: templeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TrainedModelCreateArgsSchema: z.ZodType<Omit<Prisma.TrainedModelCreateArgs, "select" | "include">> = z.object({
  data: z.union([ TrainedModelCreateInputSchema,TrainedModelUncheckedCreateInputSchema ]),
}).strict() ;

export const TrainedModelUpsertArgsSchema: z.ZodType<Omit<Prisma.TrainedModelUpsertArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereUniqueInputSchema,
  create: z.union([ TrainedModelCreateInputSchema,TrainedModelUncheckedCreateInputSchema ]),
  update: z.union([ TrainedModelUpdateInputSchema,TrainedModelUncheckedUpdateInputSchema ]),
}).strict() ;

export const TrainedModelCreateManyArgsSchema: z.ZodType<Prisma.TrainedModelCreateManyArgs> = z.object({
  data: z.union([ TrainedModelCreateManyInputSchema,TrainedModelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TrainedModelCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TrainedModelCreateManyAndReturnArgs> = z.object({
  data: z.union([ TrainedModelCreateManyInputSchema,TrainedModelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TrainedModelDeleteArgsSchema: z.ZodType<Omit<Prisma.TrainedModelDeleteArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereUniqueInputSchema,
}).strict() ;

export const TrainedModelUpdateArgsSchema: z.ZodType<Omit<Prisma.TrainedModelUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ TrainedModelUpdateInputSchema,TrainedModelUncheckedUpdateInputSchema ]),
  where: TrainedModelWhereUniqueInputSchema,
}).strict() ;

export const TrainedModelUpdateManyArgsSchema: z.ZodType<Prisma.TrainedModelUpdateManyArgs> = z.object({
  data: z.union([ TrainedModelUpdateManyMutationInputSchema,TrainedModelUncheckedUpdateManyInputSchema ]),
  where: TrainedModelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TrainedModelUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TrainedModelUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TrainedModelUpdateManyMutationInputSchema,TrainedModelUncheckedUpdateManyInputSchema ]),
  where: TrainedModelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TrainedModelDeleteManyArgsSchema: z.ZodType<Prisma.TrainedModelDeleteManyArgs> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;