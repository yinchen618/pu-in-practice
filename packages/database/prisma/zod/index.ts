import { z } from 'zod';
import { Prisma } from '@prisma/client';
import Decimal from 'decimal.js';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;

// DECIMAL
//------------------------------------------------------

export const DecimalJsLikeSchema: z.ZodType<Prisma.DecimalJsLike> = z.object({
  d: z.array(z.number()),
  e: z.number(),
  s: z.number(),
  toFixed: z.function(z.tuple([]), z.string()),
})

export const DECIMAL_STRING_REGEX = /^(?:-?Infinity|NaN|-?(?:0[bB][01]+(?:\.[01]+)?(?:[pP][-+]?\d+)?|0[oO][0-7]+(?:\.[0-7]+)?(?:[pP][-+]?\d+)?|0[xX][\da-fA-F]+(?:\.[\da-fA-F]+)?(?:[pP][-+]?\d+)?|(?:\d+|\d*\.\d+)(?:[eE][-+]?\d+)?))$/;

export const isValidDecimalInput =
  (v?: null | string | number | Prisma.DecimalJsLike): v is string | number | Prisma.DecimalJsLike => {
    if (v === undefined || v === null) return false;
    return (
      (typeof v === 'object' && 'd' in v && 'e' in v && 's' in v && 'toFixed' in v) ||
      (typeof v === 'string' && DECIMAL_STRING_REGEX.test(v)) ||
      typeof v === 'number'
    )
  };

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const UserScalarFieldEnumSchema = z.enum(['id','name','email','emailVerified','image','createdAt','updatedAt','username','role','banned','banReason','banExpires','onboardingComplete','paymentsCustomerId','locale','twoFactorEnabled']);

export const SessionScalarFieldEnumSchema = z.enum(['id','expiresAt','ipAddress','userAgent','userId','impersonatedBy','activeOrganizationId','token','createdAt','updatedAt']);

export const AccountScalarFieldEnumSchema = z.enum(['id','accountId','providerId','userId','accessToken','refreshToken','idToken','expiresAt','password','accessTokenExpiresAt','refreshTokenExpiresAt','scope','createdAt','updatedAt']);

export const VerificationScalarFieldEnumSchema = z.enum(['id','identifier','value','expiresAt','createdAt','updatedAt']);

export const PasskeyScalarFieldEnumSchema = z.enum(['id','name','publicKey','userId','credentialID','counter','deviceType','backedUp','transports','createdAt']);

export const TwoFactorScalarFieldEnumSchema = z.enum(['id','secret','backupCodes','userId']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','slug','logo','createdAt','metadata','paymentsCustomerId']);

export const RelationshipManagerScalarFieldEnumSchema = z.enum(['id','name','email','phone','status','customerCount','joinDate','organizationId','createdAt','updatedAt','category','resignDate']);

export const CustomerScalarFieldEnumSchema = z.enum(['id','name','email','phone','organizationId','rm1Id','rm2Id','finder1Id','finder2Id','createdAt','updatedAt','finder1ProfitShare','finder2ProfitShare','rm1ProfitShare','rm2ProfitShare','code']);

export const MemberScalarFieldEnumSchema = z.enum(['id','organizationId','userId','role','createdAt']);

export const InvitationScalarFieldEnumSchema = z.enum(['id','organizationId','email','role','status','expiresAt','inviterId']);

export const PurchaseScalarFieldEnumSchema = z.enum(['id','organizationId','userId','type','customerId','subscriptionId','productId','status','createdAt','updatedAt']);

export const AiChatScalarFieldEnumSchema = z.enum(['id','organizationId','userId','title','messages','createdAt','updatedAt']);

export const BankAccountScalarFieldEnumSchema = z.enum(['id','bankName','accountName','accountNumber','currency','balance','status','organizationId','createdAt','updatedAt','customerId']);

export const ExpenseScalarFieldEnumSchema = z.enum(['id','category','amount','currency','exchangeRate','receiptUrl','description','date','organizationId','createdAt','updatedAt','receiptUrls','sgdAmount','usdAmount','usdRate','rmId']);

export const ProductScalarFieldEnumSchema = z.enum(['id','name','code','currency','organizationId','createdAt','updatedAt','distributionType','status','category']);

export const ProfitSharingScalarFieldEnumSchema = z.enum(['id','customerId','bankAccountId','organizationId','createdAt','updatedAt','amount','productId','profitDate','companyProfitSharePercent','companyRevenue','companyRevenueOriginal','currency','directTradeBookingFee','finderProfitSharePercent','findersRevenueOriginal','findersRevenueUSD','fxRate','rmProfitSharePercent','rmRevenueOriginal','rmRevenueUSD','shareable','finder1Id','finder1Name','finder1ProfitSharePercent','finder1RevenueOriginal','finder1RevenueUSD','finder2Id','finder2Name','finder2ProfitSharePercent','finder2RevenueOriginal','finder2RevenueUSD','rm1Id','rm1Name','rm1ProfitSharePercent','rm1RevenueOriginal','rm1RevenueUSD','rm2Id','rm2Name','rm2ProfitSharePercent','rm2RevenueOriginal','rm2RevenueUSD','bankRetroPercent','companyFeePercent','companyRevenuePercent','finder1FeePercent','finder1RevenuePercent','finder2FeePercent','finder2RevenuePercent','rm1FeePercent','rm1RevenuePercent','rm2FeePercent','rm2RevenuePercent']);

export const AssetTransactionScalarFieldEnumSchema = z.enum(['id','customerId','date','currency','type','amount','description','createdAt','updatedAt']);

export const AmmeterScalarFieldEnumSchema = z.enum(['id','electricMeterNumber','electricMeterName','deviceNumber','factory','device','voltage','currents','power','battery','switchState','networkState','lastUpdated','organizationId','createdAt','updatedAt']);

export const AmmeterLogScalarFieldEnumSchema = z.enum(['id','deviceNumber','action','factory','device','voltage','currents','power','battery','switchState','networkState','lastUpdated','requestData','responseData','statusCode','success','errorMessage','responseTime','ipAddress','userAgent','userId','organizationId','createdAt']);

export const ExperimentRunScalarFieldEnumSchema = z.enum(['id','name','description','filteringParameters','status','candidateCount','positiveLabelCount','negativeLabelCount','createdAt','updatedAt','candidateStats']);

export const AnomalyEventScalarFieldEnumSchema = z.enum(['id','eventId','meterId','eventTimestamp','detectionRule','score','dataWindow','status','reviewerId','reviewTimestamp','justificationNotes','createdAt','updatedAt','experimentRunId']);

export const AnomalyLabelScalarFieldEnumSchema = z.enum(['id','name','description','createdAt','updatedAt']);

export const BorrowGodScalarFieldEnumSchema = z.enum(['id','godNameId','applyName','startDate','endDate','typeId','organizationId','createdAt','updatedAt']);

export const BuddhistScalarFieldEnumSchema = z.enum(['id','name','cellphone','phone','templeNowText','organizationId','createdAt','updatedAt']);

export const EventLabelLinkScalarFieldEnumSchema = z.enum(['id','eventId','labelId','createdAt']);

export const FamilyScalarFieldEnumSchema = z.enum(['id','name','address','phone','mobile','email','note','postalCode','organizationId','createdAt','updatedAt']);

export const FamilyMemberScalarFieldEnumSchema = z.enum(['id','name','relation','birthday','lunarDate','gender','note','mainPerson','mailThis','isLive','postcode','addr','familyId','organizationId','createdAt','updatedAt']);

export const GodNameScalarFieldEnumSchema = z.enum(['id','value','price','order','organizationId','createdAt','updatedAt']);

export const MemberClassScalarFieldEnumSchema = z.enum(['id','name','type','level','organizationId','createdAt','updatedAt']);

export const MgYearScalarFieldEnumSchema = z.enum(['id','order','mgyear','year','nowUse','organizationId','createdAt','updatedAt']);

export const Service1ScalarFieldEnumSchema = z.enum(['id','name','type','level','nowUse','organizationId','createdAt','updatedAt']);

export const Service2ScalarFieldEnumSchema = z.enum(['id','name','level','nowUse','service1Id','organizationId','createdAt','updatedAt']);

export const Servicing1ScalarFieldEnumSchema = z.enum(['id','familyId','organizationId','ordernum','year','applyDate','applyText','cellphone','addr','printType1Id','service1Id','service2Id','serial','accReceivable','accReceived','accPending','payStatus','payMethod','payCurrency','receiptNum','booksNum','payee','advisePeople','ps','createdAt','updatedAt']);

export const Servicing2ScalarFieldEnumSchema = z.enum(['id','familyId','organizationId','servicing1Id','ordernum','year','service1Id','service2Id','serial','praytypeId','printType1Id','printType2Id','livename','people1','passname','passname1','passname2','passname3','passname4','people0','name','sexualId','sexualText','liveYear','boxNum','rowTotal','bornYear','bornMonth','bornDay','bornTime','addr','ps','createdAt','updatedAt']);

export const TempleScalarFieldEnumSchema = z.enum(['id','name','address','phone','email','description','organizationId','createdAt','updatedAt']);

export const TrainedModelScalarFieldEnumSchema = z.enum(['id','name','scenarioType','status','experimentRunId','modelConfig','dataSourceConfig','modelPath','trainingMetrics','createdAt','completedAt']);

export const EvaluationRunScalarFieldEnumSchema = z.enum(['id','name','scenarioType','status','trainedModelId','testSetSource','evaluationMetrics','createdAt','completedAt']);

export const ModelPredictionScalarFieldEnumSchema = z.enum(['id','evaluationRunId','anomalyEventId','timestamp','predictionScore','groundTruth']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.DbNull : value);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const PurchaseTypeSchema = z.enum(['SUBSCRIPTION','ONE_TIME']);

export type PurchaseTypeType = `${z.infer<typeof PurchaseTypeSchema>}`

export const AnomalyEventStatusSchema = z.enum(['UNREVIEWED','CONFIRMED_POSITIVE','REJECTED_NORMAL']);

export type AnomalyEventStatusType = `${z.infer<typeof AnomalyEventStatusSchema>}`

export const ExperimentRunStatusSchema = z.enum(['CONFIGURING','LABELING','COMPLETED']);

export type ExperimentRunStatusType = `${z.infer<typeof ExperimentRunStatusSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  username: z.string().nullable(),
  role: z.string().nullable(),
  banned: z.boolean().nullable(),
  banReason: z.string().nullable(),
  banExpires: z.coerce.date().nullable(),
  onboardingComplete: z.boolean(),
  paymentsCustomerId: z.string().nullable(),
  locale: z.string().nullable(),
  twoFactorEnabled: z.boolean().nullable(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string().cuid(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().nullable(),
  activeOrganizationId: z.string().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string().cuid(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().nullable(),
  refreshToken: z.string().nullable(),
  idToken: z.string().nullable(),
  expiresAt: z.coerce.date().nullable(),
  password: z.string().nullable(),
  accessTokenExpiresAt: z.coerce.date().nullable(),
  refreshTokenExpiresAt: z.coerce.date().nullable(),
  scope: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// VERIFICATION SCHEMA
/////////////////////////////////////////

export const VerificationSchema = z.object({
  id: z.string().cuid(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().nullable(),
  updatedAt: z.coerce.date().nullable(),
})

export type Verification = z.infer<typeof VerificationSchema>

/////////////////////////////////////////
// PASSKEY SCHEMA
/////////////////////////////////////////

export const PasskeySchema = z.object({
  id: z.string().cuid(),
  name: z.string().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
})

export type Passkey = z.infer<typeof PasskeySchema>

/////////////////////////////////////////
// TWO FACTOR SCHEMA
/////////////////////////////////////////

export const TwoFactorSchema = z.object({
  id: z.string().cuid(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string(),
})

export type TwoFactor = z.infer<typeof TwoFactorSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  slug: z.string().nullable(),
  logo: z.string().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().nullable(),
  paymentsCustomerId: z.string().nullable(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// RELATIONSHIP MANAGER SCHEMA
/////////////////////////////////////////

export const RelationshipManagerSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  email: z.string(),
  phone: z.string().nullable(),
  status: z.string(),
  customerCount: z.number().int(),
  joinDate: z.coerce.date(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  category: z.string(),
  resignDate: z.coerce.date().nullable(),
})

export type RelationshipManager = z.infer<typeof RelationshipManagerSchema>

/////////////////////////////////////////
// CUSTOMER SCHEMA
/////////////////////////////////////////

export const CustomerSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  email: z.string().nullable(),
  phone: z.string().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().nullable(),
  rm2Id: z.string().nullable(),
  finder1Id: z.string().nullable(),
  finder2Id: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  finder1ProfitShare: z.instanceof(Prisma.Decimal, { message: "Field 'finder1ProfitShare' must be a Decimal. Location: ['Models', 'Customer']"}).nullable(),
  finder2ProfitShare: z.instanceof(Prisma.Decimal, { message: "Field 'finder2ProfitShare' must be a Decimal. Location: ['Models', 'Customer']"}).nullable(),
  rm1ProfitShare: z.instanceof(Prisma.Decimal, { message: "Field 'rm1ProfitShare' must be a Decimal. Location: ['Models', 'Customer']"}).nullable(),
  rm2ProfitShare: z.instanceof(Prisma.Decimal, { message: "Field 'rm2ProfitShare' must be a Decimal. Location: ['Models', 'Customer']"}).nullable(),
  code: z.string(),
})

export type Customer = z.infer<typeof CustomerSchema>

/////////////////////////////////////////
// MEMBER SCHEMA
/////////////////////////////////////////

export const MemberSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date(),
})

export type Member = z.infer<typeof MemberSchema>

/////////////////////////////////////////
// INVITATION SCHEMA
/////////////////////////////////////////

export const InvitationSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string(),
})

export type Invitation = z.infer<typeof InvitationSchema>

/////////////////////////////////////////
// PURCHASE SCHEMA
/////////////////////////////////////////

export const PurchaseSchema = z.object({
  type: PurchaseTypeSchema,
  id: z.string().cuid(),
  organizationId: z.string().nullable(),
  userId: z.string().nullable(),
  customerId: z.string(),
  subscriptionId: z.string().nullable(),
  productId: z.string(),
  status: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Purchase = z.infer<typeof PurchaseSchema>

/////////////////////////////////////////
// AI CHAT SCHEMA
/////////////////////////////////////////

export const AiChatSchema = z.object({
  id: z.string().cuid(),
  organizationId: z.string().nullable(),
  userId: z.string().nullable(),
  title: z.string().nullable(),
  /**
   * [Array<{role: "user" | "assistant"; content: string;}>]
   */
  messages: z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type AiChat = z.infer<typeof AiChatSchema>

/////////////////////////////////////////
// BANK ACCOUNT SCHEMA
/////////////////////////////////////////

export const BankAccountSchema = z.object({
  id: z.string().cuid(),
  bankName: z.string(),
  accountName: z.string().nullable(),
  accountNumber: z.string(),
  currency: z.string(),
  balance: z.instanceof(Prisma.Decimal, { message: "Field 'balance' must be a Decimal. Location: ['Models', 'BankAccount']"}),
  status: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  customerId: z.string().nullable(),
})

export type BankAccount = z.infer<typeof BankAccountSchema>

/////////////////////////////////////////
// EXPENSE SCHEMA
/////////////////////////////////////////

export const ExpenseSchema = z.object({
  id: z.string().cuid(),
  category: z.string(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'Expense']"}),
  currency: z.string(),
  exchangeRate: z.instanceof(Prisma.Decimal, { message: "Field 'exchangeRate' must be a Decimal. Location: ['Models', 'Expense']"}),
  receiptUrl: z.string().nullable(),
  description: z.string().nullable(),
  date: z.coerce.date(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  receiptUrls: z.string().array(),
  sgdAmount: z.instanceof(Prisma.Decimal, { message: "Field 'sgdAmount' must be a Decimal. Location: ['Models', 'Expense']"}),
  usdAmount: z.instanceof(Prisma.Decimal, { message: "Field 'usdAmount' must be a Decimal. Location: ['Models', 'Expense']"}),
  usdRate: z.instanceof(Prisma.Decimal, { message: "Field 'usdRate' must be a Decimal. Location: ['Models', 'Expense']"}),
  rmId: z.string().nullable(),
})

export type Expense = z.infer<typeof ExpenseSchema>

/////////////////////////////////////////
// PRODUCT SCHEMA
/////////////////////////////////////////

export const ProductSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  code: z.string(),
  currency: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  distributionType: z.string(),
  status: z.string(),
  category: z.string(),
})

export type Product = z.infer<typeof ProductSchema>

/////////////////////////////////////////
// PROFIT SHARING SCHEMA
/////////////////////////////////////////

export const ProfitSharingSchema = z.object({
  id: z.string().cuid(),
  customerId: z.string(),
  bankAccountId: z.string().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  productId: z.string(),
  profitDate: z.coerce.date(),
  companyProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'companyProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  companyRevenue: z.instanceof(Prisma.Decimal, { message: "Field 'companyRevenue' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  companyRevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'companyRevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  currency: z.string(),
  directTradeBookingFee: z.instanceof(Prisma.Decimal, { message: "Field 'directTradeBookingFee' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  finderProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finderProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  findersRevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'findersRevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  findersRevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'findersRevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  fxRate: z.instanceof(Prisma.Decimal, { message: "Field 'fxRate' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  rmProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rmProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  rmRevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'rmRevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  rmRevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'rmRevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  shareable: z.instanceof(Prisma.Decimal, { message: "Field 'shareable' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  finder1Id: z.string().nullable(),
  finder1Name: z.string().nullable(),
  finder1ProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder1ProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder1RevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'finder1RevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder1RevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'finder1RevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2Id: z.string().nullable(),
  finder2Name: z.string().nullable(),
  finder2ProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder2ProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2RevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'finder2RevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2RevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'finder2RevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1Id: z.string().nullable(),
  rm1Name: z.string().nullable(),
  rm1ProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm1ProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1RevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'rm1RevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1RevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'rm1RevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2Id: z.string().nullable(),
  rm2Name: z.string().nullable(),
  rm2ProfitSharePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm2ProfitSharePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2RevenueOriginal: z.instanceof(Prisma.Decimal, { message: "Field 'rm2RevenueOriginal' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2RevenueUSD: z.instanceof(Prisma.Decimal, { message: "Field 'rm2RevenueUSD' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  bankRetroPercent: z.instanceof(Prisma.Decimal, { message: "Field 'bankRetroPercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}),
  companyFeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'companyFeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  companyRevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'companyRevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder1FeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder1FeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder1RevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder1RevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2FeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder2FeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  finder2RevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'finder2RevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1FeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm1FeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm1RevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm1RevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2FeePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm2FeePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
  rm2RevenuePercent: z.instanceof(Prisma.Decimal, { message: "Field 'rm2RevenuePercent' must be a Decimal. Location: ['Models', 'ProfitSharing']"}).nullable(),
})

export type ProfitSharing = z.infer<typeof ProfitSharingSchema>

/////////////////////////////////////////
// ASSET TRANSACTION SCHEMA
/////////////////////////////////////////

export const AssetTransactionSchema = z.object({
  id: z.string().cuid(),
  customerId: z.string(),
  date: z.coerce.date(),
  currency: z.string(),
  type: z.string(),
  amount: z.instanceof(Prisma.Decimal, { message: "Field 'amount' must be a Decimal. Location: ['Models', 'AssetTransaction']"}),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type AssetTransaction = z.infer<typeof AssetTransactionSchema>

/////////////////////////////////////////
// AMMETER SCHEMA
/////////////////////////////////////////

export const AmmeterSchema = z.object({
  id: z.string(),
  electricMeterNumber: z.string(),
  electricMeterName: z.string(),
  deviceNumber: z.string(),
  factory: z.string().nullable(),
  device: z.string().nullable(),
  voltage: z.number().nullable(),
  currents: z.number().nullable(),
  power: z.number().nullable(),
  battery: z.number().nullable(),
  switchState: z.number().int().nullable(),
  networkState: z.number().int().nullable(),
  lastUpdated: z.coerce.date().nullable(),
  organizationId: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
  updatedAt: z.coerce.date().nullable(),
})

export type Ammeter = z.infer<typeof AmmeterSchema>

/////////////////////////////////////////
// AMMETER LOG SCHEMA
/////////////////////////////////////////

export const AmmeterLogSchema = z.object({
  id: z.string(),
  deviceNumber: z.string(),
  action: z.string(),
  factory: z.string().nullable(),
  device: z.string().nullable(),
  voltage: z.number().nullable(),
  currents: z.number().nullable(),
  power: z.number().nullable(),
  battery: z.number().nullable(),
  switchState: z.number().int().nullable(),
  networkState: z.number().int().nullable(),
  lastUpdated: z.coerce.date().nullable(),
  requestData: z.string().nullable(),
  responseData: z.string().nullable(),
  statusCode: z.number().int().nullable(),
  success: z.boolean(),
  errorMessage: z.string().nullable(),
  responseTime: z.number().int().nullable(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  userId: z.string().nullable(),
  organizationId: z.string().nullable(),
  createdAt: z.coerce.date().nullable(),
})

export type AmmeterLog = z.infer<typeof AmmeterLogSchema>

/////////////////////////////////////////
// EXPERIMENT RUN SCHEMA
/////////////////////////////////////////

export const ExperimentRunSchema = z.object({
  status: ExperimentRunStatusSchema,
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullable(),
  /**
   * [Object]
   */
  filteringParameters: z.record(z.any()).nullable(),
  candidateCount: z.number().int().nullable(),
  positiveLabelCount: z.number().int().nullable(),
  negativeLabelCount: z.number().int().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  /**
   * [Object]
   */
  candidateStats: z.record(z.any()).nullable(),
})

export type ExperimentRun = z.infer<typeof ExperimentRunSchema>

/////////////////////////////////////////
// ANOMALY EVENT SCHEMA
/////////////////////////////////////////

export const AnomalyEventSchema = z.object({
  status: AnomalyEventStatusSchema,
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: JsonValueSchema,
  reviewerId: z.string().nullable(),
  reviewTimestamp: z.coerce.date().nullable(),
  justificationNotes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  experimentRunId: z.string().nullable(),
})

export type AnomalyEvent = z.infer<typeof AnomalyEventSchema>

/////////////////////////////////////////
// ANOMALY LABEL SCHEMA
/////////////////////////////////////////

export const AnomalyLabelSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type AnomalyLabel = z.infer<typeof AnomalyLabelSchema>

/////////////////////////////////////////
// BORROW GOD SCHEMA
/////////////////////////////////////////

export const BorrowGodSchema = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().nullable(),
  typeId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type BorrowGod = z.infer<typeof BorrowGodSchema>

/////////////////////////////////////////
// BUDDHIST SCHEMA
/////////////////////////////////////////

export const BuddhistSchema = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().nullable(),
  phone: z.string().nullable(),
  templeNowText: z.string().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Buddhist = z.infer<typeof BuddhistSchema>

/////////////////////////////////////////
// EVENT LABEL LINK SCHEMA
/////////////////////////////////////////

export const EventLabelLinkSchema = z.object({
  id: z.string(),
  eventId: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date(),
})

export type EventLabelLink = z.infer<typeof EventLabelLinkSchema>

/////////////////////////////////////////
// FAMILY SCHEMA
/////////////////////////////////////////

export const FamilySchema = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().nullable(),
  phone: z.string().nullable(),
  mobile: z.string().nullable(),
  email: z.string().nullable(),
  note: z.string().nullable(),
  postalCode: z.string().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Family = z.infer<typeof FamilySchema>

/////////////////////////////////////////
// FAMILY MEMBER SCHEMA
/////////////////////////////////////////

export const FamilyMemberSchema = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().nullable(),
  birthday: z.coerce.date().nullable(),
  lunarDate: z.string().nullable(),
  gender: z.string().nullable(),
  note: z.string().nullable(),
  mainPerson: z.string(),
  mailThis: z.string(),
  isLive: z.string(),
  postcode: z.string().nullable(),
  addr: z.string().nullable(),
  familyId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FamilyMember = z.infer<typeof FamilyMemberSchema>

/////////////////////////////////////////
// GOD NAME SCHEMA
/////////////////////////////////////////

export const GodNameSchema = z.object({
  id: z.string(),
  value: z.string(),
  price: z.instanceof(Prisma.Decimal, { message: "Field 'price' must be a Decimal. Location: ['Models', 'GodName']"}),
  order: z.number().int(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type GodName = z.infer<typeof GodNameSchema>

/////////////////////////////////////////
// MEMBER CLASS SCHEMA
/////////////////////////////////////////

export const MemberClassSchema = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type MemberClass = z.infer<typeof MemberClassSchema>

/////////////////////////////////////////
// MG YEAR SCHEMA
/////////////////////////////////////////

export const MgYearSchema = z.object({
  id: z.string(),
  order: z.number().int(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type MgYear = z.infer<typeof MgYearSchema>

/////////////////////////////////////////
// SERVICE 1 SCHEMA
/////////////////////////////////////////

export const Service1Schema = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int(),
  nowUse: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Service1 = z.infer<typeof Service1Schema>

/////////////////////////////////////////
// SERVICE 2 SCHEMA
/////////////////////////////////////////

export const Service2Schema = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int(),
  nowUse: z.string(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Service2 = z.infer<typeof Service2Schema>

/////////////////////////////////////////
// SERVICING 1 SCHEMA
/////////////////////////////////////////

export const Servicing1Schema = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().nullable(),
  addr: z.string().nullable(),
  printType1Id: z.string().nullable(),
  service1Id: z.string(),
  service2Id: z.string().nullable(),
  serial: z.string().nullable(),
  accReceivable: z.instanceof(Prisma.Decimal, { message: "Field 'accReceivable' must be a Decimal. Location: ['Models', 'Servicing1']"}),
  accReceived: z.instanceof(Prisma.Decimal, { message: "Field 'accReceived' must be a Decimal. Location: ['Models', 'Servicing1']"}),
  accPending: z.instanceof(Prisma.Decimal, { message: "Field 'accPending' must be a Decimal. Location: ['Models', 'Servicing1']"}),
  payStatus: z.string().nullable(),
  payMethod: z.string().nullable(),
  payCurrency: z.string(),
  receiptNum: z.string().nullable(),
  booksNum: z.string().nullable(),
  payee: z.string().nullable(),
  advisePeople: z.string().nullable(),
  ps: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Servicing1 = z.infer<typeof Servicing1Schema>

/////////////////////////////////////////
// SERVICING 2 SCHEMA
/////////////////////////////////////////

export const Servicing2Schema = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().nullable(),
  serial: z.string().nullable(),
  praytypeId: z.string().nullable(),
  printType1Id: z.string().nullable(),
  printType2Id: z.string().nullable(),
  livename: z.string().nullable(),
  people1: JsonValueSchema.nullable(),
  passname: z.string().nullable(),
  passname1: z.string().nullable(),
  passname2: z.string().nullable(),
  passname3: z.string().nullable(),
  passname4: z.string().nullable(),
  people0: JsonValueSchema.nullable(),
  name: z.string().nullable(),
  sexualId: z.string().nullable(),
  sexualText: z.string().nullable(),
  liveYear: z.number().int().nullable(),
  boxNum: z.string().nullable(),
  rowTotal: z.instanceof(Prisma.Decimal, { message: "Field 'rowTotal' must be a Decimal. Location: ['Models', 'Servicing2']"}),
  bornYear: z.string().nullable(),
  bornMonth: z.string().nullable(),
  bornDay: z.string().nullable(),
  bornTime: z.string().nullable(),
  addr: z.string().nullable(),
  ps: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Servicing2 = z.infer<typeof Servicing2Schema>

/////////////////////////////////////////
// TEMPLE SCHEMA
/////////////////////////////////////////

export const TempleSchema = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().nullable(),
  phone: z.string().nullable(),
  email: z.string().nullable(),
  description: z.string().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Temple = z.infer<typeof TempleSchema>

/////////////////////////////////////////
// TRAINED MODEL SCHEMA
/////////////////////////////////////////

/**
 * TrainedModel: 記錄一次完整的模型訓練事件
 */
export const TrainedModelSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  experimentRunId: z.string(),
  modelConfig: JsonValueSchema,
  dataSourceConfig: JsonValueSchema,
  modelPath: z.string().nullable(),
  trainingMetrics: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
  completedAt: z.coerce.date().nullable(),
})

export type TrainedModel = z.infer<typeof TrainedModelSchema>

/////////////////////////////////////////
// EVALUATION RUN SCHEMA
/////////////////////////////////////////

/**
 * EvaluationRun: 記錄一次獨立的模型評估事件
 */
export const EvaluationRunSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  trainedModelId: z.string(),
  testSetSource: JsonValueSchema,
  evaluationMetrics: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
  completedAt: z.coerce.date().nullable(),
})

export type EvaluationRun = z.infer<typeof EvaluationRunSchema>

/////////////////////////////////////////
// MODEL PREDICTION SCHEMA
/////////////////////////////////////////

/**
 * ModelPrediction: 記錄單一樣本的預測結果
 */
export const ModelPredictionSchema = z.object({
  id: z.string().cuid(),
  evaluationRunId: z.string(),
  anomalyEventId: z.string().nullable(),
  timestamp: z.coerce.date(),
  predictionScore: z.number(),
  groundTruth: z.number().int().nullable(),
})

export type ModelPrediction = z.infer<typeof ModelPredictionSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  passkeys: z.union([z.boolean(),z.lazy(() => PasskeyFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  twofactors: z.union([z.boolean(),z.lazy(() => TwoFactorFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  accounts: z.boolean().optional(),
  aiChats: z.boolean().optional(),
  invitations: z.boolean().optional(),
  members: z.boolean().optional(),
  passkeys: z.boolean().optional(),
  purchases: z.boolean().optional(),
  sessions: z.boolean().optional(),
  twofactors: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  username: z.boolean().optional(),
  role: z.boolean().optional(),
  banned: z.boolean().optional(),
  banReason: z.boolean().optional(),
  banExpires: z.boolean().optional(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  locale: z.boolean().optional(),
  twoFactorEnabled: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  passkeys: z.union([z.boolean(),z.lazy(() => PasskeyFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  twofactors: z.union([z.boolean(),z.lazy(() => TwoFactorFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  userId: z.boolean().optional(),
  impersonatedBy: z.boolean().optional(),
  activeOrganizationId: z.boolean().optional(),
  token: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  accountId: z.boolean().optional(),
  providerId: z.boolean().optional(),
  userId: z.boolean().optional(),
  accessToken: z.boolean().optional(),
  refreshToken: z.boolean().optional(),
  idToken: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  password: z.boolean().optional(),
  accessTokenExpiresAt: z.boolean().optional(),
  refreshTokenExpiresAt: z.boolean().optional(),
  scope: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// VERIFICATION
//------------------------------------------------------

export const VerificationSelectSchema: z.ZodType<Prisma.VerificationSelect> = z.object({
  id: z.boolean().optional(),
  identifier: z.boolean().optional(),
  value: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// PASSKEY
//------------------------------------------------------

export const PasskeyIncludeSchema: z.ZodType<Prisma.PasskeyInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PasskeyArgsSchema: z.ZodType<Prisma.PasskeyDefaultArgs> = z.object({
  select: z.lazy(() => PasskeySelectSchema).optional(),
  include: z.lazy(() => PasskeyIncludeSchema).optional(),
}).strict();

export const PasskeySelectSchema: z.ZodType<Prisma.PasskeySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  publicKey: z.boolean().optional(),
  userId: z.boolean().optional(),
  credentialID: z.boolean().optional(),
  counter: z.boolean().optional(),
  deviceType: z.boolean().optional(),
  backedUp: z.boolean().optional(),
  transports: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// TWO FACTOR
//------------------------------------------------------

export const TwoFactorIncludeSchema: z.ZodType<Prisma.TwoFactorInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const TwoFactorArgsSchema: z.ZodType<Prisma.TwoFactorDefaultArgs> = z.object({
  select: z.lazy(() => TwoFactorSelectSchema).optional(),
  include: z.lazy(() => TwoFactorIncludeSchema).optional(),
}).strict();

export const TwoFactorSelectSchema: z.ZodType<Prisma.TwoFactorSelect> = z.object({
  id: z.boolean().optional(),
  secret: z.boolean().optional(),
  backupCodes: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  bankAccounts: z.union([z.boolean(),z.lazy(() => BankAccountFindManyArgsSchema)]).optional(),
  borrow_god: z.union([z.boolean(),z.lazy(() => BorrowGodFindManyArgsSchema)]).optional(),
  buddhist: z.union([z.boolean(),z.lazy(() => BuddhistFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  family: z.union([z.boolean(),z.lazy(() => FamilyFindManyArgsSchema)]).optional(),
  family_member: z.union([z.boolean(),z.lazy(() => FamilyMemberFindManyArgsSchema)]).optional(),
  god_name: z.union([z.boolean(),z.lazy(() => GodNameFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  member_class: z.union([z.boolean(),z.lazy(() => MemberClassFindManyArgsSchema)]).optional(),
  mgyear: z.union([z.boolean(),z.lazy(() => MgYearFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  ProfitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  relationshipManagers: z.union([z.boolean(),z.lazy(() => RelationshipManagerFindManyArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => Service1FindManyArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => Service2FindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  temple: z.union([z.boolean(),z.lazy(() => TempleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  aiChats: z.boolean().optional(),
  bankAccounts: z.boolean().optional(),
  borrow_god: z.boolean().optional(),
  buddhist: z.boolean().optional(),
  customers: z.boolean().optional(),
  expenses: z.boolean().optional(),
  family: z.boolean().optional(),
  family_member: z.boolean().optional(),
  god_name: z.boolean().optional(),
  invitations: z.boolean().optional(),
  members: z.boolean().optional(),
  member_class: z.boolean().optional(),
  mgyear: z.boolean().optional(),
  products: z.boolean().optional(),
  ProfitSharing: z.boolean().optional(),
  purchases: z.boolean().optional(),
  relationshipManagers: z.boolean().optional(),
  service1: z.boolean().optional(),
  service2: z.boolean().optional(),
  servicing1: z.boolean().optional(),
  servicing2: z.boolean().optional(),
  temple: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
  logo: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  metadata: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  aiChats: z.union([z.boolean(),z.lazy(() => AiChatFindManyArgsSchema)]).optional(),
  bankAccounts: z.union([z.boolean(),z.lazy(() => BankAccountFindManyArgsSchema)]).optional(),
  borrow_god: z.union([z.boolean(),z.lazy(() => BorrowGodFindManyArgsSchema)]).optional(),
  buddhist: z.union([z.boolean(),z.lazy(() => BuddhistFindManyArgsSchema)]).optional(),
  customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  family: z.union([z.boolean(),z.lazy(() => FamilyFindManyArgsSchema)]).optional(),
  family_member: z.union([z.boolean(),z.lazy(() => FamilyMemberFindManyArgsSchema)]).optional(),
  god_name: z.union([z.boolean(),z.lazy(() => GodNameFindManyArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationFindManyArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberFindManyArgsSchema)]).optional(),
  member_class: z.union([z.boolean(),z.lazy(() => MemberClassFindManyArgsSchema)]).optional(),
  mgyear: z.union([z.boolean(),z.lazy(() => MgYearFindManyArgsSchema)]).optional(),
  products: z.union([z.boolean(),z.lazy(() => ProductFindManyArgsSchema)]).optional(),
  ProfitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  purchases: z.union([z.boolean(),z.lazy(() => PurchaseFindManyArgsSchema)]).optional(),
  relationshipManagers: z.union([z.boolean(),z.lazy(() => RelationshipManagerFindManyArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => Service1FindManyArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => Service2FindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  temple: z.union([z.boolean(),z.lazy(() => TempleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RELATIONSHIP MANAGER
//------------------------------------------------------

export const RelationshipManagerIncludeSchema: z.ZodType<Prisma.RelationshipManagerInclude> = z.object({
  finder1Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  finder2Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  rm1Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  rm2Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RelationshipManagerCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RelationshipManagerArgsSchema: z.ZodType<Prisma.RelationshipManagerDefaultArgs> = z.object({
  select: z.lazy(() => RelationshipManagerSelectSchema).optional(),
  include: z.lazy(() => RelationshipManagerIncludeSchema).optional(),
}).strict();

export const RelationshipManagerCountOutputTypeArgsSchema: z.ZodType<Prisma.RelationshipManagerCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RelationshipManagerCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RelationshipManagerCountOutputTypeSelectSchema: z.ZodType<Prisma.RelationshipManagerCountOutputTypeSelect> = z.object({
  finder1Customers: z.boolean().optional(),
  finder2Customers: z.boolean().optional(),
  rm1Customers: z.boolean().optional(),
  rm2Customers: z.boolean().optional(),
  expenses: z.boolean().optional(),
}).strict();

export const RelationshipManagerSelectSchema: z.ZodType<Prisma.RelationshipManagerSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  status: z.boolean().optional(),
  customerCount: z.boolean().optional(),
  joinDate: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  category: z.boolean().optional(),
  resignDate: z.boolean().optional(),
  finder1Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  finder2Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  rm1Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  rm2Customers: z.union([z.boolean(),z.lazy(() => CustomerFindManyArgsSchema)]).optional(),
  expenses: z.union([z.boolean(),z.lazy(() => ExpenseFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RelationshipManagerCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CUSTOMER
//------------------------------------------------------

export const CustomerIncludeSchema: z.ZodType<Prisma.CustomerInclude> = z.object({
  assetTransactions: z.union([z.boolean(),z.lazy(() => AssetTransactionFindManyArgsSchema)]).optional(),
  bankAccounts: z.union([z.boolean(),z.lazy(() => BankAccountFindManyArgsSchema)]).optional(),
  finder1: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  finder2: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  rm1: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  rm2: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomerCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CustomerArgsSchema: z.ZodType<Prisma.CustomerDefaultArgs> = z.object({
  select: z.lazy(() => CustomerSelectSchema).optional(),
  include: z.lazy(() => CustomerIncludeSchema).optional(),
}).strict();

export const CustomerCountOutputTypeArgsSchema: z.ZodType<Prisma.CustomerCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CustomerCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CustomerCountOutputTypeSelectSchema: z.ZodType<Prisma.CustomerCountOutputTypeSelect> = z.object({
  assetTransactions: z.boolean().optional(),
  bankAccounts: z.boolean().optional(),
  profitSharing: z.boolean().optional(),
}).strict();

export const CustomerSelectSchema: z.ZodType<Prisma.CustomerSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  rm1Id: z.boolean().optional(),
  rm2Id: z.boolean().optional(),
  finder1Id: z.boolean().optional(),
  finder2Id: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  finder1ProfitShare: z.boolean().optional(),
  finder2ProfitShare: z.boolean().optional(),
  rm1ProfitShare: z.boolean().optional(),
  rm2ProfitShare: z.boolean().optional(),
  code: z.boolean().optional(),
  assetTransactions: z.union([z.boolean(),z.lazy(() => AssetTransactionFindManyArgsSchema)]).optional(),
  bankAccounts: z.union([z.boolean(),z.lazy(() => BankAccountFindManyArgsSchema)]).optional(),
  finder1: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  finder2: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  rm1: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  rm2: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomerCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MEMBER
//------------------------------------------------------

export const MemberIncludeSchema: z.ZodType<Prisma.MemberInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const MemberArgsSchema: z.ZodType<Prisma.MemberDefaultArgs> = z.object({
  select: z.lazy(() => MemberSelectSchema).optional(),
  include: z.lazy(() => MemberIncludeSchema).optional(),
}).strict();

export const MemberSelectSchema: z.ZodType<Prisma.MemberSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// INVITATION
//------------------------------------------------------

export const InvitationIncludeSchema: z.ZodType<Prisma.InvitationInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const InvitationArgsSchema: z.ZodType<Prisma.InvitationDefaultArgs> = z.object({
  select: z.lazy(() => InvitationSelectSchema).optional(),
  include: z.lazy(() => InvitationIncludeSchema).optional(),
}).strict();

export const InvitationSelectSchema: z.ZodType<Prisma.InvitationSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  email: z.boolean().optional(),
  role: z.boolean().optional(),
  status: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  inviterId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// PURCHASE
//------------------------------------------------------

export const PurchaseIncludeSchema: z.ZodType<Prisma.PurchaseInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PurchaseArgsSchema: z.ZodType<Prisma.PurchaseDefaultArgs> = z.object({
  select: z.lazy(() => PurchaseSelectSchema).optional(),
  include: z.lazy(() => PurchaseIncludeSchema).optional(),
}).strict();

export const PurchaseSelectSchema: z.ZodType<Prisma.PurchaseSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  customerId: z.boolean().optional(),
  subscriptionId: z.boolean().optional(),
  productId: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// AI CHAT
//------------------------------------------------------

export const AiChatIncludeSchema: z.ZodType<Prisma.AiChatInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AiChatArgsSchema: z.ZodType<Prisma.AiChatDefaultArgs> = z.object({
  select: z.lazy(() => AiChatSelectSchema).optional(),
  include: z.lazy(() => AiChatIncludeSchema).optional(),
}).strict();

export const AiChatSelectSchema: z.ZodType<Prisma.AiChatSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  title: z.boolean().optional(),
  messages: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// BANK ACCOUNT
//------------------------------------------------------

export const BankAccountIncludeSchema: z.ZodType<Prisma.BankAccountInclude> = z.object({
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BankAccountCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const BankAccountArgsSchema: z.ZodType<Prisma.BankAccountDefaultArgs> = z.object({
  select: z.lazy(() => BankAccountSelectSchema).optional(),
  include: z.lazy(() => BankAccountIncludeSchema).optional(),
}).strict();

export const BankAccountCountOutputTypeArgsSchema: z.ZodType<Prisma.BankAccountCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => BankAccountCountOutputTypeSelectSchema).nullish(),
}).strict();

export const BankAccountCountOutputTypeSelectSchema: z.ZodType<Prisma.BankAccountCountOutputTypeSelect> = z.object({
  profitSharing: z.boolean().optional(),
}).strict();

export const BankAccountSelectSchema: z.ZodType<Prisma.BankAccountSelect> = z.object({
  id: z.boolean().optional(),
  bankName: z.boolean().optional(),
  accountName: z.boolean().optional(),
  accountNumber: z.boolean().optional(),
  currency: z.boolean().optional(),
  balance: z.boolean().optional(),
  status: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  customerId: z.boolean().optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => BankAccountCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EXPENSE
//------------------------------------------------------

export const ExpenseIncludeSchema: z.ZodType<Prisma.ExpenseInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  rm: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
}).strict()

export const ExpenseArgsSchema: z.ZodType<Prisma.ExpenseDefaultArgs> = z.object({
  select: z.lazy(() => ExpenseSelectSchema).optional(),
  include: z.lazy(() => ExpenseIncludeSchema).optional(),
}).strict();

export const ExpenseSelectSchema: z.ZodType<Prisma.ExpenseSelect> = z.object({
  id: z.boolean().optional(),
  category: z.boolean().optional(),
  amount: z.boolean().optional(),
  currency: z.boolean().optional(),
  exchangeRate: z.boolean().optional(),
  receiptUrl: z.boolean().optional(),
  description: z.boolean().optional(),
  date: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  receiptUrls: z.boolean().optional(),
  sgdAmount: z.boolean().optional(),
  usdAmount: z.boolean().optional(),
  usdRate: z.boolean().optional(),
  rmId: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  rm: z.union([z.boolean(),z.lazy(() => RelationshipManagerArgsSchema)]).optional(),
}).strict()

// PRODUCT
//------------------------------------------------------

export const ProductIncludeSchema: z.ZodType<Prisma.ProductInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProductArgsSchema: z.ZodType<Prisma.ProductDefaultArgs> = z.object({
  select: z.lazy(() => ProductSelectSchema).optional(),
  include: z.lazy(() => ProductIncludeSchema).optional(),
}).strict();

export const ProductCountOutputTypeArgsSchema: z.ZodType<Prisma.ProductCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProductCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProductCountOutputTypeSelectSchema: z.ZodType<Prisma.ProductCountOutputTypeSelect> = z.object({
  profitSharing: z.boolean().optional(),
}).strict();

export const ProductSelectSchema: z.ZodType<Prisma.ProductSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  currency: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  distributionType: z.boolean().optional(),
  status: z.boolean().optional(),
  category: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  profitSharing: z.union([z.boolean(),z.lazy(() => ProfitSharingFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROFIT SHARING
//------------------------------------------------------

export const ProfitSharingIncludeSchema: z.ZodType<Prisma.ProfitSharingInclude> = z.object({
  BankAccount: z.union([z.boolean(),z.lazy(() => BankAccountArgsSchema)]).optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
}).strict()

export const ProfitSharingArgsSchema: z.ZodType<Prisma.ProfitSharingDefaultArgs> = z.object({
  select: z.lazy(() => ProfitSharingSelectSchema).optional(),
  include: z.lazy(() => ProfitSharingIncludeSchema).optional(),
}).strict();

export const ProfitSharingSelectSchema: z.ZodType<Prisma.ProfitSharingSelect> = z.object({
  id: z.boolean().optional(),
  customerId: z.boolean().optional(),
  bankAccountId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  amount: z.boolean().optional(),
  productId: z.boolean().optional(),
  profitDate: z.boolean().optional(),
  companyProfitSharePercent: z.boolean().optional(),
  companyRevenue: z.boolean().optional(),
  companyRevenueOriginal: z.boolean().optional(),
  currency: z.boolean().optional(),
  directTradeBookingFee: z.boolean().optional(),
  finderProfitSharePercent: z.boolean().optional(),
  findersRevenueOriginal: z.boolean().optional(),
  findersRevenueUSD: z.boolean().optional(),
  fxRate: z.boolean().optional(),
  rmProfitSharePercent: z.boolean().optional(),
  rmRevenueOriginal: z.boolean().optional(),
  rmRevenueUSD: z.boolean().optional(),
  shareable: z.boolean().optional(),
  finder1Id: z.boolean().optional(),
  finder1Name: z.boolean().optional(),
  finder1ProfitSharePercent: z.boolean().optional(),
  finder1RevenueOriginal: z.boolean().optional(),
  finder1RevenueUSD: z.boolean().optional(),
  finder2Id: z.boolean().optional(),
  finder2Name: z.boolean().optional(),
  finder2ProfitSharePercent: z.boolean().optional(),
  finder2RevenueOriginal: z.boolean().optional(),
  finder2RevenueUSD: z.boolean().optional(),
  rm1Id: z.boolean().optional(),
  rm1Name: z.boolean().optional(),
  rm1ProfitSharePercent: z.boolean().optional(),
  rm1RevenueOriginal: z.boolean().optional(),
  rm1RevenueUSD: z.boolean().optional(),
  rm2Id: z.boolean().optional(),
  rm2Name: z.boolean().optional(),
  rm2ProfitSharePercent: z.boolean().optional(),
  rm2RevenueOriginal: z.boolean().optional(),
  rm2RevenueUSD: z.boolean().optional(),
  bankRetroPercent: z.boolean().optional(),
  companyFeePercent: z.boolean().optional(),
  companyRevenuePercent: z.boolean().optional(),
  finder1FeePercent: z.boolean().optional(),
  finder1RevenuePercent: z.boolean().optional(),
  finder2FeePercent: z.boolean().optional(),
  finder2RevenuePercent: z.boolean().optional(),
  rm1FeePercent: z.boolean().optional(),
  rm1RevenuePercent: z.boolean().optional(),
  rm2FeePercent: z.boolean().optional(),
  rm2RevenuePercent: z.boolean().optional(),
  BankAccount: z.union([z.boolean(),z.lazy(() => BankAccountArgsSchema)]).optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  product: z.union([z.boolean(),z.lazy(() => ProductArgsSchema)]).optional(),
}).strict()

// ASSET TRANSACTION
//------------------------------------------------------

export const AssetTransactionIncludeSchema: z.ZodType<Prisma.AssetTransactionInclude> = z.object({
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
}).strict()

export const AssetTransactionArgsSchema: z.ZodType<Prisma.AssetTransactionDefaultArgs> = z.object({
  select: z.lazy(() => AssetTransactionSelectSchema).optional(),
  include: z.lazy(() => AssetTransactionIncludeSchema).optional(),
}).strict();

export const AssetTransactionSelectSchema: z.ZodType<Prisma.AssetTransactionSelect> = z.object({
  id: z.boolean().optional(),
  customerId: z.boolean().optional(),
  date: z.boolean().optional(),
  currency: z.boolean().optional(),
  type: z.boolean().optional(),
  amount: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  customer: z.union([z.boolean(),z.lazy(() => CustomerArgsSchema)]).optional(),
}).strict()

// AMMETER
//------------------------------------------------------

export const AmmeterSelectSchema: z.ZodType<Prisma.AmmeterSelect> = z.object({
  id: z.boolean().optional(),
  electricMeterNumber: z.boolean().optional(),
  electricMeterName: z.boolean().optional(),
  deviceNumber: z.boolean().optional(),
  factory: z.boolean().optional(),
  device: z.boolean().optional(),
  voltage: z.boolean().optional(),
  currents: z.boolean().optional(),
  power: z.boolean().optional(),
  battery: z.boolean().optional(),
  switchState: z.boolean().optional(),
  networkState: z.boolean().optional(),
  lastUpdated: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// AMMETER LOG
//------------------------------------------------------

export const AmmeterLogSelectSchema: z.ZodType<Prisma.AmmeterLogSelect> = z.object({
  id: z.boolean().optional(),
  deviceNumber: z.boolean().optional(),
  action: z.boolean().optional(),
  factory: z.boolean().optional(),
  device: z.boolean().optional(),
  voltage: z.boolean().optional(),
  currents: z.boolean().optional(),
  power: z.boolean().optional(),
  battery: z.boolean().optional(),
  switchState: z.boolean().optional(),
  networkState: z.boolean().optional(),
  lastUpdated: z.boolean().optional(),
  requestData: z.boolean().optional(),
  responseData: z.boolean().optional(),
  statusCode: z.boolean().optional(),
  success: z.boolean().optional(),
  errorMessage: z.boolean().optional(),
  responseTime: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  userId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
}).strict()

// EXPERIMENT RUN
//------------------------------------------------------

export const ExperimentRunIncludeSchema: z.ZodType<Prisma.ExperimentRunInclude> = z.object({
  anomalyEvents: z.union([z.boolean(),z.lazy(() => AnomalyEventFindManyArgsSchema)]).optional(),
  trainedModels: z.union([z.boolean(),z.lazy(() => TrainedModelFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExperimentRunCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ExperimentRunArgsSchema: z.ZodType<Prisma.ExperimentRunDefaultArgs> = z.object({
  select: z.lazy(() => ExperimentRunSelectSchema).optional(),
  include: z.lazy(() => ExperimentRunIncludeSchema).optional(),
}).strict();

export const ExperimentRunCountOutputTypeArgsSchema: z.ZodType<Prisma.ExperimentRunCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ExperimentRunCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ExperimentRunCountOutputTypeSelectSchema: z.ZodType<Prisma.ExperimentRunCountOutputTypeSelect> = z.object({
  anomalyEvents: z.boolean().optional(),
  trainedModels: z.boolean().optional(),
}).strict();

export const ExperimentRunSelectSchema: z.ZodType<Prisma.ExperimentRunSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  filteringParameters: z.boolean().optional(),
  status: z.boolean().optional(),
  candidateCount: z.boolean().optional(),
  positiveLabelCount: z.boolean().optional(),
  negativeLabelCount: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  candidateStats: z.boolean().optional(),
  anomalyEvents: z.union([z.boolean(),z.lazy(() => AnomalyEventFindManyArgsSchema)]).optional(),
  trainedModels: z.union([z.boolean(),z.lazy(() => TrainedModelFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ExperimentRunCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ANOMALY EVENT
//------------------------------------------------------

export const AnomalyEventIncludeSchema: z.ZodType<Prisma.AnomalyEventInclude> = z.object({
  experimentRun: z.union([z.boolean(),z.lazy(() => ExperimentRunArgsSchema)]).optional(),
  eventLabelLinks: z.union([z.boolean(),z.lazy(() => EventLabelLinkFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AnomalyEventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const AnomalyEventArgsSchema: z.ZodType<Prisma.AnomalyEventDefaultArgs> = z.object({
  select: z.lazy(() => AnomalyEventSelectSchema).optional(),
  include: z.lazy(() => AnomalyEventIncludeSchema).optional(),
}).strict();

export const AnomalyEventCountOutputTypeArgsSchema: z.ZodType<Prisma.AnomalyEventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => AnomalyEventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const AnomalyEventCountOutputTypeSelectSchema: z.ZodType<Prisma.AnomalyEventCountOutputTypeSelect> = z.object({
  eventLabelLinks: z.boolean().optional(),
}).strict();

export const AnomalyEventSelectSchema: z.ZodType<Prisma.AnomalyEventSelect> = z.object({
  id: z.boolean().optional(),
  eventId: z.boolean().optional(),
  meterId: z.boolean().optional(),
  eventTimestamp: z.boolean().optional(),
  detectionRule: z.boolean().optional(),
  score: z.boolean().optional(),
  dataWindow: z.boolean().optional(),
  status: z.boolean().optional(),
  reviewerId: z.boolean().optional(),
  reviewTimestamp: z.boolean().optional(),
  justificationNotes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  experimentRunId: z.boolean().optional(),
  experimentRun: z.union([z.boolean(),z.lazy(() => ExperimentRunArgsSchema)]).optional(),
  eventLabelLinks: z.union([z.boolean(),z.lazy(() => EventLabelLinkFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AnomalyEventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ANOMALY LABEL
//------------------------------------------------------

export const AnomalyLabelIncludeSchema: z.ZodType<Prisma.AnomalyLabelInclude> = z.object({
  eventLabelLinks: z.union([z.boolean(),z.lazy(() => EventLabelLinkFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AnomalyLabelCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const AnomalyLabelArgsSchema: z.ZodType<Prisma.AnomalyLabelDefaultArgs> = z.object({
  select: z.lazy(() => AnomalyLabelSelectSchema).optional(),
  include: z.lazy(() => AnomalyLabelIncludeSchema).optional(),
}).strict();

export const AnomalyLabelCountOutputTypeArgsSchema: z.ZodType<Prisma.AnomalyLabelCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => AnomalyLabelCountOutputTypeSelectSchema).nullish(),
}).strict();

export const AnomalyLabelCountOutputTypeSelectSchema: z.ZodType<Prisma.AnomalyLabelCountOutputTypeSelect> = z.object({
  eventLabelLinks: z.boolean().optional(),
}).strict();

export const AnomalyLabelSelectSchema: z.ZodType<Prisma.AnomalyLabelSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  eventLabelLinks: z.union([z.boolean(),z.lazy(() => EventLabelLinkFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AnomalyLabelCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BORROW GOD
//------------------------------------------------------

export const BorrowGodIncludeSchema: z.ZodType<Prisma.BorrowGodInclude> = z.object({
  godName: z.union([z.boolean(),z.lazy(() => GodNameArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const BorrowGodArgsSchema: z.ZodType<Prisma.BorrowGodDefaultArgs> = z.object({
  select: z.lazy(() => BorrowGodSelectSchema).optional(),
  include: z.lazy(() => BorrowGodIncludeSchema).optional(),
}).strict();

export const BorrowGodSelectSchema: z.ZodType<Prisma.BorrowGodSelect> = z.object({
  id: z.boolean().optional(),
  godNameId: z.boolean().optional(),
  applyName: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  typeId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  godName: z.union([z.boolean(),z.lazy(() => GodNameArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// BUDDHIST
//------------------------------------------------------

export const BuddhistIncludeSchema: z.ZodType<Prisma.BuddhistInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const BuddhistArgsSchema: z.ZodType<Prisma.BuddhistDefaultArgs> = z.object({
  select: z.lazy(() => BuddhistSelectSchema).optional(),
  include: z.lazy(() => BuddhistIncludeSchema).optional(),
}).strict();

export const BuddhistSelectSchema: z.ZodType<Prisma.BuddhistSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  cellphone: z.boolean().optional(),
  phone: z.boolean().optional(),
  templeNowText: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// EVENT LABEL LINK
//------------------------------------------------------

export const EventLabelLinkIncludeSchema: z.ZodType<Prisma.EventLabelLinkInclude> = z.object({
  anomalyEvent: z.union([z.boolean(),z.lazy(() => AnomalyEventArgsSchema)]).optional(),
  anomalyLabel: z.union([z.boolean(),z.lazy(() => AnomalyLabelArgsSchema)]).optional(),
}).strict()

export const EventLabelLinkArgsSchema: z.ZodType<Prisma.EventLabelLinkDefaultArgs> = z.object({
  select: z.lazy(() => EventLabelLinkSelectSchema).optional(),
  include: z.lazy(() => EventLabelLinkIncludeSchema).optional(),
}).strict();

export const EventLabelLinkSelectSchema: z.ZodType<Prisma.EventLabelLinkSelect> = z.object({
  id: z.boolean().optional(),
  eventId: z.boolean().optional(),
  labelId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  anomalyEvent: z.union([z.boolean(),z.lazy(() => AnomalyEventArgsSchema)]).optional(),
  anomalyLabel: z.union([z.boolean(),z.lazy(() => AnomalyLabelArgsSchema)]).optional(),
}).strict()

// FAMILY
//------------------------------------------------------

export const FamilyIncludeSchema: z.ZodType<Prisma.FamilyInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  familyMembers: z.union([z.boolean(),z.lazy(() => FamilyMemberFindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FamilyCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const FamilyArgsSchema: z.ZodType<Prisma.FamilyDefaultArgs> = z.object({
  select: z.lazy(() => FamilySelectSchema).optional(),
  include: z.lazy(() => FamilyIncludeSchema).optional(),
}).strict();

export const FamilyCountOutputTypeArgsSchema: z.ZodType<Prisma.FamilyCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => FamilyCountOutputTypeSelectSchema).nullish(),
}).strict();

export const FamilyCountOutputTypeSelectSchema: z.ZodType<Prisma.FamilyCountOutputTypeSelect> = z.object({
  familyMembers: z.boolean().optional(),
  servicing1: z.boolean().optional(),
  servicing2: z.boolean().optional(),
}).strict();

export const FamilySelectSchema: z.ZodType<Prisma.FamilySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  address: z.boolean().optional(),
  phone: z.boolean().optional(),
  mobile: z.boolean().optional(),
  email: z.boolean().optional(),
  note: z.boolean().optional(),
  postalCode: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  familyMembers: z.union([z.boolean(),z.lazy(() => FamilyMemberFindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FamilyCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FAMILY MEMBER
//------------------------------------------------------

export const FamilyMemberIncludeSchema: z.ZodType<Prisma.FamilyMemberInclude> = z.object({
  family: z.union([z.boolean(),z.lazy(() => FamilyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const FamilyMemberArgsSchema: z.ZodType<Prisma.FamilyMemberDefaultArgs> = z.object({
  select: z.lazy(() => FamilyMemberSelectSchema).optional(),
  include: z.lazy(() => FamilyMemberIncludeSchema).optional(),
}).strict();

export const FamilyMemberSelectSchema: z.ZodType<Prisma.FamilyMemberSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  relation: z.boolean().optional(),
  birthday: z.boolean().optional(),
  lunarDate: z.boolean().optional(),
  gender: z.boolean().optional(),
  note: z.boolean().optional(),
  mainPerson: z.boolean().optional(),
  mailThis: z.boolean().optional(),
  isLive: z.boolean().optional(),
  postcode: z.boolean().optional(),
  addr: z.boolean().optional(),
  familyId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  family: z.union([z.boolean(),z.lazy(() => FamilyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// GOD NAME
//------------------------------------------------------

export const GodNameIncludeSchema: z.ZodType<Prisma.GodNameInclude> = z.object({
  borrowGod: z.union([z.boolean(),z.lazy(() => BorrowGodFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => GodNameCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const GodNameArgsSchema: z.ZodType<Prisma.GodNameDefaultArgs> = z.object({
  select: z.lazy(() => GodNameSelectSchema).optional(),
  include: z.lazy(() => GodNameIncludeSchema).optional(),
}).strict();

export const GodNameCountOutputTypeArgsSchema: z.ZodType<Prisma.GodNameCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => GodNameCountOutputTypeSelectSchema).nullish(),
}).strict();

export const GodNameCountOutputTypeSelectSchema: z.ZodType<Prisma.GodNameCountOutputTypeSelect> = z.object({
  borrowGod: z.boolean().optional(),
}).strict();

export const GodNameSelectSchema: z.ZodType<Prisma.GodNameSelect> = z.object({
  id: z.boolean().optional(),
  value: z.boolean().optional(),
  price: z.boolean().optional(),
  order: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  borrowGod: z.union([z.boolean(),z.lazy(() => BorrowGodFindManyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => GodNameCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MEMBER CLASS
//------------------------------------------------------

export const MemberClassIncludeSchema: z.ZodType<Prisma.MemberClassInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const MemberClassArgsSchema: z.ZodType<Prisma.MemberClassDefaultArgs> = z.object({
  select: z.lazy(() => MemberClassSelectSchema).optional(),
  include: z.lazy(() => MemberClassIncludeSchema).optional(),
}).strict();

export const MemberClassSelectSchema: z.ZodType<Prisma.MemberClassSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  type: z.boolean().optional(),
  level: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// MG YEAR
//------------------------------------------------------

export const MgYearIncludeSchema: z.ZodType<Prisma.MgYearInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const MgYearArgsSchema: z.ZodType<Prisma.MgYearDefaultArgs> = z.object({
  select: z.lazy(() => MgYearSelectSchema).optional(),
  include: z.lazy(() => MgYearIncludeSchema).optional(),
}).strict();

export const MgYearSelectSchema: z.ZodType<Prisma.MgYearSelect> = z.object({
  id: z.boolean().optional(),
  order: z.boolean().optional(),
  mgyear: z.boolean().optional(),
  year: z.boolean().optional(),
  nowUse: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// SERVICE 1
//------------------------------------------------------

export const Service1IncludeSchema: z.ZodType<Prisma.Service1Include> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => Service2FindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Service1CountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Service1ArgsSchema: z.ZodType<Prisma.Service1DefaultArgs> = z.object({
  select: z.lazy(() => Service1SelectSchema).optional(),
  include: z.lazy(() => Service1IncludeSchema).optional(),
}).strict();

export const Service1CountOutputTypeArgsSchema: z.ZodType<Prisma.Service1CountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => Service1CountOutputTypeSelectSchema).nullish(),
}).strict();

export const Service1CountOutputTypeSelectSchema: z.ZodType<Prisma.Service1CountOutputTypeSelect> = z.object({
  service2: z.boolean().optional(),
  servicing1: z.boolean().optional(),
  servicing2: z.boolean().optional(),
}).strict();

export const Service1SelectSchema: z.ZodType<Prisma.Service1Select> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  type: z.boolean().optional(),
  level: z.boolean().optional(),
  nowUse: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => Service2FindManyArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Service1CountOutputTypeArgsSchema)]).optional(),
}).strict()

// SERVICE 2
//------------------------------------------------------

export const Service2IncludeSchema: z.ZodType<Prisma.Service2Include> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => Service1ArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Service2CountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Service2ArgsSchema: z.ZodType<Prisma.Service2DefaultArgs> = z.object({
  select: z.lazy(() => Service2SelectSchema).optional(),
  include: z.lazy(() => Service2IncludeSchema).optional(),
}).strict();

export const Service2CountOutputTypeArgsSchema: z.ZodType<Prisma.Service2CountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => Service2CountOutputTypeSelectSchema).nullish(),
}).strict();

export const Service2CountOutputTypeSelectSchema: z.ZodType<Prisma.Service2CountOutputTypeSelect> = z.object({
  servicing1: z.boolean().optional(),
  servicing2: z.boolean().optional(),
}).strict();

export const Service2SelectSchema: z.ZodType<Prisma.Service2Select> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  level: z.boolean().optional(),
  nowUse: z.boolean().optional(),
  service1Id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => Service1ArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1FindManyArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Service2CountOutputTypeArgsSchema)]).optional(),
}).strict()

// SERVICING 1
//------------------------------------------------------

export const Servicing1IncludeSchema: z.ZodType<Prisma.Servicing1Include> = z.object({
  family: z.union([z.boolean(),z.lazy(() => FamilyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => Service1ArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => Service2ArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Servicing1CountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Servicing1ArgsSchema: z.ZodType<Prisma.Servicing1DefaultArgs> = z.object({
  select: z.lazy(() => Servicing1SelectSchema).optional(),
  include: z.lazy(() => Servicing1IncludeSchema).optional(),
}).strict();

export const Servicing1CountOutputTypeArgsSchema: z.ZodType<Prisma.Servicing1CountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => Servicing1CountOutputTypeSelectSchema).nullish(),
}).strict();

export const Servicing1CountOutputTypeSelectSchema: z.ZodType<Prisma.Servicing1CountOutputTypeSelect> = z.object({
  servicing2: z.boolean().optional(),
}).strict();

export const Servicing1SelectSchema: z.ZodType<Prisma.Servicing1Select> = z.object({
  id: z.boolean().optional(),
  familyId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  ordernum: z.boolean().optional(),
  year: z.boolean().optional(),
  applyDate: z.boolean().optional(),
  applyText: z.boolean().optional(),
  cellphone: z.boolean().optional(),
  addr: z.boolean().optional(),
  printType1Id: z.boolean().optional(),
  service1Id: z.boolean().optional(),
  service2Id: z.boolean().optional(),
  serial: z.boolean().optional(),
  accReceivable: z.boolean().optional(),
  accReceived: z.boolean().optional(),
  accPending: z.boolean().optional(),
  payStatus: z.boolean().optional(),
  payMethod: z.boolean().optional(),
  payCurrency: z.boolean().optional(),
  receiptNum: z.boolean().optional(),
  booksNum: z.boolean().optional(),
  payee: z.boolean().optional(),
  advisePeople: z.boolean().optional(),
  ps: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  family: z.union([z.boolean(),z.lazy(() => FamilyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => Service1ArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => Service2ArgsSchema)]).optional(),
  servicing2: z.union([z.boolean(),z.lazy(() => Servicing2FindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Servicing1CountOutputTypeArgsSchema)]).optional(),
}).strict()

// SERVICING 2
//------------------------------------------------------

export const Servicing2IncludeSchema: z.ZodType<Prisma.Servicing2Include> = z.object({
  family: z.union([z.boolean(),z.lazy(() => FamilyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => Service1ArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => Service2ArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1ArgsSchema)]).optional(),
}).strict()

export const Servicing2ArgsSchema: z.ZodType<Prisma.Servicing2DefaultArgs> = z.object({
  select: z.lazy(() => Servicing2SelectSchema).optional(),
  include: z.lazy(() => Servicing2IncludeSchema).optional(),
}).strict();

export const Servicing2SelectSchema: z.ZodType<Prisma.Servicing2Select> = z.object({
  id: z.boolean().optional(),
  familyId: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  servicing1Id: z.boolean().optional(),
  ordernum: z.boolean().optional(),
  year: z.boolean().optional(),
  service1Id: z.boolean().optional(),
  service2Id: z.boolean().optional(),
  serial: z.boolean().optional(),
  praytypeId: z.boolean().optional(),
  printType1Id: z.boolean().optional(),
  printType2Id: z.boolean().optional(),
  livename: z.boolean().optional(),
  people1: z.boolean().optional(),
  passname: z.boolean().optional(),
  passname1: z.boolean().optional(),
  passname2: z.boolean().optional(),
  passname3: z.boolean().optional(),
  passname4: z.boolean().optional(),
  people0: z.boolean().optional(),
  name: z.boolean().optional(),
  sexualId: z.boolean().optional(),
  sexualText: z.boolean().optional(),
  liveYear: z.boolean().optional(),
  boxNum: z.boolean().optional(),
  rowTotal: z.boolean().optional(),
  bornYear: z.boolean().optional(),
  bornMonth: z.boolean().optional(),
  bornDay: z.boolean().optional(),
  bornTime: z.boolean().optional(),
  addr: z.boolean().optional(),
  ps: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  family: z.union([z.boolean(),z.lazy(() => FamilyArgsSchema)]).optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  service1: z.union([z.boolean(),z.lazy(() => Service1ArgsSchema)]).optional(),
  service2: z.union([z.boolean(),z.lazy(() => Service2ArgsSchema)]).optional(),
  servicing1: z.union([z.boolean(),z.lazy(() => Servicing1ArgsSchema)]).optional(),
}).strict()

// TEMPLE
//------------------------------------------------------

export const TempleIncludeSchema: z.ZodType<Prisma.TempleInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const TempleArgsSchema: z.ZodType<Prisma.TempleDefaultArgs> = z.object({
  select: z.lazy(() => TempleSelectSchema).optional(),
  include: z.lazy(() => TempleIncludeSchema).optional(),
}).strict();

export const TempleSelectSchema: z.ZodType<Prisma.TempleSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  address: z.boolean().optional(),
  phone: z.boolean().optional(),
  email: z.boolean().optional(),
  description: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// TRAINED MODEL
//------------------------------------------------------

export const TrainedModelIncludeSchema: z.ZodType<Prisma.TrainedModelInclude> = z.object({
  experimentRun: z.union([z.boolean(),z.lazy(() => ExperimentRunArgsSchema)]).optional(),
  evaluationRuns: z.union([z.boolean(),z.lazy(() => EvaluationRunFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TrainedModelCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TrainedModelArgsSchema: z.ZodType<Prisma.TrainedModelDefaultArgs> = z.object({
  select: z.lazy(() => TrainedModelSelectSchema).optional(),
  include: z.lazy(() => TrainedModelIncludeSchema).optional(),
}).strict();

export const TrainedModelCountOutputTypeArgsSchema: z.ZodType<Prisma.TrainedModelCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TrainedModelCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TrainedModelCountOutputTypeSelectSchema: z.ZodType<Prisma.TrainedModelCountOutputTypeSelect> = z.object({
  evaluationRuns: z.boolean().optional(),
}).strict();

export const TrainedModelSelectSchema: z.ZodType<Prisma.TrainedModelSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  scenarioType: z.boolean().optional(),
  status: z.boolean().optional(),
  experimentRunId: z.boolean().optional(),
  modelConfig: z.boolean().optional(),
  dataSourceConfig: z.boolean().optional(),
  modelPath: z.boolean().optional(),
  trainingMetrics: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  experimentRun: z.union([z.boolean(),z.lazy(() => ExperimentRunArgsSchema)]).optional(),
  evaluationRuns: z.union([z.boolean(),z.lazy(() => EvaluationRunFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TrainedModelCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EVALUATION RUN
//------------------------------------------------------

export const EvaluationRunIncludeSchema: z.ZodType<Prisma.EvaluationRunInclude> = z.object({
  trainedModel: z.union([z.boolean(),z.lazy(() => TrainedModelArgsSchema)]).optional(),
  predictions: z.union([z.boolean(),z.lazy(() => ModelPredictionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EvaluationRunCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EvaluationRunArgsSchema: z.ZodType<Prisma.EvaluationRunDefaultArgs> = z.object({
  select: z.lazy(() => EvaluationRunSelectSchema).optional(),
  include: z.lazy(() => EvaluationRunIncludeSchema).optional(),
}).strict();

export const EvaluationRunCountOutputTypeArgsSchema: z.ZodType<Prisma.EvaluationRunCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EvaluationRunCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EvaluationRunCountOutputTypeSelectSchema: z.ZodType<Prisma.EvaluationRunCountOutputTypeSelect> = z.object({
  predictions: z.boolean().optional(),
}).strict();

export const EvaluationRunSelectSchema: z.ZodType<Prisma.EvaluationRunSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  scenarioType: z.boolean().optional(),
  status: z.boolean().optional(),
  trainedModelId: z.boolean().optional(),
  testSetSource: z.boolean().optional(),
  evaluationMetrics: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  trainedModel: z.union([z.boolean(),z.lazy(() => TrainedModelArgsSchema)]).optional(),
  predictions: z.union([z.boolean(),z.lazy(() => ModelPredictionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EvaluationRunCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MODEL PREDICTION
//------------------------------------------------------

export const ModelPredictionIncludeSchema: z.ZodType<Prisma.ModelPredictionInclude> = z.object({
  evaluationRun: z.union([z.boolean(),z.lazy(() => EvaluationRunArgsSchema)]).optional(),
}).strict()

export const ModelPredictionArgsSchema: z.ZodType<Prisma.ModelPredictionDefaultArgs> = z.object({
  select: z.lazy(() => ModelPredictionSelectSchema).optional(),
  include: z.lazy(() => ModelPredictionIncludeSchema).optional(),
}).strict();

export const ModelPredictionSelectSchema: z.ZodType<Prisma.ModelPredictionSelect> = z.object({
  id: z.boolean().optional(),
  evaluationRunId: z.boolean().optional(),
  anomalyEventId: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  predictionScore: z.boolean().optional(),
  groundTruth: z.boolean().optional(),
  evaluationRun: z.union([z.boolean(),z.lazy(() => EvaluationRunArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  username: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboardingComplete: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locale: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  passkeys: z.lazy(() => PasskeyListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banned: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banReason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banExpires: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  locale: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyOrderByRelationAggregateInputSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputSchema).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    email: z.string(),
    username: z.string()
  }),
  z.object({
    id: z.string().cuid(),
    email: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
    username: z.string(),
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    email: z.string(),
    username: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
  z.object({
    username: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  email: z.string().optional(),
  username: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboardingComplete: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  locale: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  passkeys: z.lazy(() => PasskeyListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banned: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banReason: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  banExpires: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  locale: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  username: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboardingComplete: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  locale: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    token: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  idToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accessTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  idToken: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accessTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationWhereInputSchema: z.ZodType<Prisma.VerificationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VerificationOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const VerificationWhereUniqueInputSchema: z.ZodType<Prisma.VerificationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const VerificationOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => VerificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationMinOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const PasskeyWhereInputSchema: z.ZodType<Prisma.PasskeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const PasskeyOrderByWithRelationInputSchema: z.ZodType<Prisma.PasskeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PasskeyWhereUniqueInputSchema: z.ZodType<Prisma.PasskeyWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyWhereInputSchema),z.lazy(() => PasskeyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const PasskeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.PasskeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PasskeyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PasskeyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PasskeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PasskeyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PasskeySumOrderByAggregateInputSchema).optional()
}).strict();

export const PasskeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PasskeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema),z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema),z.lazy(() => PasskeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const TwoFactorWhereInputSchema: z.ZodType<Prisma.TwoFactorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TwoFactorOrderByWithRelationInputSchema: z.ZodType<Prisma.TwoFactorOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TwoFactorWhereUniqueInputSchema: z.ZodType<Prisma.TwoFactorWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TwoFactorOrderByWithAggregationInputSchema: z.ZodType<Prisma.TwoFactorOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TwoFactorCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TwoFactorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TwoFactorMinOrderByAggregateInputSchema).optional()
}).strict();

export const TwoFactorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TwoFactorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema),z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema),z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountListRelationFilterSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodListRelationFilterSchema).optional(),
  buddhist: z.lazy(() => BuddhistListRelationFilterSchema).optional(),
  customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  family: z.lazy(() => FamilyListRelationFilterSchema).optional(),
  family_member: z.lazy(() => FamilyMemberListRelationFilterSchema).optional(),
  god_name: z.lazy(() => GodNameListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  member_class: z.lazy(() => MemberClassListRelationFilterSchema).optional(),
  mgyear: z.lazy(() => MgYearListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerListRelationFilterSchema).optional(),
  service1: z.lazy(() => Service1ListRelationFilterSchema).optional(),
  service2: z.lazy(() => Service2ListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional(),
  temple: z.lazy(() => TempleListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountOrderByRelationAggregateInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodOrderByRelationAggregateInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistOrderByRelationAggregateInputSchema).optional(),
  customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  expenses: z.lazy(() => ExpenseOrderByRelationAggregateInputSchema).optional(),
  family: z.lazy(() => FamilyOrderByRelationAggregateInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberOrderByRelationAggregateInputSchema).optional(),
  god_name: z.lazy(() => GodNameOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  member_class: z.lazy(() => MemberClassOrderByRelationAggregateInputSchema).optional(),
  mgyear: z.lazy(() => MgYearOrderByRelationAggregateInputSchema).optional(),
  products: z.lazy(() => ProductOrderByRelationAggregateInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingOrderByRelationAggregateInputSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerOrderByRelationAggregateInputSchema).optional(),
  service1: z.lazy(() => Service1OrderByRelationAggregateInputSchema).optional(),
  service2: z.lazy(() => Service2OrderByRelationAggregateInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1OrderByRelationAggregateInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2OrderByRelationAggregateInputSchema).optional(),
  temple: z.lazy(() => TempleOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    slug: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatListRelationFilterSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountListRelationFilterSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodListRelationFilterSchema).optional(),
  buddhist: z.lazy(() => BuddhistListRelationFilterSchema).optional(),
  customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  family: z.lazy(() => FamilyListRelationFilterSchema).optional(),
  family_member: z.lazy(() => FamilyMemberListRelationFilterSchema).optional(),
  god_name: z.lazy(() => GodNameListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  member_class: z.lazy(() => MemberClassListRelationFilterSchema).optional(),
  mgyear: z.lazy(() => MgYearListRelationFilterSchema).optional(),
  products: z.lazy(() => ProductListRelationFilterSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerListRelationFilterSchema).optional(),
  service1: z.lazy(() => Service1ListRelationFilterSchema).optional(),
  service2: z.lazy(() => Service2ListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional(),
  temple: z.lazy(() => TempleListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  logo: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RelationshipManagerWhereInputSchema: z.ZodType<Prisma.RelationshipManagerWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RelationshipManagerWhereInputSchema),z.lazy(() => RelationshipManagerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelationshipManagerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelationshipManagerWhereInputSchema),z.lazy(() => RelationshipManagerWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  joinDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resignDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  finder2Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  rm1Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  rm2Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerOrderByWithRelationInputSchema: z.ZodType<Prisma.RelationshipManagerOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerOrderByRelationAggregateInputSchema).optional(),
  expenses: z.lazy(() => ExpenseOrderByRelationAggregateInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const RelationshipManagerWhereUniqueInputSchema: z.ZodType<Prisma.RelationshipManagerWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_email: z.lazy(() => RelationshipManagerOrganizationIdEmailCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_email: z.lazy(() => RelationshipManagerOrganizationIdEmailCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_email: z.lazy(() => RelationshipManagerOrganizationIdEmailCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RelationshipManagerWhereInputSchema),z.lazy(() => RelationshipManagerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelationshipManagerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelationshipManagerWhereInputSchema),z.lazy(() => RelationshipManagerWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerCount: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  joinDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resignDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  finder2Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  rm1Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  rm2Customers: z.lazy(() => CustomerListRelationFilterSchema).optional(),
  expenses: z.lazy(() => ExpenseListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const RelationshipManagerOrderByWithAggregationInputSchema: z.ZodType<Prisma.RelationshipManagerOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RelationshipManagerCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RelationshipManagerAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RelationshipManagerMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RelationshipManagerMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RelationshipManagerSumOrderByAggregateInputSchema).optional()
}).strict();

export const RelationshipManagerScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RelationshipManagerScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema),z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema),z.lazy(() => RelationshipManagerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerCount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  joinDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  resignDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const CustomerWhereInputSchema: z.ZodType<Prisma.CustomerWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionListRelationFilterSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountListRelationFilterSchema).optional(),
  finder1: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  finder2: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  rm1: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  rm2: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict();

export const CustomerOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomerOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  assetTransactions: z.lazy(() => AssetTransactionOrderByRelationAggregateInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountOrderByRelationAggregateInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CustomerWhereUniqueInputSchema: z.ZodType<Prisma.CustomerWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_code: z.lazy(() => CustomerOrganizationIdCodeCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_code: z.lazy(() => CustomerOrganizationIdCodeCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_code: z.lazy(() => CustomerOrganizationIdCodeCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerWhereInputSchema),z.lazy(() => CustomerWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionListRelationFilterSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountListRelationFilterSchema).optional(),
  finder1: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  finder2: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  rm1: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  rm2: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict());

export const CustomerOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomerOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2ProfitShare: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomerCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CustomerAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomerMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomerMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CustomerSumOrderByAggregateInputSchema).optional()
}).strict();

export const CustomerScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomerScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  rm1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const MemberWhereInputSchema: z.ZodType<Prisma.MemberWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const MemberOrderByWithRelationInputSchema: z.ZodType<Prisma.MemberOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const MemberWhereUniqueInputSchema: z.ZodType<Prisma.MemberWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const MemberOrderByWithAggregationInputSchema: z.ZodType<Prisma.MemberOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MemberCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MemberMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MemberMinOrderByAggregateInputSchema).optional()
}).strict();

export const MemberScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MemberScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationWhereInputSchema: z.ZodType<Prisma.InvitationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const InvitationOrderByWithRelationInputSchema: z.ZodType<Prisma.InvitationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const InvitationWhereUniqueInputSchema: z.ZodType<Prisma.InvitationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const InvitationOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvitationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputSchema).optional()
}).strict();

export const InvitationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvitationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const PurchaseWhereInputSchema: z.ZodType<Prisma.PurchaseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subscriptionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const PurchaseOrderByWithRelationInputSchema: z.ZodType<Prisma.PurchaseOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PurchaseWhereUniqueInputSchema: z.ZodType<Prisma.PurchaseWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    subscriptionId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    subscriptionId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  subscriptionId: z.string().optional(),
  AND: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseWhereInputSchema),z.lazy(() => PurchaseWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const PurchaseOrderByWithAggregationInputSchema: z.ZodType<Prisma.PurchaseOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PurchaseCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PurchaseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PurchaseMinOrderByAggregateInputSchema).optional()
}).strict();

export const PurchaseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PurchaseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema),z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema),z.lazy(() => PurchaseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeWithAggregatesFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  subscriptionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AiChatWhereInputSchema: z.ZodType<Prisma.AiChatWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const AiChatOrderByWithRelationInputSchema: z.ZodType<Prisma.AiChatOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  messages: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AiChatWhereUniqueInputSchema: z.ZodType<Prisma.AiChatWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatWhereInputSchema),z.lazy(() => AiChatWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const AiChatOrderByWithAggregationInputSchema: z.ZodType<Prisma.AiChatOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  messages: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AiChatCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AiChatMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AiChatMinOrderByAggregateInputSchema).optional()
}).strict();

export const AiChatScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AiChatScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema),z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema),z.lazy(() => AiChatScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const BankAccountWhereInputSchema: z.ZodType<Prisma.BankAccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BankAccountWhereInputSchema),z.lazy(() => BankAccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BankAccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BankAccountWhereInputSchema),z.lazy(() => BankAccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accountNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  balance: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customer: z.union([ z.lazy(() => CustomerNullableScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict();

export const BankAccountOrderByWithRelationInputSchema: z.ZodType<Prisma.BankAccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingOrderByRelationAggregateInputSchema).optional()
}).strict();

export const BankAccountWhereUniqueInputSchema: z.ZodType<Prisma.BankAccountWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_accountNumber: z.lazy(() => BankAccountOrganizationIdAccountNumberCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_accountNumber: z.lazy(() => BankAccountOrganizationIdAccountNumberCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_accountNumber: z.lazy(() => BankAccountOrganizationIdAccountNumberCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => BankAccountWhereInputSchema),z.lazy(() => BankAccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BankAccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BankAccountWhereInputSchema),z.lazy(() => BankAccountWhereInputSchema).array() ]).optional(),
  bankName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accountNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  balance: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  customer: z.union([ z.lazy(() => CustomerNullableScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict());

export const BankAccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.BankAccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => BankAccountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => BankAccountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BankAccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BankAccountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => BankAccountSumOrderByAggregateInputSchema).optional()
}).strict();

export const BankAccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BankAccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema),z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema),z.lazy(() => BankAccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  bankName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accountName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  accountNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  balance: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  customerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ExpenseWhereInputSchema: z.ZodType<Prisma.ExpenseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  exchangeRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  receiptUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  sgdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  rm: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseOrderByWithRelationInputSchema: z.ZodType<Prisma.ExpenseOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  receiptUrls: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  rm: z.lazy(() => RelationshipManagerOrderByWithRelationInputSchema).optional()
}).strict();

export const ExpenseWhereUniqueInputSchema: z.ZodType<Prisma.ExpenseWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseWhereInputSchema),z.lazy(() => ExpenseWhereInputSchema).array() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  exchangeRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  receiptUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  sgdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  rm: z.union([ z.lazy(() => RelationshipManagerNullableScalarRelationFilterSchema),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ExpenseOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExpenseOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  receiptUrls: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ExpenseCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ExpenseAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExpenseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExpenseMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ExpenseSumOrderByAggregateInputSchema).optional()
}).strict();

export const ExpenseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExpenseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema),z.lazy(() => ExpenseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  exchangeRate: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  receiptUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  sgdAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdAmount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdRate: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ProductWhereInputSchema: z.ZodType<Prisma.ProductWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  distributionType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict();

export const ProductOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProductWhereUniqueInputSchema: z.ZodType<Prisma.ProductWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    organizationId_code: z.lazy(() => ProductOrganizationIdCodeCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    organizationId_code: z.lazy(() => ProductOrganizationIdCodeCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  organizationId_code: z.lazy(() => ProductOrganizationIdCodeCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductWhereInputSchema),z.lazy(() => ProductWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  distributionType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingListRelationFilterSchema).optional()
}).strict());

export const ProductOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProductCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProductScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  distributionType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const ProfitSharingWhereInputSchema: z.ZodType<Prisma.ProfitSharingWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfitSharingWhereInputSchema),z.lazy(() => ProfitSharingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfitSharingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfitSharingWhereInputSchema),z.lazy(() => ProfitSharingWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankAccountId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profitDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  companyProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenue: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  directTradeBookingFee: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finderProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  fxRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shareable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyFeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  BankAccount: z.union([ z.lazy(() => BankAccountNullableScalarRelationFilterSchema),z.lazy(() => BankAccountWhereInputSchema) ]).optional().nullable(),
  customer: z.union([ z.lazy(() => CustomerScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict();

export const ProfitSharingOrderByWithRelationInputSchema: z.ZodType<Prisma.ProfitSharingOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companyRevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BankAccount: z.lazy(() => BankAccountOrderByWithRelationInputSchema).optional(),
  customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  product: z.lazy(() => ProductOrderByWithRelationInputSchema).optional()
}).strict();

export const ProfitSharingWhereUniqueInputSchema: z.ZodType<Prisma.ProfitSharingWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ProfitSharingWhereInputSchema),z.lazy(() => ProfitSharingWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfitSharingWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfitSharingWhereInputSchema),z.lazy(() => ProfitSharingWhereInputSchema).array() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankAccountId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profitDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  companyProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenue: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  directTradeBookingFee: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finderProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  fxRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shareable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyFeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  BankAccount: z.union([ z.lazy(() => BankAccountNullableScalarRelationFilterSchema),z.lazy(() => BankAccountWhereInputSchema) ]).optional().nullable(),
  customer: z.union([ z.lazy(() => CustomerScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  product: z.union([ z.lazy(() => ProductScalarRelationFilterSchema),z.lazy(() => ProductWhereInputSchema) ]).optional(),
}).strict());

export const ProfitSharingOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProfitSharingOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2Name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenueOriginal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenueUSD: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  companyRevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder1RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  finder2RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm1RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2FeePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rm2RevenuePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ProfitSharingCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProfitSharingAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProfitSharingMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProfitSharingMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProfitSharingSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProfitSharingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProfitSharingScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema),z.lazy(() => ProfitSharingScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  bankAccountId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  productId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  profitDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  companyProfitSharePercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenue: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenueOriginal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  directTradeBookingFee: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finderProfitSharePercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueOriginal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueUSD: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  fxRate: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmProfitSharePercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueOriginal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueUSD: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shareable: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finder1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder1Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder2Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm1Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm2Name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyFeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.lazy(() => DecimalNullableWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
}).strict();

export const AssetTransactionWhereInputSchema: z.ZodType<Prisma.AssetTransactionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AssetTransactionWhereInputSchema),z.lazy(() => AssetTransactionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AssetTransactionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AssetTransactionWhereInputSchema),z.lazy(() => AssetTransactionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customer: z.union([ z.lazy(() => CustomerScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
}).strict();

export const AssetTransactionOrderByWithRelationInputSchema: z.ZodType<Prisma.AssetTransactionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customer: z.lazy(() => CustomerOrderByWithRelationInputSchema).optional()
}).strict();

export const AssetTransactionWhereUniqueInputSchema: z.ZodType<Prisma.AssetTransactionWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AssetTransactionWhereInputSchema),z.lazy(() => AssetTransactionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AssetTransactionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AssetTransactionWhereInputSchema),z.lazy(() => AssetTransactionWhereInputSchema).array() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customer: z.union([ z.lazy(() => CustomerScalarRelationFilterSchema),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
}).strict());

export const AssetTransactionOrderByWithAggregationInputSchema: z.ZodType<Prisma.AssetTransactionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AssetTransactionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AssetTransactionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AssetTransactionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AssetTransactionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AssetTransactionSumOrderByAggregateInputSchema).optional()
}).strict();

export const AssetTransactionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AssetTransactionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema),z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema),z.lazy(() => AssetTransactionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  currency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AmmeterWhereInputSchema: z.ZodType<Prisma.AmmeterWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AmmeterWhereInputSchema),z.lazy(() => AmmeterWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmmeterWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmmeterWhereInputSchema),z.lazy(() => AmmeterWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  electricMeterNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  electricMeterName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const AmmeterOrderByWithRelationInputSchema: z.ZodType<Prisma.AmmeterOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  voltage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  power: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  battery: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  switchState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  networkState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const AmmeterWhereUniqueInputSchema: z.ZodType<Prisma.AmmeterWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    deviceNumber: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    deviceNumber: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  deviceNumber: z.string().optional(),
  AND: z.union([ z.lazy(() => AmmeterWhereInputSchema),z.lazy(() => AmmeterWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmmeterWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmmeterWhereInputSchema),z.lazy(() => AmmeterWhereInputSchema).array() ]).optional(),
  electricMeterNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  electricMeterName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const AmmeterOrderByWithAggregationInputSchema: z.ZodType<Prisma.AmmeterOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  voltage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  power: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  battery: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  switchState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  networkState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AmmeterCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AmmeterAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AmmeterMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AmmeterMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AmmeterSumOrderByAggregateInputSchema).optional()
}).strict();

export const AmmeterScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AmmeterScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AmmeterScalarWhereWithAggregatesInputSchema),z.lazy(() => AmmeterScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmmeterScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmmeterScalarWhereWithAggregatesInputSchema),z.lazy(() => AmmeterScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  electricMeterNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  electricMeterName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const AmmeterLogWhereInputSchema: z.ZodType<Prisma.AmmeterLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AmmeterLogWhereInputSchema),z.lazy(() => AmmeterLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmmeterLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmmeterLogWhereInputSchema),z.lazy(() => AmmeterLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  requestData: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  responseData: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  statusCode: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  success: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  errorMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  responseTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const AmmeterLogOrderByWithRelationInputSchema: z.ZodType<Prisma.AmmeterLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  voltage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  power: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  battery: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  switchState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  networkState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  requestData: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  responseData: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  statusCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  responseTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const AmmeterLogWhereUniqueInputSchema: z.ZodType<Prisma.AmmeterLogWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => AmmeterLogWhereInputSchema),z.lazy(() => AmmeterLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmmeterLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmmeterLogWhereInputSchema),z.lazy(() => AmmeterLogWhereInputSchema).array() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  requestData: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  responseData: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  statusCode: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  success: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  errorMessage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  responseTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const AmmeterLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.AmmeterLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  voltage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currents: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  power: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  battery: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  switchState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  networkState: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  requestData: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  responseData: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  statusCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  responseTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AmmeterLogCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AmmeterLogAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AmmeterLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AmmeterLogMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AmmeterLogSumOrderByAggregateInputSchema).optional()
}).strict();

export const AmmeterLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AmmeterLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AmmeterLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AmmeterLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AmmeterLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AmmeterLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AmmeterLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  deviceNumber: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  factory: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  voltage: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  currents: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  power: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  battery: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  switchState: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  networkState: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  requestData: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  responseData: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  statusCode: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  success: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  errorMessage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  responseTime: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ExperimentRunWhereInputSchema: z.ZodType<Prisma.ExperimentRunWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExperimentRunWhereInputSchema),z.lazy(() => ExperimentRunWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExperimentRunWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExperimentRunWhereInputSchema),z.lazy(() => ExperimentRunWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  filteringParameters: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumExperimentRunStatusFilterSchema),z.lazy(() => ExperimentRunStatusSchema) ]).optional(),
  candidateCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  positiveLabelCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  negativeLabelCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  candidateStats: z.lazy(() => JsonNullableFilterSchema).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventListRelationFilterSchema).optional(),
  trainedModels: z.lazy(() => TrainedModelListRelationFilterSchema).optional()
}).strict();

export const ExperimentRunOrderByWithRelationInputSchema: z.ZodType<Prisma.ExperimentRunOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  filteringParameters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  positiveLabelCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  negativeLabelCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  candidateStats: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventOrderByRelationAggregateInputSchema).optional(),
  trainedModels: z.lazy(() => TrainedModelOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ExperimentRunWhereUniqueInputSchema: z.ZodType<Prisma.ExperimentRunWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ExperimentRunWhereInputSchema),z.lazy(() => ExperimentRunWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExperimentRunWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExperimentRunWhereInputSchema),z.lazy(() => ExperimentRunWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  filteringParameters: z.lazy(() => JsonNullableFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumExperimentRunStatusFilterSchema),z.lazy(() => ExperimentRunStatusSchema) ]).optional(),
  candidateCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  positiveLabelCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  negativeLabelCount: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  candidateStats: z.lazy(() => JsonNullableFilterSchema).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventListRelationFilterSchema).optional(),
  trainedModels: z.lazy(() => TrainedModelListRelationFilterSchema).optional()
}).strict());

export const ExperimentRunOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExperimentRunOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  filteringParameters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  positiveLabelCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  negativeLabelCount: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  candidateStats: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ExperimentRunCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ExperimentRunAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExperimentRunMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExperimentRunMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ExperimentRunSumOrderByAggregateInputSchema).optional()
}).strict();

export const ExperimentRunScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExperimentRunScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema),z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema),z.lazy(() => ExperimentRunScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  filteringParameters: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumExperimentRunStatusWithAggregatesFilterSchema),z.lazy(() => ExperimentRunStatusSchema) ]).optional(),
  candidateCount: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  positiveLabelCount: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  negativeLabelCount: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  candidateStats: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const AnomalyEventWhereInputSchema: z.ZodType<Prisma.AnomalyEventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AnomalyEventWhereInputSchema),z.lazy(() => AnomalyEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnomalyEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnomalyEventWhereInputSchema),z.lazy(() => AnomalyEventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  meterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventTimestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  detectionRule: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  dataWindow: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumAnomalyEventStatusFilterSchema),z.lazy(() => AnomalyEventStatusSchema) ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reviewTimestamp: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  justificationNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  experimentRunId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  experimentRun: z.union([ z.lazy(() => ExperimentRunNullableScalarRelationFilterSchema),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional().nullable(),
  eventLabelLinks: z.lazy(() => EventLabelLinkListRelationFilterSchema).optional()
}).strict();

export const AnomalyEventOrderByWithRelationInputSchema: z.ZodType<Prisma.AnomalyEventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  dataWindow: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reviewTimestamp: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  justificationNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  experimentRun: z.lazy(() => ExperimentRunOrderByWithRelationInputSchema).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkOrderByRelationAggregateInputSchema).optional()
}).strict();

export const AnomalyEventWhereUniqueInputSchema: z.ZodType<Prisma.AnomalyEventWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    eventId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    eventId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  eventId: z.string().optional(),
  AND: z.union([ z.lazy(() => AnomalyEventWhereInputSchema),z.lazy(() => AnomalyEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnomalyEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnomalyEventWhereInputSchema),z.lazy(() => AnomalyEventWhereInputSchema).array() ]).optional(),
  meterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventTimestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  detectionRule: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  dataWindow: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumAnomalyEventStatusFilterSchema),z.lazy(() => AnomalyEventStatusSchema) ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reviewTimestamp: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  justificationNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  experimentRunId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  experimentRun: z.union([ z.lazy(() => ExperimentRunNullableScalarRelationFilterSchema),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional().nullable(),
  eventLabelLinks: z.lazy(() => EventLabelLinkListRelationFilterSchema).optional()
}).strict());

export const AnomalyEventOrderByWithAggregationInputSchema: z.ZodType<Prisma.AnomalyEventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  dataWindow: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reviewTimestamp: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  justificationNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AnomalyEventCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AnomalyEventAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AnomalyEventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AnomalyEventMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AnomalyEventSumOrderByAggregateInputSchema).optional()
}).strict();

export const AnomalyEventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AnomalyEventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AnomalyEventScalarWhereWithAggregatesInputSchema),z.lazy(() => AnomalyEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnomalyEventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnomalyEventScalarWhereWithAggregatesInputSchema),z.lazy(() => AnomalyEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  meterId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventTimestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  detectionRule: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  score: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  dataWindow: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumAnomalyEventStatusWithAggregatesFilterSchema),z.lazy(() => AnomalyEventStatusSchema) ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  reviewTimestamp: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  justificationNotes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  experimentRunId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const AnomalyLabelWhereInputSchema: z.ZodType<Prisma.AnomalyLabelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AnomalyLabelWhereInputSchema),z.lazy(() => AnomalyLabelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnomalyLabelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnomalyLabelWhereInputSchema),z.lazy(() => AnomalyLabelWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkListRelationFilterSchema).optional()
}).strict();

export const AnomalyLabelOrderByWithRelationInputSchema: z.ZodType<Prisma.AnomalyLabelOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkOrderByRelationAggregateInputSchema).optional()
}).strict();

export const AnomalyLabelWhereUniqueInputSchema: z.ZodType<Prisma.AnomalyLabelWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    name: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => AnomalyLabelWhereInputSchema),z.lazy(() => AnomalyLabelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnomalyLabelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnomalyLabelWhereInputSchema),z.lazy(() => AnomalyLabelWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkListRelationFilterSchema).optional()
}).strict());

export const AnomalyLabelOrderByWithAggregationInputSchema: z.ZodType<Prisma.AnomalyLabelOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AnomalyLabelCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AnomalyLabelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AnomalyLabelMinOrderByAggregateInputSchema).optional()
}).strict();

export const AnomalyLabelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AnomalyLabelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AnomalyLabelScalarWhereWithAggregatesInputSchema),z.lazy(() => AnomalyLabelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnomalyLabelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnomalyLabelScalarWhereWithAggregatesInputSchema),z.lazy(() => AnomalyLabelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const BorrowGodWhereInputSchema: z.ZodType<Prisma.BorrowGodWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BorrowGodWhereInputSchema),z.lazy(() => BorrowGodWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BorrowGodWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BorrowGodWhereInputSchema),z.lazy(() => BorrowGodWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  godNameId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  typeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  godName: z.union([ z.lazy(() => GodNameScalarRelationFilterSchema),z.lazy(() => GodNameWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const BorrowGodOrderByWithRelationInputSchema: z.ZodType<Prisma.BorrowGodOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  godName: z.lazy(() => GodNameOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const BorrowGodWhereUniqueInputSchema: z.ZodType<Prisma.BorrowGodWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => BorrowGodWhereInputSchema),z.lazy(() => BorrowGodWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BorrowGodWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BorrowGodWhereInputSchema),z.lazy(() => BorrowGodWhereInputSchema).array() ]).optional(),
  godNameId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  typeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  godName: z.union([ z.lazy(() => GodNameScalarRelationFilterSchema),z.lazy(() => GodNameWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const BorrowGodOrderByWithAggregationInputSchema: z.ZodType<Prisma.BorrowGodOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => BorrowGodCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BorrowGodMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BorrowGodMinOrderByAggregateInputSchema).optional()
}).strict();

export const BorrowGodScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BorrowGodScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BorrowGodScalarWhereWithAggregatesInputSchema),z.lazy(() => BorrowGodScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BorrowGodScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BorrowGodScalarWhereWithAggregatesInputSchema),z.lazy(() => BorrowGodScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  godNameId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  applyName: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  typeId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const BuddhistWhereInputSchema: z.ZodType<Prisma.BuddhistWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BuddhistWhereInputSchema),z.lazy(() => BuddhistWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BuddhistWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BuddhistWhereInputSchema),z.lazy(() => BuddhistWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  templeNowText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const BuddhistOrderByWithRelationInputSchema: z.ZodType<Prisma.BuddhistOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  templeNowText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const BuddhistWhereUniqueInputSchema: z.ZodType<Prisma.BuddhistWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => BuddhistWhereInputSchema),z.lazy(() => BuddhistWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BuddhistWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BuddhistWhereInputSchema),z.lazy(() => BuddhistWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  templeNowText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const BuddhistOrderByWithAggregationInputSchema: z.ZodType<Prisma.BuddhistOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  templeNowText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => BuddhistCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BuddhistMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BuddhistMinOrderByAggregateInputSchema).optional()
}).strict();

export const BuddhistScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BuddhistScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BuddhistScalarWhereWithAggregatesInputSchema),z.lazy(() => BuddhistScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BuddhistScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BuddhistScalarWhereWithAggregatesInputSchema),z.lazy(() => BuddhistScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  templeNowText: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventLabelLinkWhereInputSchema: z.ZodType<Prisma.EventLabelLinkWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventLabelLinkWhereInputSchema),z.lazy(() => EventLabelLinkWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventLabelLinkWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventLabelLinkWhereInputSchema),z.lazy(() => EventLabelLinkWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  labelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  anomalyEvent: z.union([ z.lazy(() => AnomalyEventScalarRelationFilterSchema),z.lazy(() => AnomalyEventWhereInputSchema) ]).optional(),
  anomalyLabel: z.union([ z.lazy(() => AnomalyLabelScalarRelationFilterSchema),z.lazy(() => AnomalyLabelWhereInputSchema) ]).optional(),
}).strict();

export const EventLabelLinkOrderByWithRelationInputSchema: z.ZodType<Prisma.EventLabelLinkOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  anomalyEvent: z.lazy(() => AnomalyEventOrderByWithRelationInputSchema).optional(),
  anomalyLabel: z.lazy(() => AnomalyLabelOrderByWithRelationInputSchema).optional()
}).strict();

export const EventLabelLinkWhereUniqueInputSchema: z.ZodType<Prisma.EventLabelLinkWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    eventId_labelId: z.lazy(() => EventLabelLinkEventIdLabelIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    eventId_labelId: z.lazy(() => EventLabelLinkEventIdLabelIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  eventId_labelId: z.lazy(() => EventLabelLinkEventIdLabelIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => EventLabelLinkWhereInputSchema),z.lazy(() => EventLabelLinkWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventLabelLinkWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventLabelLinkWhereInputSchema),z.lazy(() => EventLabelLinkWhereInputSchema).array() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  labelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  anomalyEvent: z.union([ z.lazy(() => AnomalyEventScalarRelationFilterSchema),z.lazy(() => AnomalyEventWhereInputSchema) ]).optional(),
  anomalyLabel: z.union([ z.lazy(() => AnomalyLabelScalarRelationFilterSchema),z.lazy(() => AnomalyLabelWhereInputSchema) ]).optional(),
}).strict());

export const EventLabelLinkOrderByWithAggregationInputSchema: z.ZodType<Prisma.EventLabelLinkOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EventLabelLinkCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EventLabelLinkMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EventLabelLinkMinOrderByAggregateInputSchema).optional()
}).strict();

export const EventLabelLinkScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EventLabelLinkScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EventLabelLinkScalarWhereWithAggregatesInputSchema),z.lazy(() => EventLabelLinkScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventLabelLinkScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventLabelLinkScalarWhereWithAggregatesInputSchema),z.lazy(() => EventLabelLinkScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  labelId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FamilyWhereInputSchema: z.ZodType<Prisma.FamilyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FamilyWhereInputSchema),z.lazy(() => FamilyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FamilyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FamilyWhereInputSchema),z.lazy(() => FamilyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  familyMembers: z.lazy(() => FamilyMemberListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict();

export const FamilyOrderByWithRelationInputSchema: z.ZodType<Prisma.FamilyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  postalCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  familyMembers: z.lazy(() => FamilyMemberOrderByRelationAggregateInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1OrderByRelationAggregateInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2OrderByRelationAggregateInputSchema).optional()
}).strict();

export const FamilyWhereUniqueInputSchema: z.ZodType<Prisma.FamilyWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => FamilyWhereInputSchema),z.lazy(() => FamilyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FamilyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FamilyWhereInputSchema),z.lazy(() => FamilyWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  familyMembers: z.lazy(() => FamilyMemberListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict());

export const FamilyOrderByWithAggregationInputSchema: z.ZodType<Prisma.FamilyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mobile: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  postalCode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FamilyCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FamilyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FamilyMinOrderByAggregateInputSchema).optional()
}).strict();

export const FamilyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FamilyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FamilyScalarWhereWithAggregatesInputSchema),z.lazy(() => FamilyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FamilyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FamilyScalarWhereWithAggregatesInputSchema),z.lazy(() => FamilyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mobile: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FamilyMemberWhereInputSchema: z.ZodType<Prisma.FamilyMemberWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FamilyMemberWhereInputSchema),z.lazy(() => FamilyMemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FamilyMemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FamilyMemberWhereInputSchema),z.lazy(() => FamilyMemberWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birthday: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lunarDate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mainPerson: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mailThis: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isLive: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  postcode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => FamilyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const FamilyMemberOrderByWithRelationInputSchema: z.ZodType<Prisma.FamilyMemberOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birthday: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lunarDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  family: z.lazy(() => FamilyOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const FamilyMemberWhereUniqueInputSchema: z.ZodType<Prisma.FamilyMemberWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => FamilyMemberWhereInputSchema),z.lazy(() => FamilyMemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FamilyMemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FamilyMemberWhereInputSchema),z.lazy(() => FamilyMemberWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birthday: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lunarDate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mainPerson: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mailThis: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isLive: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  postcode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => FamilyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const FamilyMemberOrderByWithAggregationInputSchema: z.ZodType<Prisma.FamilyMemberOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birthday: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lunarDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  gender: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  note: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FamilyMemberCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FamilyMemberMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FamilyMemberMinOrderByAggregateInputSchema).optional()
}).strict();

export const FamilyMemberScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FamilyMemberScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FamilyMemberScalarWhereWithAggregatesInputSchema),z.lazy(() => FamilyMemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FamilyMemberScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FamilyMemberScalarWhereWithAggregatesInputSchema),z.lazy(() => FamilyMemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  birthday: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lunarDate: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mainPerson: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mailThis: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isLive: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  postcode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  familyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const GodNameWhereInputSchema: z.ZodType<Prisma.GodNameWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GodNameWhereInputSchema),z.lazy(() => GodNameWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GodNameWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GodNameWhereInputSchema),z.lazy(() => GodNameWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  borrowGod: z.lazy(() => BorrowGodListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const GodNameOrderByWithRelationInputSchema: z.ZodType<Prisma.GodNameOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  borrowGod: z.lazy(() => BorrowGodOrderByRelationAggregateInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const GodNameWhereUniqueInputSchema: z.ZodType<Prisma.GodNameWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => GodNameWhereInputSchema),z.lazy(() => GodNameWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GodNameWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GodNameWhereInputSchema),z.lazy(() => GodNameWhereInputSchema).array() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  borrowGod: z.lazy(() => BorrowGodListRelationFilterSchema).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const GodNameOrderByWithAggregationInputSchema: z.ZodType<Prisma.GodNameOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => GodNameCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => GodNameAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => GodNameMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => GodNameMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => GodNameSumOrderByAggregateInputSchema).optional()
}).strict();

export const GodNameScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.GodNameScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => GodNameScalarWhereWithAggregatesInputSchema),z.lazy(() => GodNameScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => GodNameScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GodNameScalarWhereWithAggregatesInputSchema),z.lazy(() => GodNameScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MemberClassWhereInputSchema: z.ZodType<Prisma.MemberClassWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberClassWhereInputSchema),z.lazy(() => MemberClassWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberClassWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberClassWhereInputSchema),z.lazy(() => MemberClassWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const MemberClassOrderByWithRelationInputSchema: z.ZodType<Prisma.MemberClassOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const MemberClassWhereUniqueInputSchema: z.ZodType<Prisma.MemberClassWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => MemberClassWhereInputSchema),z.lazy(() => MemberClassWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberClassWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberClassWhereInputSchema),z.lazy(() => MemberClassWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const MemberClassOrderByWithAggregationInputSchema: z.ZodType<Prisma.MemberClassOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MemberClassCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MemberClassAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MemberClassMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MemberClassMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MemberClassSumOrderByAggregateInputSchema).optional()
}).strict();

export const MemberClassScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MemberClassScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MemberClassScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberClassScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberClassScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberClassScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberClassScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MgYearWhereInputSchema: z.ZodType<Prisma.MgYearWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MgYearWhereInputSchema),z.lazy(() => MgYearWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MgYearWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MgYearWhereInputSchema),z.lazy(() => MgYearWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgyear: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const MgYearOrderByWithRelationInputSchema: z.ZodType<Prisma.MgYearOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const MgYearWhereUniqueInputSchema: z.ZodType<Prisma.MgYearWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    organizationId_mgyear: z.lazy(() => MgYearOrganizationIdMgyearCompoundUniqueInputSchema),
    organizationId_year: z.lazy(() => MgYearOrganizationIdYearCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
    organizationId_mgyear: z.lazy(() => MgYearOrganizationIdMgyearCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
    organizationId_year: z.lazy(() => MgYearOrganizationIdYearCompoundUniqueInputSchema),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    organizationId_mgyear: z.lazy(() => MgYearOrganizationIdMgyearCompoundUniqueInputSchema),
    organizationId_year: z.lazy(() => MgYearOrganizationIdYearCompoundUniqueInputSchema),
  }),
  z.object({
    organizationId_mgyear: z.lazy(() => MgYearOrganizationIdMgyearCompoundUniqueInputSchema),
  }),
  z.object({
    organizationId_year: z.lazy(() => MgYearOrganizationIdYearCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  organizationId_mgyear: z.lazy(() => MgYearOrganizationIdMgyearCompoundUniqueInputSchema).optional(),
  organizationId_year: z.lazy(() => MgYearOrganizationIdYearCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => MgYearWhereInputSchema),z.lazy(() => MgYearWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MgYearWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MgYearWhereInputSchema),z.lazy(() => MgYearWhereInputSchema).array() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  mgyear: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const MgYearOrderByWithAggregationInputSchema: z.ZodType<Prisma.MgYearOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MgYearCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MgYearAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MgYearMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MgYearMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MgYearSumOrderByAggregateInputSchema).optional()
}).strict();

export const MgYearScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MgYearScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MgYearScalarWhereWithAggregatesInputSchema),z.lazy(() => MgYearScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MgYearScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MgYearScalarWhereWithAggregatesInputSchema),z.lazy(() => MgYearScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  mgyear: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Service1WhereInputSchema: z.ZodType<Prisma.Service1WhereInput> = z.object({
  AND: z.union([ z.lazy(() => Service1WhereInputSchema),z.lazy(() => Service1WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Service1WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Service1WhereInputSchema),z.lazy(() => Service1WhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service2: z.lazy(() => Service2ListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict();

export const Service1OrderByWithRelationInputSchema: z.ZodType<Prisma.Service1OrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  service2: z.lazy(() => Service2OrderByRelationAggregateInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1OrderByRelationAggregateInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2OrderByRelationAggregateInputSchema).optional()
}).strict();

export const Service1WhereUniqueInputSchema: z.ZodType<Prisma.Service1WhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => Service1WhereInputSchema),z.lazy(() => Service1WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Service1WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Service1WhereInputSchema),z.lazy(() => Service1WhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service2: z.lazy(() => Service2ListRelationFilterSchema).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict());

export const Service1OrderByWithAggregationInputSchema: z.ZodType<Prisma.Service1OrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Service1CountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Service1AvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Service1MaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Service1MinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Service1SumOrderByAggregateInputSchema).optional()
}).strict();

export const Service1ScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Service1ScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Service1ScalarWhereWithAggregatesInputSchema),z.lazy(() => Service1ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Service1ScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Service1ScalarWhereWithAggregatesInputSchema),z.lazy(() => Service1ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Service2WhereInputSchema: z.ZodType<Prisma.Service2WhereInput> = z.object({
  AND: z.union([ z.lazy(() => Service2WhereInputSchema),z.lazy(() => Service2WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Service2WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Service2WhereInputSchema),z.lazy(() => Service2WhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => Service1WhereInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict();

export const Service2OrderByWithRelationInputSchema: z.ZodType<Prisma.Service2OrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  service1: z.lazy(() => Service1OrderByWithRelationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1OrderByRelationAggregateInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2OrderByRelationAggregateInputSchema).optional()
}).strict();

export const Service2WhereUniqueInputSchema: z.ZodType<Prisma.Service2WhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => Service2WhereInputSchema),z.lazy(() => Service2WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Service2WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Service2WhereInputSchema),z.lazy(() => Service2WhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => Service1WhereInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1ListRelationFilterSchema).optional(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict());

export const Service2OrderByWithAggregationInputSchema: z.ZodType<Prisma.Service2OrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Service2CountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Service2AvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Service2MaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Service2MinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Service2SumOrderByAggregateInputSchema).optional()
}).strict();

export const Service2ScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Service2ScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Service2ScalarWhereWithAggregatesInputSchema),z.lazy(() => Service2ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Service2ScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Service2ScalarWhereWithAggregatesInputSchema),z.lazy(() => Service2ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Servicing1WhereInputSchema: z.ZodType<Prisma.Servicing1WhereInput> = z.object({
  AND: z.union([ z.lazy(() => Servicing1WhereInputSchema),z.lazy(() => Servicing1WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Servicing1WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Servicing1WhereInputSchema),z.lazy(() => Servicing1WhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  applyText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accReceivable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accReceived: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accPending: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  payStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payMethod: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payCurrency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  receiptNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  booksNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  advisePeople: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => FamilyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => Service1WhereInputSchema) ]).optional(),
  service2: z.union([ z.lazy(() => Service2NullableScalarRelationFilterSchema),z.lazy(() => Service2WhereInputSchema) ]).optional().nullable(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict();

export const Servicing1OrderByWithRelationInputSchema: z.ZodType<Prisma.Servicing1OrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payMethod: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  booksNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  advisePeople: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ps: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  family: z.lazy(() => FamilyOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  service1: z.lazy(() => Service1OrderByWithRelationInputSchema).optional(),
  service2: z.lazy(() => Service2OrderByWithRelationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2OrderByRelationAggregateInputSchema).optional()
}).strict();

export const Servicing1WhereUniqueInputSchema: z.ZodType<Prisma.Servicing1WhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    organizationId_ordernum_year: z.lazy(() => Servicing1OrganizationIdOrdernumYearCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    organizationId_ordernum_year: z.lazy(() => Servicing1OrganizationIdOrdernumYearCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  organizationId_ordernum_year: z.lazy(() => Servicing1OrganizationIdOrdernumYearCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => Servicing1WhereInputSchema),z.lazy(() => Servicing1WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Servicing1WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Servicing1WhereInputSchema),z.lazy(() => Servicing1WhereInputSchema).array() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  applyText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accReceivable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accReceived: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accPending: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  payStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payMethod: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payCurrency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  receiptNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  booksNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  advisePeople: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => FamilyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => Service1WhereInputSchema) ]).optional(),
  service2: z.union([ z.lazy(() => Service2NullableScalarRelationFilterSchema),z.lazy(() => Service2WhereInputSchema) ]).optional().nullable(),
  servicing2: z.lazy(() => Servicing2ListRelationFilterSchema).optional()
}).strict());

export const Servicing1OrderByWithAggregationInputSchema: z.ZodType<Prisma.Servicing1OrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payMethod: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  booksNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  payee: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  advisePeople: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ps: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Servicing1CountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Servicing1AvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Servicing1MaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Servicing1MinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Servicing1SumOrderByAggregateInputSchema).optional()
}).strict();

export const Servicing1ScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Servicing1ScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Servicing1ScalarWhereWithAggregatesInputSchema),z.lazy(() => Servicing1ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Servicing1ScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Servicing1ScalarWhereWithAggregatesInputSchema),z.lazy(() => Servicing1ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  applyDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  applyText: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  service1Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  accReceivable: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accReceived: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accPending: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  payStatus: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  payMethod: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  payCurrency: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  receiptNum: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  booksNum: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  payee: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  advisePeople: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Servicing2WhereInputSchema: z.ZodType<Prisma.Servicing2WhereInput> = z.object({
  AND: z.union([ z.lazy(() => Servicing2WhereInputSchema),z.lazy(() => Servicing2WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Servicing2WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Servicing2WhereInputSchema),z.lazy(() => Servicing2WhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  servicing1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  praytypeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  livename: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people1: z.lazy(() => JsonNullableFilterSchema).optional(),
  passname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname4: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people0: z.lazy(() => JsonNullableFilterSchema).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  liveYear: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  boxNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rowTotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bornYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornMonth: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornDay: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => FamilyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => Service1WhereInputSchema) ]).optional(),
  service2: z.union([ z.lazy(() => Service2NullableScalarRelationFilterSchema),z.lazy(() => Service2WhereInputSchema) ]).optional().nullable(),
  servicing1: z.union([ z.lazy(() => Servicing1ScalarRelationFilterSchema),z.lazy(() => Servicing1WhereInputSchema) ]).optional(),
}).strict();

export const Servicing2OrderByWithRelationInputSchema: z.ZodType<Prisma.Servicing2OrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  praytypeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  livename: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  people1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname4: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  people0: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sexualId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sexualText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  liveYear: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boxNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornMonth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornDay: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ps: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  family: z.lazy(() => FamilyOrderByWithRelationInputSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  service1: z.lazy(() => Service1OrderByWithRelationInputSchema).optional(),
  service2: z.lazy(() => Service2OrderByWithRelationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1OrderByWithRelationInputSchema).optional()
}).strict();

export const Servicing2WhereUniqueInputSchema: z.ZodType<Prisma.Servicing2WhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => Servicing2WhereInputSchema),z.lazy(() => Servicing2WhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Servicing2WhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Servicing2WhereInputSchema),z.lazy(() => Servicing2WhereInputSchema).array() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  servicing1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  praytypeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  livename: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people1: z.lazy(() => JsonNullableFilterSchema).optional(),
  passname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname4: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people0: z.lazy(() => JsonNullableFilterSchema).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  liveYear: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  boxNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rowTotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bornYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornMonth: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornDay: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  family: z.union([ z.lazy(() => FamilyScalarRelationFilterSchema),z.lazy(() => FamilyWhereInputSchema) ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  service1: z.union([ z.lazy(() => Service1ScalarRelationFilterSchema),z.lazy(() => Service1WhereInputSchema) ]).optional(),
  service2: z.union([ z.lazy(() => Service2NullableScalarRelationFilterSchema),z.lazy(() => Service2WhereInputSchema) ]).optional().nullable(),
  servicing1: z.union([ z.lazy(() => Servicing1ScalarRelationFilterSchema),z.lazy(() => Servicing1WhereInputSchema) ]).optional(),
}).strict());

export const Servicing2OrderByWithAggregationInputSchema: z.ZodType<Prisma.Servicing2OrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  praytypeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType1Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printType2Id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  livename: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  people1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passname4: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  people0: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sexualId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sexualText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  liveYear: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  boxNum: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornMonth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornDay: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  bornTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addr: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ps: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Servicing2CountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Servicing2AvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Servicing2MaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Servicing2MinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Servicing2SumOrderByAggregateInputSchema).optional()
}).strict();

export const Servicing2ScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Servicing2ScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Servicing2ScalarWhereWithAggregatesInputSchema),z.lazy(() => Servicing2ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Servicing2ScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Servicing2ScalarWhereWithAggregatesInputSchema),z.lazy(() => Servicing2ScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  servicing1Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  praytypeId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  printType2Id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  livename: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  people1: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  passname: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  passname1: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  passname2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  passname3: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  passname4: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  people0: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sexualId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sexualText: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  liveYear: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  boxNum: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rowTotal: z.union([ z.lazy(() => DecimalWithAggregatesFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bornYear: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  bornMonth: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  bornDay: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  bornTime: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TempleWhereInputSchema: z.ZodType<Prisma.TempleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TempleWhereInputSchema),z.lazy(() => TempleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TempleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TempleWhereInputSchema),z.lazy(() => TempleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const TempleOrderByWithRelationInputSchema: z.ZodType<Prisma.TempleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const TempleWhereUniqueInputSchema: z.ZodType<Prisma.TempleWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TempleWhereInputSchema),z.lazy(() => TempleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TempleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TempleWhereInputSchema),z.lazy(() => TempleWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const TempleOrderByWithAggregationInputSchema: z.ZodType<Prisma.TempleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TempleCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TempleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TempleMinOrderByAggregateInputSchema).optional()
}).strict();

export const TempleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TempleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TempleScalarWhereWithAggregatesInputSchema),z.lazy(() => TempleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TempleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TempleScalarWhereWithAggregatesInputSchema),z.lazy(() => TempleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TrainedModelWhereInputSchema: z.ZodType<Prisma.TrainedModelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TrainedModelWhereInputSchema),z.lazy(() => TrainedModelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TrainedModelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TrainedModelWhereInputSchema),z.lazy(() => TrainedModelWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  scenarioType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  experimentRunId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelConfig: z.lazy(() => JsonFilterSchema).optional(),
  dataSourceConfig: z.lazy(() => JsonFilterSchema).optional(),
  modelPath: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  trainingMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  experimentRun: z.union([ z.lazy(() => ExperimentRunScalarRelationFilterSchema),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional(),
  evaluationRuns: z.lazy(() => EvaluationRunListRelationFilterSchema).optional()
}).strict();

export const TrainedModelOrderByWithRelationInputSchema: z.ZodType<Prisma.TrainedModelOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  modelConfig: z.lazy(() => SortOrderSchema).optional(),
  dataSourceConfig: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  trainingMetrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  experimentRun: z.lazy(() => ExperimentRunOrderByWithRelationInputSchema).optional(),
  evaluationRuns: z.lazy(() => EvaluationRunOrderByRelationAggregateInputSchema).optional()
}).strict();

export const TrainedModelWhereUniqueInputSchema: z.ZodType<Prisma.TrainedModelWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => TrainedModelWhereInputSchema),z.lazy(() => TrainedModelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TrainedModelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TrainedModelWhereInputSchema),z.lazy(() => TrainedModelWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  scenarioType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  experimentRunId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelConfig: z.lazy(() => JsonFilterSchema).optional(),
  dataSourceConfig: z.lazy(() => JsonFilterSchema).optional(),
  modelPath: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  trainingMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  experimentRun: z.union([ z.lazy(() => ExperimentRunScalarRelationFilterSchema),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional(),
  evaluationRuns: z.lazy(() => EvaluationRunListRelationFilterSchema).optional()
}).strict());

export const TrainedModelOrderByWithAggregationInputSchema: z.ZodType<Prisma.TrainedModelOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  modelConfig: z.lazy(() => SortOrderSchema).optional(),
  dataSourceConfig: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  trainingMetrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => TrainedModelCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TrainedModelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TrainedModelMinOrderByAggregateInputSchema).optional()
}).strict();

export const TrainedModelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TrainedModelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema),z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema),z.lazy(() => TrainedModelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  scenarioType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  experimentRunId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  modelConfig: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  dataSourceConfig: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  modelPath: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  trainingMetrics: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const EvaluationRunWhereInputSchema: z.ZodType<Prisma.EvaluationRunWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EvaluationRunWhereInputSchema),z.lazy(() => EvaluationRunWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EvaluationRunWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EvaluationRunWhereInputSchema),z.lazy(() => EvaluationRunWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  scenarioType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  trainedModelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testSetSource: z.lazy(() => JsonFilterSchema).optional(),
  evaluationMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  trainedModel: z.union([ z.lazy(() => TrainedModelScalarRelationFilterSchema),z.lazy(() => TrainedModelWhereInputSchema) ]).optional(),
  predictions: z.lazy(() => ModelPredictionListRelationFilterSchema).optional()
}).strict();

export const EvaluationRunOrderByWithRelationInputSchema: z.ZodType<Prisma.EvaluationRunOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  trainedModelId: z.lazy(() => SortOrderSchema).optional(),
  testSetSource: z.lazy(() => SortOrderSchema).optional(),
  evaluationMetrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  trainedModel: z.lazy(() => TrainedModelOrderByWithRelationInputSchema).optional(),
  predictions: z.lazy(() => ModelPredictionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EvaluationRunWhereUniqueInputSchema: z.ZodType<Prisma.EvaluationRunWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EvaluationRunWhereInputSchema),z.lazy(() => EvaluationRunWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EvaluationRunWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EvaluationRunWhereInputSchema),z.lazy(() => EvaluationRunWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  scenarioType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  trainedModelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testSetSource: z.lazy(() => JsonFilterSchema).optional(),
  evaluationMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  trainedModel: z.union([ z.lazy(() => TrainedModelScalarRelationFilterSchema),z.lazy(() => TrainedModelWhereInputSchema) ]).optional(),
  predictions: z.lazy(() => ModelPredictionListRelationFilterSchema).optional()
}).strict());

export const EvaluationRunOrderByWithAggregationInputSchema: z.ZodType<Prisma.EvaluationRunOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  trainedModelId: z.lazy(() => SortOrderSchema).optional(),
  testSetSource: z.lazy(() => SortOrderSchema).optional(),
  evaluationMetrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => EvaluationRunCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EvaluationRunMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EvaluationRunMinOrderByAggregateInputSchema).optional()
}).strict();

export const EvaluationRunScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EvaluationRunScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EvaluationRunScalarWhereWithAggregatesInputSchema),z.lazy(() => EvaluationRunScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EvaluationRunScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EvaluationRunScalarWhereWithAggregatesInputSchema),z.lazy(() => EvaluationRunScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  scenarioType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  trainedModelId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  testSetSource: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  evaluationMetrics: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ModelPredictionWhereInputSchema: z.ZodType<Prisma.ModelPredictionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelPredictionWhereInputSchema),z.lazy(() => ModelPredictionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelPredictionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelPredictionWhereInputSchema),z.lazy(() => ModelPredictionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  evaluationRunId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  anomalyEventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  predictionScore: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  groundTruth: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  evaluationRun: z.union([ z.lazy(() => EvaluationRunScalarRelationFilterSchema),z.lazy(() => EvaluationRunWhereInputSchema) ]).optional(),
}).strict();

export const ModelPredictionOrderByWithRelationInputSchema: z.ZodType<Prisma.ModelPredictionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  evaluationRunId: z.lazy(() => SortOrderSchema).optional(),
  anomalyEventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  predictionScore: z.lazy(() => SortOrderSchema).optional(),
  groundTruth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  evaluationRun: z.lazy(() => EvaluationRunOrderByWithRelationInputSchema).optional()
}).strict();

export const ModelPredictionWhereUniqueInputSchema: z.ZodType<Prisma.ModelPredictionWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ModelPredictionWhereInputSchema),z.lazy(() => ModelPredictionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelPredictionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelPredictionWhereInputSchema),z.lazy(() => ModelPredictionWhereInputSchema).array() ]).optional(),
  evaluationRunId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  anomalyEventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  predictionScore: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  groundTruth: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  evaluationRun: z.union([ z.lazy(() => EvaluationRunScalarRelationFilterSchema),z.lazy(() => EvaluationRunWhereInputSchema) ]).optional(),
}).strict());

export const ModelPredictionOrderByWithAggregationInputSchema: z.ZodType<Prisma.ModelPredictionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  evaluationRunId: z.lazy(() => SortOrderSchema).optional(),
  anomalyEventId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  predictionScore: z.lazy(() => SortOrderSchema).optional(),
  groundTruth: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ModelPredictionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ModelPredictionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ModelPredictionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ModelPredictionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ModelPredictionSumOrderByAggregateInputSchema).optional()
}).strict();

export const ModelPredictionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ModelPredictionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ModelPredictionScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelPredictionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelPredictionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelPredictionScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelPredictionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  evaluationRunId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  anomalyEventId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  predictionScore: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  groundTruth: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationCreateInputSchema: z.ZodType<Prisma.VerificationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateInputSchema: z.ZodType<Prisma.VerificationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationCreateManyInputSchema: z.ZodType<Prisma.VerificationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyCreateInputSchema: z.ZodType<Prisma.PasskeyCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutPasskeysInputSchema)
}).strict();

export const PasskeyUncheckedCreateInputSchema: z.ZodType<Prisma.PasskeyUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyUpdateInputSchema: z.ZodType<Prisma.PasskeyUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPasskeysNestedInputSchema).optional()
}).strict();

export const PasskeyUncheckedUpdateInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyCreateManyInputSchema: z.ZodType<Prisma.PasskeyCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyUpdateManyMutationInputSchema: z.ZodType<Prisma.PasskeyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TwoFactorCreateInputSchema: z.ZodType<Prisma.TwoFactorCreateInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  user: z.lazy(() => UserCreateNestedOneWithoutTwofactorsInputSchema)
}).strict();

export const TwoFactorUncheckedCreateInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();

export const TwoFactorUpdateInputSchema: z.ZodType<Prisma.TwoFactorUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTwofactorsNestedInputSchema).optional()
}).strict();

export const TwoFactorUncheckedUpdateInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorCreateManyInputSchema: z.ZodType<Prisma.TwoFactorCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();

export const TwoFactorUpdateManyMutationInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RelationshipManagerCreateInputSchema: z.ZodType<Prisma.RelationshipManagerCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerCreateManyInputSchema: z.ZodType<Prisma.RelationshipManagerCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable()
}).strict();

export const RelationshipManagerUpdateManyMutationInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RelationshipManagerUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CustomerCreateInputSchema: z.ZodType<Prisma.CustomerCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUpdateInputSchema: z.ZodType<Prisma.CustomerUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerCreateManyInputSchema: z.ZodType<Prisma.CustomerCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const CustomerUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomerUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateInputSchema: z.ZodType<Prisma.MemberCreateInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  createdAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateInputSchema: z.ZodType<Prisma.MemberUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberUpdateInputSchema: z.ZodType<Prisma.MemberUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateManyInputSchema: z.ZodType<Prisma.MemberCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberUpdateManyMutationInputSchema: z.ZodType<Prisma.MemberUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateInputSchema: z.ZodType<Prisma.InvitationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationUpdateInputSchema: z.ZodType<Prisma.InvitationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateManyInputSchema: z.ZodType<Prisma.InvitationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationUpdateManyMutationInputSchema: z.ZodType<Prisma.InvitationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseCreateInputSchema: z.ZodType<Prisma.PurchaseCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputSchema).optional()
}).strict();

export const PurchaseUncheckedCreateInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseUpdateInputSchema: z.ZodType<Prisma.PurchaseUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputSchema).optional()
}).strict();

export const PurchaseUncheckedUpdateInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseCreateManyInputSchema: z.ZodType<Prisma.PurchaseCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseUpdateManyMutationInputSchema: z.ZodType<Prisma.PurchaseUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateInputSchema: z.ZodType<Prisma.AiChatCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputSchema).optional()
}).strict();

export const AiChatUncheckedCreateInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatUpdateInputSchema: z.ZodType<Prisma.AiChatUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputSchema).optional()
}).strict();

export const AiChatUncheckedUpdateInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateManyInputSchema: z.ZodType<Prisma.AiChatCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatUpdateManyMutationInputSchema: z.ZodType<Prisma.AiChatUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BankAccountCreateInputSchema: z.ZodType<Prisma.BankAccountCreateInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutBankAccountsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBankAccountsInputSchema),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountUncheckedCreateInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountUpdateInputSchema: z.ZodType<Prisma.BankAccountUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneWithoutBankAccountsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBankAccountsNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountCreateManyInputSchema: z.ZodType<Prisma.BankAccountCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable()
}).strict();

export const BankAccountUpdateManyMutationInputSchema: z.ZodType<Prisma.BankAccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BankAccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseCreateInputSchema: z.ZodType<Prisma.ExpenseCreateInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpensesInputSchema),
  rm: z.lazy(() => RelationshipManagerCreateNestedOneWithoutExpensesInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmId: z.string().optional().nullable()
}).strict();

export const ExpenseUpdateInputSchema: z.ZodType<Prisma.ExpenseUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema).optional(),
  rm: z.lazy(() => RelationshipManagerUpdateOneWithoutExpensesNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseCreateManyInputSchema: z.ZodType<Prisma.ExpenseCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmId: z.string().optional().nullable()
}).strict();

export const ExpenseUpdateManyMutationInputSchema: z.ZodType<Prisma.ExpenseUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProductCreateInputSchema: z.ZodType<Prisma.ProductCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProductsInputSchema),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductUncheckedCreateInputSchema: z.ZodType<Prisma.ProductUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductUpdateInputSchema: z.ZodType<Prisma.ProductUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProductsNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductCreateManyInputSchema: z.ZodType<Prisma.ProductCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string()
}).strict();

export const ProductUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingCreateInputSchema: z.ZodType<Prisma.ProfitSharingCreateInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountCreateNestedOneWithoutProfitSharingInputSchema).optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutProfitSharingInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProfitSharingInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingUpdateInputSchema: z.ZodType<Prisma.ProfitSharingUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountUpdateOneWithoutProfitSharingNestedInputSchema).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingCreateManyInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingUpdateManyMutationInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AssetTransactionCreateInputSchema: z.ZodType<Prisma.AssetTransactionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutAssetTransactionsInputSchema)
}).strict();

export const AssetTransactionUncheckedCreateInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AssetTransactionUpdateInputSchema: z.ZodType<Prisma.AssetTransactionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutAssetTransactionsNestedInputSchema).optional()
}).strict();

export const AssetTransactionUncheckedUpdateInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionCreateManyInputSchema: z.ZodType<Prisma.AssetTransactionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AssetTransactionUpdateManyMutationInputSchema: z.ZodType<Prisma.AssetTransactionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AmmeterCreateInputSchema: z.ZodType<Prisma.AmmeterCreateInput> = z.object({
  id: z.string(),
  electricMeterNumber: z.string(),
  electricMeterName: z.string(),
  deviceNumber: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const AmmeterUncheckedCreateInputSchema: z.ZodType<Prisma.AmmeterUncheckedCreateInput> = z.object({
  id: z.string(),
  electricMeterNumber: z.string(),
  electricMeterName: z.string(),
  deviceNumber: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const AmmeterUpdateInputSchema: z.ZodType<Prisma.AmmeterUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmmeterUncheckedUpdateInputSchema: z.ZodType<Prisma.AmmeterUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmmeterCreateManyInputSchema: z.ZodType<Prisma.AmmeterCreateManyInput> = z.object({
  id: z.string(),
  electricMeterNumber: z.string(),
  electricMeterName: z.string(),
  deviceNumber: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const AmmeterUpdateManyMutationInputSchema: z.ZodType<Prisma.AmmeterUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmmeterUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AmmeterUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  electricMeterName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmmeterLogCreateInputSchema: z.ZodType<Prisma.AmmeterLogCreateInput> = z.object({
  id: z.string(),
  deviceNumber: z.string(),
  action: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  requestData: z.string().optional().nullable(),
  responseData: z.string().optional().nullable(),
  statusCode: z.number().int().optional().nullable(),
  success: z.boolean(),
  errorMessage: z.string().optional().nullable(),
  responseTime: z.number().int().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const AmmeterLogUncheckedCreateInputSchema: z.ZodType<Prisma.AmmeterLogUncheckedCreateInput> = z.object({
  id: z.string(),
  deviceNumber: z.string(),
  action: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  requestData: z.string().optional().nullable(),
  responseData: z.string().optional().nullable(),
  statusCode: z.number().int().optional().nullable(),
  success: z.boolean(),
  errorMessage: z.string().optional().nullable(),
  responseTime: z.number().int().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const AmmeterLogUpdateInputSchema: z.ZodType<Prisma.AmmeterLogUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requestData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusCode: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  success: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmmeterLogUncheckedUpdateInputSchema: z.ZodType<Prisma.AmmeterLogUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requestData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusCode: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  success: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmmeterLogCreateManyInputSchema: z.ZodType<Prisma.AmmeterLogCreateManyInput> = z.object({
  id: z.string(),
  deviceNumber: z.string(),
  action: z.string(),
  factory: z.string().optional().nullable(),
  device: z.string().optional().nullable(),
  voltage: z.number().optional().nullable(),
  currents: z.number().optional().nullable(),
  power: z.number().optional().nullable(),
  battery: z.number().optional().nullable(),
  switchState: z.number().int().optional().nullable(),
  networkState: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional().nullable(),
  requestData: z.string().optional().nullable(),
  responseData: z.string().optional().nullable(),
  statusCode: z.number().int().optional().nullable(),
  success: z.boolean(),
  errorMessage: z.string().optional().nullable(),
  responseTime: z.number().int().optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  organizationId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const AmmeterLogUpdateManyMutationInputSchema: z.ZodType<Prisma.AmmeterLogUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requestData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusCode: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  success: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AmmeterLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AmmeterLogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  deviceNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  factory: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  voltage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currents: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  power: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  battery: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  switchState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  networkState: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requestData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseData: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  statusCode: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  success: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  errorMessage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  responseTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExperimentRunCreateInputSchema: z.ZodType<Prisma.ExperimentRunCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventCreateNestedManyWithoutExperimentRunInputSchema).optional(),
  trainedModels: z.lazy(() => TrainedModelCreateNestedManyWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedCreateInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventUncheckedCreateNestedManyWithoutExperimentRunInputSchema).optional(),
  trainedModels: z.lazy(() => TrainedModelUncheckedCreateNestedManyWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunUpdateInputSchema: z.ZodType<Prisma.ExperimentRunUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventUpdateManyWithoutExperimentRunNestedInputSchema).optional(),
  trainedModels: z.lazy(() => TrainedModelUpdateManyWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedUpdateInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventUncheckedUpdateManyWithoutExperimentRunNestedInputSchema).optional(),
  trainedModels: z.lazy(() => TrainedModelUncheckedUpdateManyWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const ExperimentRunCreateManyInputSchema: z.ZodType<Prisma.ExperimentRunCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
}).strict();

export const ExperimentRunUpdateManyMutationInputSchema: z.ZodType<Prisma.ExperimentRunUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
}).strict();

export const ExperimentRunUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
}).strict();

export const AnomalyEventCreateInputSchema: z.ZodType<Prisma.AnomalyEventCreateInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  experimentRun: z.lazy(() => ExperimentRunCreateNestedOneWithoutAnomalyEventsInputSchema).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkCreateNestedManyWithoutAnomalyEventInputSchema).optional()
}).strict();

export const AnomalyEventUncheckedCreateInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedCreateInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  experimentRunId: z.string().optional().nullable(),
  eventLabelLinks: z.lazy(() => EventLabelLinkUncheckedCreateNestedManyWithoutAnomalyEventInputSchema).optional()
}).strict();

export const AnomalyEventUpdateInputSchema: z.ZodType<Prisma.AnomalyEventUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRun: z.lazy(() => ExperimentRunUpdateOneWithoutAnomalyEventsNestedInputSchema).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkUpdateManyWithoutAnomalyEventNestedInputSchema).optional()
}).strict();

export const AnomalyEventUncheckedUpdateInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRunId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  eventLabelLinks: z.lazy(() => EventLabelLinkUncheckedUpdateManyWithoutAnomalyEventNestedInputSchema).optional()
}).strict();

export const AnomalyEventCreateManyInputSchema: z.ZodType<Prisma.AnomalyEventCreateManyInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  experimentRunId: z.string().optional().nullable()
}).strict();

export const AnomalyEventUpdateManyMutationInputSchema: z.ZodType<Prisma.AnomalyEventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnomalyEventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRunId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AnomalyLabelCreateInputSchema: z.ZodType<Prisma.AnomalyLabelCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  eventLabelLinks: z.lazy(() => EventLabelLinkCreateNestedManyWithoutAnomalyLabelInputSchema).optional()
}).strict();

export const AnomalyLabelUncheckedCreateInputSchema: z.ZodType<Prisma.AnomalyLabelUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  eventLabelLinks: z.lazy(() => EventLabelLinkUncheckedCreateNestedManyWithoutAnomalyLabelInputSchema).optional()
}).strict();

export const AnomalyLabelUpdateInputSchema: z.ZodType<Prisma.AnomalyLabelUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkUpdateManyWithoutAnomalyLabelNestedInputSchema).optional()
}).strict();

export const AnomalyLabelUncheckedUpdateInputSchema: z.ZodType<Prisma.AnomalyLabelUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkUncheckedUpdateManyWithoutAnomalyLabelNestedInputSchema).optional()
}).strict();

export const AnomalyLabelCreateManyInputSchema: z.ZodType<Prisma.AnomalyLabelCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const AnomalyLabelUpdateManyMutationInputSchema: z.ZodType<Prisma.AnomalyLabelUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnomalyLabelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AnomalyLabelUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BorrowGodCreateInputSchema: z.ZodType<Prisma.BorrowGodCreateInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  godName: z.lazy(() => GodNameCreateNestedOneWithoutBorrowGodInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBorrow_godInputSchema)
}).strict();

export const BorrowGodUncheckedCreateInputSchema: z.ZodType<Prisma.BorrowGodUncheckedCreateInput> = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BorrowGodUpdateInputSchema: z.ZodType<Prisma.BorrowGodUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  godName: z.lazy(() => GodNameUpdateOneRequiredWithoutBorrowGodNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBorrow_godNestedInputSchema).optional()
}).strict();

export const BorrowGodUncheckedUpdateInputSchema: z.ZodType<Prisma.BorrowGodUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  godNameId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BorrowGodCreateManyInputSchema: z.ZodType<Prisma.BorrowGodCreateManyInput> = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BorrowGodUpdateManyMutationInputSchema: z.ZodType<Prisma.BorrowGodUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BorrowGodUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BorrowGodUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  godNameId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BuddhistCreateInputSchema: z.ZodType<Prisma.BuddhistCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBuddhistInputSchema)
}).strict();

export const BuddhistUncheckedCreateInputSchema: z.ZodType<Prisma.BuddhistUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BuddhistUpdateInputSchema: z.ZodType<Prisma.BuddhistUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBuddhistNestedInputSchema).optional()
}).strict();

export const BuddhistUncheckedUpdateInputSchema: z.ZodType<Prisma.BuddhistUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BuddhistCreateManyInputSchema: z.ZodType<Prisma.BuddhistCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BuddhistUpdateManyMutationInputSchema: z.ZodType<Prisma.BuddhistUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BuddhistUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BuddhistUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventLabelLinkCreateInputSchema: z.ZodType<Prisma.EventLabelLinkCreateInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date().optional(),
  anomalyEvent: z.lazy(() => AnomalyEventCreateNestedOneWithoutEventLabelLinksInputSchema),
  anomalyLabel: z.lazy(() => AnomalyLabelCreateNestedOneWithoutEventLabelLinksInputSchema)
}).strict();

export const EventLabelLinkUncheckedCreateInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedCreateInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const EventLabelLinkUpdateInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEvent: z.lazy(() => AnomalyEventUpdateOneRequiredWithoutEventLabelLinksNestedInputSchema).optional(),
  anomalyLabel: z.lazy(() => AnomalyLabelUpdateOneRequiredWithoutEventLabelLinksNestedInputSchema).optional()
}).strict();

export const EventLabelLinkUncheckedUpdateInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  labelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventLabelLinkCreateManyInputSchema: z.ZodType<Prisma.EventLabelLinkCreateManyInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const EventLabelLinkUpdateManyMutationInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventLabelLinkUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  labelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FamilyCreateInputSchema: z.ZodType<Prisma.FamilyCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamilyInputSchema),
  familyMembers: z.lazy(() => FamilyMemberCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyUncheckedCreateInputSchema: z.ZodType<Prisma.FamilyUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  familyMembers: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyUpdateInputSchema: z.ZodType<Prisma.FamilyUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema).optional(),
  familyMembers: z.lazy(() => FamilyMemberUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const FamilyUncheckedUpdateInputSchema: z.ZodType<Prisma.FamilyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  familyMembers: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const FamilyCreateManyInputSchema: z.ZodType<Prisma.FamilyCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const FamilyUpdateManyMutationInputSchema: z.ZodType<Prisma.FamilyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FamilyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FamilyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FamilyMemberCreateInputSchema: z.ZodType<Prisma.FamilyMemberCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutFamilyMembersInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamily_memberInputSchema)
}).strict();

export const FamilyMemberUncheckedCreateInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  familyId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const FamilyMemberUpdateInputSchema: z.ZodType<Prisma.FamilyMemberUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutFamilyMembersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamily_memberNestedInputSchema).optional()
}).strict();

export const FamilyMemberUncheckedUpdateInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FamilyMemberCreateManyInputSchema: z.ZodType<Prisma.FamilyMemberCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  familyId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const FamilyMemberUpdateManyMutationInputSchema: z.ZodType<Prisma.FamilyMemberUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FamilyMemberUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GodNameCreateInputSchema: z.ZodType<Prisma.GodNameCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  borrowGod: z.lazy(() => BorrowGodCreateNestedManyWithoutGodNameInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutGod_nameInputSchema)
}).strict();

export const GodNameUncheckedCreateInputSchema: z.ZodType<Prisma.GodNameUncheckedCreateInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  borrowGod: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutGodNameInputSchema).optional()
}).strict();

export const GodNameUpdateInputSchema: z.ZodType<Prisma.GodNameUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  borrowGod: z.lazy(() => BorrowGodUpdateManyWithoutGodNameNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutGod_nameNestedInputSchema).optional()
}).strict();

export const GodNameUncheckedUpdateInputSchema: z.ZodType<Prisma.GodNameUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  borrowGod: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutGodNameNestedInputSchema).optional()
}).strict();

export const GodNameCreateManyInputSchema: z.ZodType<Prisma.GodNameCreateManyInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const GodNameUpdateManyMutationInputSchema: z.ZodType<Prisma.GodNameUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GodNameUncheckedUpdateManyInputSchema: z.ZodType<Prisma.GodNameUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberClassCreateInputSchema: z.ZodType<Prisma.MemberClassCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMember_classInputSchema)
}).strict();

export const MemberClassUncheckedCreateInputSchema: z.ZodType<Prisma.MemberClassUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const MemberClassUpdateInputSchema: z.ZodType<Prisma.MemberClassUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMember_classNestedInputSchema).optional()
}).strict();

export const MemberClassUncheckedUpdateInputSchema: z.ZodType<Prisma.MemberClassUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberClassCreateManyInputSchema: z.ZodType<Prisma.MemberClassCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const MemberClassUpdateManyMutationInputSchema: z.ZodType<Prisma.MemberClassUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberClassUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MemberClassUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MgYearCreateInputSchema: z.ZodType<Prisma.MgYearCreateInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMgyearInputSchema)
}).strict();

export const MgYearUncheckedCreateInputSchema: z.ZodType<Prisma.MgYearUncheckedCreateInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const MgYearUpdateInputSchema: z.ZodType<Prisma.MgYearUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMgyearNestedInputSchema).optional()
}).strict();

export const MgYearUncheckedUpdateInputSchema: z.ZodType<Prisma.MgYearUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MgYearCreateManyInputSchema: z.ZodType<Prisma.MgYearCreateManyInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const MgYearUpdateManyMutationInputSchema: z.ZodType<Prisma.MgYearUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MgYearUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MgYearUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Service1CreateInputSchema: z.ZodType<Prisma.Service1CreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService1InputSchema),
  service2: z.lazy(() => Service2CreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1UncheckedCreateInputSchema: z.ZodType<Prisma.Service1UncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1UpdateInputSchema: z.ZodType<Prisma.Service1UpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService1NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Service1UncheckedUpdateInputSchema: z.ZodType<Prisma.Service1UncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Service1CreateManyInputSchema: z.ZodType<Prisma.Service1CreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Service1UpdateManyMutationInputSchema: z.ZodType<Prisma.Service1UpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Service1UncheckedUpdateManyInputSchema: z.ZodType<Prisma.Service1UncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Service2CreateInputSchema: z.ZodType<Prisma.Service2CreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService2InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutService2InputSchema),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2UncheckedCreateInputSchema: z.ZodType<Prisma.Service2UncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2UpdateInputSchema: z.ZodType<Prisma.Service2UpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Service2UncheckedUpdateInputSchema: z.ZodType<Prisma.Service2UncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Service2CreateManyInputSchema: z.ZodType<Prisma.Service2CreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Service2UpdateManyMutationInputSchema: z.ZodType<Prisma.Service2UpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Service2UncheckedUpdateManyInputSchema: z.ZodType<Prisma.Service2UncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing1CreateInputSchema: z.ZodType<Prisma.Servicing1CreateInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing1InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1UncheckedCreateInputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1UpdateInputSchema: z.ZodType<Prisma.Servicing1UpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1CreateManyInputSchema: z.ZodType<Prisma.Servicing1CreateManyInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing1UpdateManyMutationInputSchema: z.ZodType<Prisma.Servicing1UpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing1UncheckedUpdateManyInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2CreateInputSchema: z.ZodType<Prisma.Servicing2CreateInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing2InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing2InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const Servicing2UncheckedCreateInputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2UpdateInputSchema: z.ZodType<Prisma.Servicing2UpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const Servicing2UncheckedUpdateInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2CreateManyInputSchema: z.ZodType<Prisma.Servicing2CreateManyInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2UpdateManyMutationInputSchema: z.ZodType<Prisma.Servicing2UpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TempleCreateInputSchema: z.ZodType<Prisma.TempleCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTempleInputSchema)
}).strict();

export const TempleUncheckedCreateInputSchema: z.ZodType<Prisma.TempleUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const TempleUpdateInputSchema: z.ZodType<Prisma.TempleUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTempleNestedInputSchema).optional()
}).strict();

export const TempleUncheckedUpdateInputSchema: z.ZodType<Prisma.TempleUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TempleCreateManyInputSchema: z.ZodType<Prisma.TempleCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const TempleUpdateManyMutationInputSchema: z.ZodType<Prisma.TempleUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TempleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TempleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TrainedModelCreateInputSchema: z.ZodType<Prisma.TrainedModelCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  modelPath: z.string().optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  experimentRun: z.lazy(() => ExperimentRunCreateNestedOneWithoutTrainedModelsInputSchema),
  evaluationRuns: z.lazy(() => EvaluationRunCreateNestedManyWithoutTrainedModelInputSchema).optional()
}).strict();

export const TrainedModelUncheckedCreateInputSchema: z.ZodType<Prisma.TrainedModelUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  experimentRunId: z.string(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  modelPath: z.string().optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  evaluationRuns: z.lazy(() => EvaluationRunUncheckedCreateNestedManyWithoutTrainedModelInputSchema).optional()
}).strict();

export const TrainedModelUpdateInputSchema: z.ZodType<Prisma.TrainedModelUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experimentRun: z.lazy(() => ExperimentRunUpdateOneRequiredWithoutTrainedModelsNestedInputSchema).optional(),
  evaluationRuns: z.lazy(() => EvaluationRunUpdateManyWithoutTrainedModelNestedInputSchema).optional()
}).strict();

export const TrainedModelUncheckedUpdateInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRunId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  evaluationRuns: z.lazy(() => EvaluationRunUncheckedUpdateManyWithoutTrainedModelNestedInputSchema).optional()
}).strict();

export const TrainedModelCreateManyInputSchema: z.ZodType<Prisma.TrainedModelCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  experimentRunId: z.string(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  modelPath: z.string().optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable()
}).strict();

export const TrainedModelUpdateManyMutationInputSchema: z.ZodType<Prisma.TrainedModelUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TrainedModelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRunId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EvaluationRunCreateInputSchema: z.ZodType<Prisma.EvaluationRunCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  trainedModel: z.lazy(() => TrainedModelCreateNestedOneWithoutEvaluationRunsInputSchema),
  predictions: z.lazy(() => ModelPredictionCreateNestedManyWithoutEvaluationRunInputSchema).optional()
}).strict();

export const EvaluationRunUncheckedCreateInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  trainedModelId: z.string(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  predictions: z.lazy(() => ModelPredictionUncheckedCreateNestedManyWithoutEvaluationRunInputSchema).optional()
}).strict();

export const EvaluationRunUpdateInputSchema: z.ZodType<Prisma.EvaluationRunUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainedModel: z.lazy(() => TrainedModelUpdateOneRequiredWithoutEvaluationRunsNestedInputSchema).optional(),
  predictions: z.lazy(() => ModelPredictionUpdateManyWithoutEvaluationRunNestedInputSchema).optional()
}).strict();

export const EvaluationRunUncheckedUpdateInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  trainedModelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  predictions: z.lazy(() => ModelPredictionUncheckedUpdateManyWithoutEvaluationRunNestedInputSchema).optional()
}).strict();

export const EvaluationRunCreateManyInputSchema: z.ZodType<Prisma.EvaluationRunCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  trainedModelId: z.string(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable()
}).strict();

export const EvaluationRunUpdateManyMutationInputSchema: z.ZodType<Prisma.EvaluationRunUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EvaluationRunUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  trainedModelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelPredictionCreateInputSchema: z.ZodType<Prisma.ModelPredictionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  anomalyEventId: z.string().optional().nullable(),
  timestamp: z.coerce.date(),
  predictionScore: z.number(),
  groundTruth: z.number().int().optional().nullable(),
  evaluationRun: z.lazy(() => EvaluationRunCreateNestedOneWithoutPredictionsInputSchema)
}).strict();

export const ModelPredictionUncheckedCreateInputSchema: z.ZodType<Prisma.ModelPredictionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  evaluationRunId: z.string(),
  anomalyEventId: z.string().optional().nullable(),
  timestamp: z.coerce.date(),
  predictionScore: z.number(),
  groundTruth: z.number().int().optional().nullable()
}).strict();

export const ModelPredictionUpdateInputSchema: z.ZodType<Prisma.ModelPredictionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  predictionScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  groundTruth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  evaluationRun: z.lazy(() => EvaluationRunUpdateOneRequiredWithoutPredictionsNestedInputSchema).optional()
}).strict();

export const ModelPredictionUncheckedUpdateInputSchema: z.ZodType<Prisma.ModelPredictionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  evaluationRunId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  predictionScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  groundTruth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelPredictionCreateManyInputSchema: z.ZodType<Prisma.ModelPredictionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  evaluationRunId: z.string(),
  anomalyEventId: z.string().optional().nullable(),
  timestamp: z.coerce.date(),
  predictionScore: z.number(),
  groundTruth: z.number().int().optional().nullable()
}).strict();

export const ModelPredictionUpdateManyMutationInputSchema: z.ZodType<Prisma.ModelPredictionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  predictionScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  groundTruth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelPredictionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ModelPredictionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  evaluationRunId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  predictionScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  groundTruth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const AiChatListRelationFilterSchema: z.ZodType<Prisma.AiChatListRelationFilter> = z.object({
  every: z.lazy(() => AiChatWhereInputSchema).optional(),
  some: z.lazy(() => AiChatWhereInputSchema).optional(),
  none: z.lazy(() => AiChatWhereInputSchema).optional()
}).strict();

export const InvitationListRelationFilterSchema: z.ZodType<Prisma.InvitationListRelationFilter> = z.object({
  every: z.lazy(() => InvitationWhereInputSchema).optional(),
  some: z.lazy(() => InvitationWhereInputSchema).optional(),
  none: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const MemberListRelationFilterSchema: z.ZodType<Prisma.MemberListRelationFilter> = z.object({
  every: z.lazy(() => MemberWhereInputSchema).optional(),
  some: z.lazy(() => MemberWhereInputSchema).optional(),
  none: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const PasskeyListRelationFilterSchema: z.ZodType<Prisma.PasskeyListRelationFilter> = z.object({
  every: z.lazy(() => PasskeyWhereInputSchema).optional(),
  some: z.lazy(() => PasskeyWhereInputSchema).optional(),
  none: z.lazy(() => PasskeyWhereInputSchema).optional()
}).strict();

export const PurchaseListRelationFilterSchema: z.ZodType<Prisma.PurchaseListRelationFilter> = z.object({
  every: z.lazy(() => PurchaseWhereInputSchema).optional(),
  some: z.lazy(() => PurchaseWhereInputSchema).optional(),
  none: z.lazy(() => PurchaseWhereInputSchema).optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const TwoFactorListRelationFilterSchema: z.ZodType<Prisma.TwoFactorListRelationFilter> = z.object({
  every: z.lazy(() => TwoFactorWhereInputSchema).optional(),
  some: z.lazy(() => TwoFactorWhereInputSchema).optional(),
  none: z.lazy(() => TwoFactorWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AiChatOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AiChatOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvitationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MemberOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PasskeyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurchaseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PurchaseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TwoFactorOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional(),
  locale: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional(),
  locale: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  onboardingComplete: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional(),
  locale: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const PasskeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyAvgOrderByAggregateInput> = z.object({
  counter: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  publicKey: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  credentialID: z.lazy(() => SortOrderSchema).optional(),
  counter: z.lazy(() => SortOrderSchema).optional(),
  deviceType: z.lazy(() => SortOrderSchema).optional(),
  backedUp: z.lazy(() => SortOrderSchema).optional(),
  transports: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasskeySumOrderByAggregateInputSchema: z.ZodType<Prisma.PasskeySumOrderByAggregateInput> = z.object({
  counter: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const TwoFactorCountOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorMinOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountListRelationFilterSchema: z.ZodType<Prisma.BankAccountListRelationFilter> = z.object({
  every: z.lazy(() => BankAccountWhereInputSchema).optional(),
  some: z.lazy(() => BankAccountWhereInputSchema).optional(),
  none: z.lazy(() => BankAccountWhereInputSchema).optional()
}).strict();

export const BorrowGodListRelationFilterSchema: z.ZodType<Prisma.BorrowGodListRelationFilter> = z.object({
  every: z.lazy(() => BorrowGodWhereInputSchema).optional(),
  some: z.lazy(() => BorrowGodWhereInputSchema).optional(),
  none: z.lazy(() => BorrowGodWhereInputSchema).optional()
}).strict();

export const BuddhistListRelationFilterSchema: z.ZodType<Prisma.BuddhistListRelationFilter> = z.object({
  every: z.lazy(() => BuddhistWhereInputSchema).optional(),
  some: z.lazy(() => BuddhistWhereInputSchema).optional(),
  none: z.lazy(() => BuddhistWhereInputSchema).optional()
}).strict();

export const CustomerListRelationFilterSchema: z.ZodType<Prisma.CustomerListRelationFilter> = z.object({
  every: z.lazy(() => CustomerWhereInputSchema).optional(),
  some: z.lazy(() => CustomerWhereInputSchema).optional(),
  none: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const ExpenseListRelationFilterSchema: z.ZodType<Prisma.ExpenseListRelationFilter> = z.object({
  every: z.lazy(() => ExpenseWhereInputSchema).optional(),
  some: z.lazy(() => ExpenseWhereInputSchema).optional(),
  none: z.lazy(() => ExpenseWhereInputSchema).optional()
}).strict();

export const FamilyListRelationFilterSchema: z.ZodType<Prisma.FamilyListRelationFilter> = z.object({
  every: z.lazy(() => FamilyWhereInputSchema).optional(),
  some: z.lazy(() => FamilyWhereInputSchema).optional(),
  none: z.lazy(() => FamilyWhereInputSchema).optional()
}).strict();

export const FamilyMemberListRelationFilterSchema: z.ZodType<Prisma.FamilyMemberListRelationFilter> = z.object({
  every: z.lazy(() => FamilyMemberWhereInputSchema).optional(),
  some: z.lazy(() => FamilyMemberWhereInputSchema).optional(),
  none: z.lazy(() => FamilyMemberWhereInputSchema).optional()
}).strict();

export const GodNameListRelationFilterSchema: z.ZodType<Prisma.GodNameListRelationFilter> = z.object({
  every: z.lazy(() => GodNameWhereInputSchema).optional(),
  some: z.lazy(() => GodNameWhereInputSchema).optional(),
  none: z.lazy(() => GodNameWhereInputSchema).optional()
}).strict();

export const MemberClassListRelationFilterSchema: z.ZodType<Prisma.MemberClassListRelationFilter> = z.object({
  every: z.lazy(() => MemberClassWhereInputSchema).optional(),
  some: z.lazy(() => MemberClassWhereInputSchema).optional(),
  none: z.lazy(() => MemberClassWhereInputSchema).optional()
}).strict();

export const MgYearListRelationFilterSchema: z.ZodType<Prisma.MgYearListRelationFilter> = z.object({
  every: z.lazy(() => MgYearWhereInputSchema).optional(),
  some: z.lazy(() => MgYearWhereInputSchema).optional(),
  none: z.lazy(() => MgYearWhereInputSchema).optional()
}).strict();

export const ProductListRelationFilterSchema: z.ZodType<Prisma.ProductListRelationFilter> = z.object({
  every: z.lazy(() => ProductWhereInputSchema).optional(),
  some: z.lazy(() => ProductWhereInputSchema).optional(),
  none: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProfitSharingListRelationFilterSchema: z.ZodType<Prisma.ProfitSharingListRelationFilter> = z.object({
  every: z.lazy(() => ProfitSharingWhereInputSchema).optional(),
  some: z.lazy(() => ProfitSharingWhereInputSchema).optional(),
  none: z.lazy(() => ProfitSharingWhereInputSchema).optional()
}).strict();

export const RelationshipManagerListRelationFilterSchema: z.ZodType<Prisma.RelationshipManagerListRelationFilter> = z.object({
  every: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  some: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  none: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const Service1ListRelationFilterSchema: z.ZodType<Prisma.Service1ListRelationFilter> = z.object({
  every: z.lazy(() => Service1WhereInputSchema).optional(),
  some: z.lazy(() => Service1WhereInputSchema).optional(),
  none: z.lazy(() => Service1WhereInputSchema).optional()
}).strict();

export const Service2ListRelationFilterSchema: z.ZodType<Prisma.Service2ListRelationFilter> = z.object({
  every: z.lazy(() => Service2WhereInputSchema).optional(),
  some: z.lazy(() => Service2WhereInputSchema).optional(),
  none: z.lazy(() => Service2WhereInputSchema).optional()
}).strict();

export const Servicing1ListRelationFilterSchema: z.ZodType<Prisma.Servicing1ListRelationFilter> = z.object({
  every: z.lazy(() => Servicing1WhereInputSchema).optional(),
  some: z.lazy(() => Servicing1WhereInputSchema).optional(),
  none: z.lazy(() => Servicing1WhereInputSchema).optional()
}).strict();

export const Servicing2ListRelationFilterSchema: z.ZodType<Prisma.Servicing2ListRelationFilter> = z.object({
  every: z.lazy(() => Servicing2WhereInputSchema).optional(),
  some: z.lazy(() => Servicing2WhereInputSchema).optional(),
  none: z.lazy(() => Servicing2WhereInputSchema).optional()
}).strict();

export const TempleListRelationFilterSchema: z.ZodType<Prisma.TempleListRelationFilter> = z.object({
  every: z.lazy(() => TempleWhereInputSchema).optional(),
  some: z.lazy(() => TempleWhereInputSchema).optional(),
  none: z.lazy(() => TempleWhereInputSchema).optional()
}).strict();

export const BankAccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BankAccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BorrowGodOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BorrowGodOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BuddhistOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BuddhistOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CustomerOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ExpenseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FamilyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FamilyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FamilyMemberOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FamilyMemberOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GodNameOrderByRelationAggregateInputSchema: z.ZodType<Prisma.GodNameOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberClassOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MemberClassOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MgYearOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MgYearOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProfitSharingOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service1OrderByRelationAggregateInputSchema: z.ZodType<Prisma.Service1OrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service2OrderByRelationAggregateInputSchema: z.ZodType<Prisma.Service2OrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing1OrderByRelationAggregateInputSchema: z.ZodType<Prisma.Servicing1OrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing2OrderByRelationAggregateInputSchema: z.ZodType<Prisma.Servicing2OrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TempleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TempleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  paymentsCustomerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const RelationshipManagerOrganizationIdEmailCompoundUniqueInputSchema: z.ZodType<Prisma.RelationshipManagerOrganizationIdEmailCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  email: z.string()
}).strict();

export const RelationshipManagerCountOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerAvgOrderByAggregateInput> = z.object({
  customerCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerMinOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  customerCount: z.lazy(() => SortOrderSchema).optional(),
  joinDate: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  resignDate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RelationshipManagerSumOrderByAggregateInputSchema: z.ZodType<Prisma.RelationshipManagerSumOrderByAggregateInput> = z.object({
  customerCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalNullableFilterSchema: z.ZodType<Prisma.DecimalNullableFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AssetTransactionListRelationFilterSchema: z.ZodType<Prisma.AssetTransactionListRelationFilter> = z.object({
  every: z.lazy(() => AssetTransactionWhereInputSchema).optional(),
  some: z.lazy(() => AssetTransactionWhereInputSchema).optional(),
  none: z.lazy(() => AssetTransactionWhereInputSchema).optional()
}).strict();

export const RelationshipManagerNullableScalarRelationFilterSchema: z.ZodType<Prisma.RelationshipManagerNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RelationshipManagerWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RelationshipManagerWhereInputSchema).optional().nullable()
}).strict();

export const AssetTransactionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AssetTransactionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerOrganizationIdCodeCompoundUniqueInputSchema: z.ZodType<Prisma.CustomerOrganizationIdCodeCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  code: z.string()
}).strict();

export const CustomerCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerAvgOrderByAggregateInput> = z.object({
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerSumOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerSumOrderByAggregateInput> = z.object({
  finder1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitShare: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitShare: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
}).strict();

export const MemberOrganizationIdUserIdCompoundUniqueInputSchema: z.ZodType<Prisma.MemberOrganizationIdUserIdCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  userId: z.string()
}).strict();

export const MemberCountOrderByAggregateInputSchema: z.ZodType<Prisma.MemberCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMinOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPurchaseTypeFilterSchema: z.ZodType<Prisma.EnumPurchaseTypeFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeFilterSchema) ]).optional(),
}).strict();

export const OrganizationNullableScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();

export const UserNullableScalarRelationFilterSchema: z.ZodType<Prisma.UserNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const PurchaseCountOrderByAggregateInputSchema: z.ZodType<Prisma.PurchaseCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurchaseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PurchaseMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PurchaseMinOrderByAggregateInputSchema: z.ZodType<Prisma.PurchaseMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  subscriptionId: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPurchaseTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPurchaseTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional()
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const AiChatCountOrderByAggregateInputSchema: z.ZodType<Prisma.AiChatCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  messages: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AiChatMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AiChatMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AiChatMinOrderByAggregateInputSchema: z.ZodType<Prisma.AiChatMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const DecimalFilterSchema: z.ZodType<Prisma.DecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const CustomerNullableScalarRelationFilterSchema: z.ZodType<Prisma.CustomerNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => CustomerWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CustomerWhereInputSchema).optional().nullable()
}).strict();

export const BankAccountOrganizationIdAccountNumberCompoundUniqueInputSchema: z.ZodType<Prisma.BankAccountOrganizationIdAccountNumberCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  accountNumber: z.string()
}).strict();

export const BankAccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.lazy(() => SortOrderSchema).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountAvgOrderByAggregateInput> = z.object({
  balance: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.lazy(() => SortOrderSchema).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  bankName: z.lazy(() => SortOrderSchema).optional(),
  accountName: z.lazy(() => SortOrderSchema).optional(),
  accountNumber: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  balance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountSumOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountSumOrderByAggregateInput> = z.object({
  balance: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DecimalWithAggregatesFilterSchema: z.ZodType<Prisma.DecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const ExpenseCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  receiptUrls: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  receiptUrl: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional(),
  rmId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExpenseSumOrderByAggregateInputSchema: z.ZodType<Prisma.ExpenseSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  exchangeRate: z.lazy(() => SortOrderSchema).optional(),
  sgdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdAmount: z.lazy(() => SortOrderSchema).optional(),
  usdRate: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductOrganizationIdCodeCompoundUniqueInputSchema: z.ZodType<Prisma.ProductOrganizationIdCodeCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  code: z.string()
}).strict();

export const ProductCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  distributionType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BankAccountNullableScalarRelationFilterSchema: z.ZodType<Prisma.BankAccountNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => BankAccountWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => BankAccountWhereInputSchema).optional().nullable()
}).strict();

export const CustomerScalarRelationFilterSchema: z.ZodType<Prisma.CustomerScalarRelationFilter> = z.object({
  is: z.lazy(() => CustomerWhereInputSchema).optional(),
  isNot: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const ProductScalarRelationFilterSchema: z.ZodType<Prisma.ProductScalarRelationFilter> = z.object({
  is: z.lazy(() => ProductWhereInputSchema).optional(),
  isNot: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProfitSharingCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Name: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Name: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm1Name: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Name: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Name: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Name: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm1Name: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Name: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  bankAccountId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  productId: z.lazy(() => SortOrderSchema).optional(),
  profitDate: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1Id: z.lazy(() => SortOrderSchema).optional(),
  finder1Name: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2Id: z.lazy(() => SortOrderSchema).optional(),
  finder2Name: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1Id: z.lazy(() => SortOrderSchema).optional(),
  rm1Name: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2Id: z.lazy(() => SortOrderSchema).optional(),
  rm2Name: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProfitSharingSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProfitSharingSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional(),
  companyProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenue: z.lazy(() => SortOrderSchema).optional(),
  companyRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  directTradeBookingFee: z.lazy(() => SortOrderSchema).optional(),
  finderProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  findersRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  fxRate: z.lazy(() => SortOrderSchema).optional(),
  rmProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rmRevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  shareable: z.lazy(() => SortOrderSchema).optional(),
  finder1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  finder2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm1ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  rm2ProfitSharePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueOriginal: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenueUSD: z.lazy(() => SortOrderSchema).optional(),
  bankRetroPercent: z.lazy(() => SortOrderSchema).optional(),
  companyFeePercent: z.lazy(() => SortOrderSchema).optional(),
  companyRevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  finder2RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm1RevenuePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2FeePercent: z.lazy(() => SortOrderSchema).optional(),
  rm2RevenuePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionCountOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionMinOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  customerId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  currency: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AssetTransactionSumOrderByAggregateInputSchema: z.ZodType<Prisma.AssetTransactionSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AmmeterCountOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmmeterAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterAvgOrderByAggregateInput> = z.object({
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmmeterMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmmeterMinOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  electricMeterNumber: z.lazy(() => SortOrderSchema).optional(),
  electricMeterName: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmmeterSumOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterSumOrderByAggregateInput> = z.object({
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const AmmeterLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  requestData: z.lazy(() => SortOrderSchema).optional(),
  responseData: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmmeterLogAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterLogAvgOrderByAggregateInput> = z.object({
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmmeterLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  requestData: z.lazy(() => SortOrderSchema).optional(),
  responseData: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmmeterLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  deviceNumber: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  factory: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => SortOrderSchema).optional(),
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  requestData: z.lazy(() => SortOrderSchema).optional(),
  responseData: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  success: z.lazy(() => SortOrderSchema).optional(),
  errorMessage: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AmmeterLogSumOrderByAggregateInputSchema: z.ZodType<Prisma.AmmeterLogSumOrderByAggregateInput> = z.object({
  voltage: z.lazy(() => SortOrderSchema).optional(),
  currents: z.lazy(() => SortOrderSchema).optional(),
  power: z.lazy(() => SortOrderSchema).optional(),
  battery: z.lazy(() => SortOrderSchema).optional(),
  switchState: z.lazy(() => SortOrderSchema).optional(),
  networkState: z.lazy(() => SortOrderSchema).optional(),
  statusCode: z.lazy(() => SortOrderSchema).optional(),
  responseTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const EnumExperimentRunStatusFilterSchema: z.ZodType<Prisma.EnumExperimentRunStatusFilter> = z.object({
  equals: z.lazy(() => ExperimentRunStatusSchema).optional(),
  in: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => NestedEnumExperimentRunStatusFilterSchema) ]).optional(),
}).strict();

export const AnomalyEventListRelationFilterSchema: z.ZodType<Prisma.AnomalyEventListRelationFilter> = z.object({
  every: z.lazy(() => AnomalyEventWhereInputSchema).optional(),
  some: z.lazy(() => AnomalyEventWhereInputSchema).optional(),
  none: z.lazy(() => AnomalyEventWhereInputSchema).optional()
}).strict();

export const TrainedModelListRelationFilterSchema: z.ZodType<Prisma.TrainedModelListRelationFilter> = z.object({
  every: z.lazy(() => TrainedModelWhereInputSchema).optional(),
  some: z.lazy(() => TrainedModelWhereInputSchema).optional(),
  none: z.lazy(() => TrainedModelWhereInputSchema).optional()
}).strict();

export const AnomalyEventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AnomalyEventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TrainedModelOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  filteringParameters: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  candidateStats: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunAvgOrderByAggregateInput> = z.object({
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunSumOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentRunSumOrderByAggregateInput> = z.object({
  candidateCount: z.lazy(() => SortOrderSchema).optional(),
  positiveLabelCount: z.lazy(() => SortOrderSchema).optional(),
  negativeLabelCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const EnumExperimentRunStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumExperimentRunStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ExperimentRunStatusSchema).optional(),
  in: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => NestedEnumExperimentRunStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumExperimentRunStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumExperimentRunStatusFilterSchema).optional()
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const EnumAnomalyEventStatusFilterSchema: z.ZodType<Prisma.EnumAnomalyEventStatusFilter> = z.object({
  equals: z.lazy(() => AnomalyEventStatusSchema).optional(),
  in: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  notIn: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema) ]).optional(),
}).strict();

export const ExperimentRunNullableScalarRelationFilterSchema: z.ZodType<Prisma.ExperimentRunNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ExperimentRunWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ExperimentRunWhereInputSchema).optional().nullable()
}).strict();

export const EventLabelLinkListRelationFilterSchema: z.ZodType<Prisma.EventLabelLinkListRelationFilter> = z.object({
  every: z.lazy(() => EventLabelLinkWhereInputSchema).optional(),
  some: z.lazy(() => EventLabelLinkWhereInputSchema).optional(),
  none: z.lazy(() => EventLabelLinkWhereInputSchema).optional()
}).strict();

export const EventLabelLinkOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EventLabelLinkOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnomalyEventCountOrderByAggregateInputSchema: z.ZodType<Prisma.AnomalyEventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  dataWindow: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewTimestamp: z.lazy(() => SortOrderSchema).optional(),
  justificationNotes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnomalyEventAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AnomalyEventAvgOrderByAggregateInput> = z.object({
  score: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnomalyEventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AnomalyEventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewTimestamp: z.lazy(() => SortOrderSchema).optional(),
  justificationNotes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnomalyEventMinOrderByAggregateInputSchema: z.ZodType<Prisma.AnomalyEventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  meterId: z.lazy(() => SortOrderSchema).optional(),
  eventTimestamp: z.lazy(() => SortOrderSchema).optional(),
  detectionRule: z.lazy(() => SortOrderSchema).optional(),
  score: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  reviewerId: z.lazy(() => SortOrderSchema).optional(),
  reviewTimestamp: z.lazy(() => SortOrderSchema).optional(),
  justificationNotes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnomalyEventSumOrderByAggregateInputSchema: z.ZodType<Prisma.AnomalyEventSumOrderByAggregateInput> = z.object({
  score: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const EnumAnomalyEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumAnomalyEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AnomalyEventStatusSchema).optional(),
  in: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  notIn: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => NestedEnumAnomalyEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema).optional()
}).strict();

export const AnomalyLabelCountOrderByAggregateInputSchema: z.ZodType<Prisma.AnomalyLabelCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnomalyLabelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AnomalyLabelMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnomalyLabelMinOrderByAggregateInputSchema: z.ZodType<Prisma.AnomalyLabelMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GodNameScalarRelationFilterSchema: z.ZodType<Prisma.GodNameScalarRelationFilter> = z.object({
  is: z.lazy(() => GodNameWhereInputSchema).optional(),
  isNot: z.lazy(() => GodNameWhereInputSchema).optional()
}).strict();

export const BorrowGodCountOrderByAggregateInputSchema: z.ZodType<Prisma.BorrowGodCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BorrowGodMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BorrowGodMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BorrowGodMinOrderByAggregateInputSchema: z.ZodType<Prisma.BorrowGodMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  godNameId: z.lazy(() => SortOrderSchema).optional(),
  applyName: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  typeId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BuddhistCountOrderByAggregateInputSchema: z.ZodType<Prisma.BuddhistCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  templeNowText: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BuddhistMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BuddhistMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  templeNowText: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BuddhistMinOrderByAggregateInputSchema: z.ZodType<Prisma.BuddhistMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  templeNowText: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnomalyEventScalarRelationFilterSchema: z.ZodType<Prisma.AnomalyEventScalarRelationFilter> = z.object({
  is: z.lazy(() => AnomalyEventWhereInputSchema).optional(),
  isNot: z.lazy(() => AnomalyEventWhereInputSchema).optional()
}).strict();

export const AnomalyLabelScalarRelationFilterSchema: z.ZodType<Prisma.AnomalyLabelScalarRelationFilter> = z.object({
  is: z.lazy(() => AnomalyLabelWhereInputSchema).optional(),
  isNot: z.lazy(() => AnomalyLabelWhereInputSchema).optional()
}).strict();

export const EventLabelLinkEventIdLabelIdCompoundUniqueInputSchema: z.ZodType<Prisma.EventLabelLinkEventIdLabelIdCompoundUniqueInput> = z.object({
  eventId: z.string(),
  labelId: z.string()
}).strict();

export const EventLabelLinkCountOrderByAggregateInputSchema: z.ZodType<Prisma.EventLabelLinkCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventLabelLinkMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EventLabelLinkMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EventLabelLinkMinOrderByAggregateInputSchema: z.ZodType<Prisma.EventLabelLinkMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  labelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FamilyCountOrderByAggregateInputSchema: z.ZodType<Prisma.FamilyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  mobile: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FamilyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FamilyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  mobile: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FamilyMinOrderByAggregateInputSchema: z.ZodType<Prisma.FamilyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  mobile: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  postalCode: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FamilyScalarRelationFilterSchema: z.ZodType<Prisma.FamilyScalarRelationFilter> = z.object({
  is: z.lazy(() => FamilyWhereInputSchema).optional(),
  isNot: z.lazy(() => FamilyWhereInputSchema).optional()
}).strict();

export const FamilyMemberCountOrderByAggregateInputSchema: z.ZodType<Prisma.FamilyMemberCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  birthday: z.lazy(() => SortOrderSchema).optional(),
  lunarDate: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FamilyMemberMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FamilyMemberMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  birthday: z.lazy(() => SortOrderSchema).optional(),
  lunarDate: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FamilyMemberMinOrderByAggregateInputSchema: z.ZodType<Prisma.FamilyMemberMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  birthday: z.lazy(() => SortOrderSchema).optional(),
  lunarDate: z.lazy(() => SortOrderSchema).optional(),
  gender: z.lazy(() => SortOrderSchema).optional(),
  note: z.lazy(() => SortOrderSchema).optional(),
  mainPerson: z.lazy(() => SortOrderSchema).optional(),
  mailThis: z.lazy(() => SortOrderSchema).optional(),
  isLive: z.lazy(() => SortOrderSchema).optional(),
  postcode: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GodNameCountOrderByAggregateInputSchema: z.ZodType<Prisma.GodNameCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GodNameAvgOrderByAggregateInputSchema: z.ZodType<Prisma.GodNameAvgOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GodNameMaxOrderByAggregateInputSchema: z.ZodType<Prisma.GodNameMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GodNameMinOrderByAggregateInputSchema: z.ZodType<Prisma.GodNameMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GodNameSumOrderByAggregateInputSchema: z.ZodType<Prisma.GodNameSumOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberClassCountOrderByAggregateInputSchema: z.ZodType<Prisma.MemberClassCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberClassAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MemberClassAvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberClassMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MemberClassMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberClassMinOrderByAggregateInputSchema: z.ZodType<Prisma.MemberClassMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberClassSumOrderByAggregateInputSchema: z.ZodType<Prisma.MemberClassSumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MgYearOrganizationIdMgyearCompoundUniqueInputSchema: z.ZodType<Prisma.MgYearOrganizationIdMgyearCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  mgyear: z.string()
}).strict();

export const MgYearOrganizationIdYearCompoundUniqueInputSchema: z.ZodType<Prisma.MgYearOrganizationIdYearCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  year: z.string()
}).strict();

export const MgYearCountOrderByAggregateInputSchema: z.ZodType<Prisma.MgYearCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MgYearAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MgYearAvgOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MgYearMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MgYearMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MgYearMinOrderByAggregateInputSchema: z.ZodType<Prisma.MgYearMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  mgyear: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MgYearSumOrderByAggregateInputSchema: z.ZodType<Prisma.MgYearSumOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service1CountOrderByAggregateInputSchema: z.ZodType<Prisma.Service1CountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service1AvgOrderByAggregateInputSchema: z.ZodType<Prisma.Service1AvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service1MaxOrderByAggregateInputSchema: z.ZodType<Prisma.Service1MaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service1MinOrderByAggregateInputSchema: z.ZodType<Prisma.Service1MinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service1SumOrderByAggregateInputSchema: z.ZodType<Prisma.Service1SumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service1ScalarRelationFilterSchema: z.ZodType<Prisma.Service1ScalarRelationFilter> = z.object({
  is: z.lazy(() => Service1WhereInputSchema).optional(),
  isNot: z.lazy(() => Service1WhereInputSchema).optional()
}).strict();

export const Service2CountOrderByAggregateInputSchema: z.ZodType<Prisma.Service2CountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service2AvgOrderByAggregateInputSchema: z.ZodType<Prisma.Service2AvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service2MaxOrderByAggregateInputSchema: z.ZodType<Prisma.Service2MaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service2MinOrderByAggregateInputSchema: z.ZodType<Prisma.Service2MinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  nowUse: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service2SumOrderByAggregateInputSchema: z.ZodType<Prisma.Service2SumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Service2NullableScalarRelationFilterSchema: z.ZodType<Prisma.Service2NullableScalarRelationFilter> = z.object({
  is: z.lazy(() => Service2WhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Service2WhereInputSchema).optional().nullable()
}).strict();

export const Servicing1OrganizationIdOrdernumYearCompoundUniqueInputSchema: z.ZodType<Prisma.Servicing1OrganizationIdOrdernumYearCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string()
}).strict();

export const Servicing1CountOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing1CountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.lazy(() => SortOrderSchema).optional(),
  payMethod: z.lazy(() => SortOrderSchema).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.lazy(() => SortOrderSchema).optional(),
  booksNum: z.lazy(() => SortOrderSchema).optional(),
  payee: z.lazy(() => SortOrderSchema).optional(),
  advisePeople: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing1AvgOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing1AvgOrderByAggregateInput> = z.object({
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing1MaxOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing1MaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.lazy(() => SortOrderSchema).optional(),
  payMethod: z.lazy(() => SortOrderSchema).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.lazy(() => SortOrderSchema).optional(),
  booksNum: z.lazy(() => SortOrderSchema).optional(),
  payee: z.lazy(() => SortOrderSchema).optional(),
  advisePeople: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing1MinOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing1MinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  applyDate: z.lazy(() => SortOrderSchema).optional(),
  applyText: z.lazy(() => SortOrderSchema).optional(),
  cellphone: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional(),
  payStatus: z.lazy(() => SortOrderSchema).optional(),
  payMethod: z.lazy(() => SortOrderSchema).optional(),
  payCurrency: z.lazy(() => SortOrderSchema).optional(),
  receiptNum: z.lazy(() => SortOrderSchema).optional(),
  booksNum: z.lazy(() => SortOrderSchema).optional(),
  payee: z.lazy(() => SortOrderSchema).optional(),
  advisePeople: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing1SumOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing1SumOrderByAggregateInput> = z.object({
  accReceivable: z.lazy(() => SortOrderSchema).optional(),
  accReceived: z.lazy(() => SortOrderSchema).optional(),
  accPending: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing1ScalarRelationFilterSchema: z.ZodType<Prisma.Servicing1ScalarRelationFilter> = z.object({
  is: z.lazy(() => Servicing1WhereInputSchema).optional(),
  isNot: z.lazy(() => Servicing1WhereInputSchema).optional()
}).strict();

export const Servicing2CountOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing2CountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  praytypeId: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  printType2Id: z.lazy(() => SortOrderSchema).optional(),
  livename: z.lazy(() => SortOrderSchema).optional(),
  people1: z.lazy(() => SortOrderSchema).optional(),
  passname: z.lazy(() => SortOrderSchema).optional(),
  passname1: z.lazy(() => SortOrderSchema).optional(),
  passname2: z.lazy(() => SortOrderSchema).optional(),
  passname3: z.lazy(() => SortOrderSchema).optional(),
  passname4: z.lazy(() => SortOrderSchema).optional(),
  people0: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sexualId: z.lazy(() => SortOrderSchema).optional(),
  sexualText: z.lazy(() => SortOrderSchema).optional(),
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  boxNum: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.lazy(() => SortOrderSchema).optional(),
  bornMonth: z.lazy(() => SortOrderSchema).optional(),
  bornDay: z.lazy(() => SortOrderSchema).optional(),
  bornTime: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing2AvgOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing2AvgOrderByAggregateInput> = z.object({
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing2MaxOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing2MaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  praytypeId: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  printType2Id: z.lazy(() => SortOrderSchema).optional(),
  livename: z.lazy(() => SortOrderSchema).optional(),
  passname: z.lazy(() => SortOrderSchema).optional(),
  passname1: z.lazy(() => SortOrderSchema).optional(),
  passname2: z.lazy(() => SortOrderSchema).optional(),
  passname3: z.lazy(() => SortOrderSchema).optional(),
  passname4: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sexualId: z.lazy(() => SortOrderSchema).optional(),
  sexualText: z.lazy(() => SortOrderSchema).optional(),
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  boxNum: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.lazy(() => SortOrderSchema).optional(),
  bornMonth: z.lazy(() => SortOrderSchema).optional(),
  bornDay: z.lazy(() => SortOrderSchema).optional(),
  bornTime: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing2MinOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing2MinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  familyId: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  servicing1Id: z.lazy(() => SortOrderSchema).optional(),
  ordernum: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  service1Id: z.lazy(() => SortOrderSchema).optional(),
  service2Id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  praytypeId: z.lazy(() => SortOrderSchema).optional(),
  printType1Id: z.lazy(() => SortOrderSchema).optional(),
  printType2Id: z.lazy(() => SortOrderSchema).optional(),
  livename: z.lazy(() => SortOrderSchema).optional(),
  passname: z.lazy(() => SortOrderSchema).optional(),
  passname1: z.lazy(() => SortOrderSchema).optional(),
  passname2: z.lazy(() => SortOrderSchema).optional(),
  passname3: z.lazy(() => SortOrderSchema).optional(),
  passname4: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sexualId: z.lazy(() => SortOrderSchema).optional(),
  sexualText: z.lazy(() => SortOrderSchema).optional(),
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  boxNum: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional(),
  bornYear: z.lazy(() => SortOrderSchema).optional(),
  bornMonth: z.lazy(() => SortOrderSchema).optional(),
  bornDay: z.lazy(() => SortOrderSchema).optional(),
  bornTime: z.lazy(() => SortOrderSchema).optional(),
  addr: z.lazy(() => SortOrderSchema).optional(),
  ps: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Servicing2SumOrderByAggregateInputSchema: z.ZodType<Prisma.Servicing2SumOrderByAggregateInput> = z.object({
  liveYear: z.lazy(() => SortOrderSchema).optional(),
  rowTotal: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TempleCountOrderByAggregateInputSchema: z.ZodType<Prisma.TempleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TempleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TempleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TempleMinOrderByAggregateInputSchema: z.ZodType<Prisma.TempleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentRunScalarRelationFilterSchema: z.ZodType<Prisma.ExperimentRunScalarRelationFilter> = z.object({
  is: z.lazy(() => ExperimentRunWhereInputSchema).optional(),
  isNot: z.lazy(() => ExperimentRunWhereInputSchema).optional()
}).strict();

export const EvaluationRunListRelationFilterSchema: z.ZodType<Prisma.EvaluationRunListRelationFilter> = z.object({
  every: z.lazy(() => EvaluationRunWhereInputSchema).optional(),
  some: z.lazy(() => EvaluationRunWhereInputSchema).optional(),
  none: z.lazy(() => EvaluationRunWhereInputSchema).optional()
}).strict();

export const EvaluationRunOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EvaluationRunOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelCountOrderByAggregateInputSchema: z.ZodType<Prisma.TrainedModelCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  modelConfig: z.lazy(() => SortOrderSchema).optional(),
  dataSourceConfig: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.lazy(() => SortOrderSchema).optional(),
  trainingMetrics: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TrainedModelMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelMinOrderByAggregateInputSchema: z.ZodType<Prisma.TrainedModelMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  experimentRunId: z.lazy(() => SortOrderSchema).optional(),
  modelPath: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TrainedModelScalarRelationFilterSchema: z.ZodType<Prisma.TrainedModelScalarRelationFilter> = z.object({
  is: z.lazy(() => TrainedModelWhereInputSchema).optional(),
  isNot: z.lazy(() => TrainedModelWhereInputSchema).optional()
}).strict();

export const ModelPredictionListRelationFilterSchema: z.ZodType<Prisma.ModelPredictionListRelationFilter> = z.object({
  every: z.lazy(() => ModelPredictionWhereInputSchema).optional(),
  some: z.lazy(() => ModelPredictionWhereInputSchema).optional(),
  none: z.lazy(() => ModelPredictionWhereInputSchema).optional()
}).strict();

export const ModelPredictionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ModelPredictionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EvaluationRunCountOrderByAggregateInputSchema: z.ZodType<Prisma.EvaluationRunCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  trainedModelId: z.lazy(() => SortOrderSchema).optional(),
  testSetSource: z.lazy(() => SortOrderSchema).optional(),
  evaluationMetrics: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EvaluationRunMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EvaluationRunMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  trainedModelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EvaluationRunMinOrderByAggregateInputSchema: z.ZodType<Prisma.EvaluationRunMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  scenarioType: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  trainedModelId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EvaluationRunScalarRelationFilterSchema: z.ZodType<Prisma.EvaluationRunScalarRelationFilter> = z.object({
  is: z.lazy(() => EvaluationRunWhereInputSchema).optional(),
  isNot: z.lazy(() => EvaluationRunWhereInputSchema).optional()
}).strict();

export const ModelPredictionCountOrderByAggregateInputSchema: z.ZodType<Prisma.ModelPredictionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  evaluationRunId: z.lazy(() => SortOrderSchema).optional(),
  anomalyEventId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  predictionScore: z.lazy(() => SortOrderSchema).optional(),
  groundTruth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelPredictionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ModelPredictionAvgOrderByAggregateInput> = z.object({
  predictionScore: z.lazy(() => SortOrderSchema).optional(),
  groundTruth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelPredictionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ModelPredictionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  evaluationRunId: z.lazy(() => SortOrderSchema).optional(),
  anomalyEventId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  predictionScore: z.lazy(() => SortOrderSchema).optional(),
  groundTruth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelPredictionMinOrderByAggregateInputSchema: z.ZodType<Prisma.ModelPredictionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  evaluationRunId: z.lazy(() => SortOrderSchema).optional(),
  anomalyEventId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  predictionScore: z.lazy(() => SortOrderSchema).optional(),
  groundTruth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelPredictionSumOrderByAggregateInputSchema: z.ZodType<Prisma.ModelPredictionSumOrderByAggregateInput> = z.object({
  predictionScore: z.lazy(() => SortOrderSchema).optional(),
  groundTruth: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AiChatCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PasskeyCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PasskeyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PurchaseCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PasskeyUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const AccountUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PasskeyUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PasskeyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatCreateWithoutUserInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyCreateWithoutUserInputSchema).array(),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasskeyCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PasskeyWhereUniqueInputSchema),z.lazy(() => PasskeyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseCreateWithoutUserInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutPasskeysInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPasskeysInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserUpdateOneRequiredWithoutPasskeysNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPasskeysNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPasskeysInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPasskeysInputSchema),z.lazy(() => UserUpdateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTwofactorsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutTwofactorsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTwofactorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTwofactorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTwofactorsInputSchema),z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BankAccountCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BorrowGodCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BorrowGodCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BorrowGodCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BorrowGodCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BuddhistCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BuddhistCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BuddhistCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BuddhistCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FamilyCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FamilyCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FamilyMemberCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyMemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyMemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GodNameCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => GodNameCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameCreateWithoutOrganizationInputSchema).array(),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GodNameCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => GodNameCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GodNameCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberClassCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberClassCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberClassCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberClassCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MgYearCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MgYearCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MgYearCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MgYearCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MgYearCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelationshipManagerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Service1CreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1CreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutOrganizationInputSchema),z.lazy(() => Service1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Service1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service1CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Service2CreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2CreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutOrganizationInputSchema),z.lazy(() => Service2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Service2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service2CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing1CreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1CreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing2CreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2CreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TempleCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => TempleCreateWithoutOrganizationInputSchema),z.lazy(() => TempleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TempleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TempleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TempleCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BorrowGodCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BorrowGodCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BorrowGodCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BuddhistCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BuddhistCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BuddhistCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FamilyCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyMemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyMemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => GodNameCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameCreateWithoutOrganizationInputSchema).array(),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GodNameCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => GodNameCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GodNameCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberClassCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberClassCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberClassCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MgYearCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MgYearCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MgYearCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MgYearCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelationshipManagerCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1UncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutOrganizationInputSchema),z.lazy(() => Service1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Service1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service1CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2UncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutOrganizationInputSchema),z.lazy(() => Service2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Service2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service2CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => TempleCreateWithoutOrganizationInputSchema),z.lazy(() => TempleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TempleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TempleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TempleCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AiChatUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BankAccountUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BorrowGodUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BorrowGodUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BorrowGodCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BorrowGodCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BorrowGodUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BorrowGodCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BorrowGodUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BorrowGodUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BorrowGodScalarWhereInputSchema),z.lazy(() => BorrowGodScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BuddhistUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BuddhistUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BuddhistCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BuddhistCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BuddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BuddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BuddhistCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BuddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BuddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BuddhistUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => BuddhistUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BuddhistScalarWhereInputSchema),z.lazy(() => BuddhistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FamilyUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.FamilyUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FamilyCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FamilyUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FamilyUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FamilyUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FamilyUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FamilyUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => FamilyUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FamilyScalarWhereInputSchema),z.lazy(() => FamilyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.FamilyMemberUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyMemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FamilyMemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyMemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FamilyMemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FamilyMemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FamilyMemberScalarWhereInputSchema),z.lazy(() => FamilyMemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GodNameUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.GodNameUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => GodNameCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameCreateWithoutOrganizationInputSchema).array(),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GodNameCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => GodNameCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GodNameUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => GodNameUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GodNameCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GodNameUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => GodNameUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GodNameUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => GodNameUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GodNameScalarWhereInputSchema),z.lazy(() => GodNameScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberClassUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberClassUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberClassCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberClassCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberClassUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberClassUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberClassCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberClassUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberClassUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberClassUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberClassUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberClassScalarWhereInputSchema),z.lazy(() => MemberClassScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MgYearUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MgYearUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MgYearCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MgYearCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MgYearCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MgYearUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MgYearUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MgYearCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MgYearUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MgYearUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MgYearUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MgYearUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MgYearScalarWhereInputSchema),z.lazy(() => MgYearScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProductUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelationshipManagerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RelationshipManagerScalarWhereInputSchema),z.lazy(() => RelationshipManagerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Service1UpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Service1UpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutOrganizationInputSchema),z.lazy(() => Service1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Service1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Service1UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Service1UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service1CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Service1UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Service1UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Service1UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Service1UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Service1ScalarWhereInputSchema),z.lazy(() => Service1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Service2UpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Service2UpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutOrganizationInputSchema),z.lazy(() => Service2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Service2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Service2UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Service2UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service2CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Service2UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Service2UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Service2UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Service2UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Service2ScalarWhereInputSchema),z.lazy(() => Service2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Servicing1UpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing1UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Servicing1UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TempleUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.TempleUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => TempleCreateWithoutOrganizationInputSchema),z.lazy(() => TempleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TempleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TempleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TempleUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TempleUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TempleCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TempleUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TempleUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TempleUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => TempleUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TempleScalarWhereInputSchema),z.lazy(() => TempleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateWithoutOrganizationInputSchema).array(),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AiChatWhereUniqueInputSchema),z.lazy(() => AiChatWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BorrowGodCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BorrowGodCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BorrowGodUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BorrowGodCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BorrowGodUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BorrowGodUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BorrowGodScalarWhereInputSchema),z.lazy(() => BorrowGodScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.BuddhistUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema).array(),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BuddhistCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => BuddhistCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BuddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BuddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BuddhistCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BuddhistWhereUniqueInputSchema),z.lazy(() => BuddhistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BuddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => BuddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BuddhistUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => BuddhistUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BuddhistScalarWhereInputSchema),z.lazy(() => BuddhistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => CustomerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.FamilyUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FamilyCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FamilyUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FamilyUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FamilyWhereUniqueInputSchema),z.lazy(() => FamilyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FamilyUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FamilyUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FamilyUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => FamilyUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FamilyScalarWhereInputSchema),z.lazy(() => FamilyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyMemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FamilyMemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyMemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FamilyMemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FamilyMemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FamilyMemberScalarWhereInputSchema),z.lazy(() => FamilyMemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.GodNameUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => GodNameCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameCreateWithoutOrganizationInputSchema).array(),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GodNameCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => GodNameCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GodNameUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => GodNameUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GodNameCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GodNameWhereUniqueInputSchema),z.lazy(() => GodNameWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GodNameUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => GodNameUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GodNameUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => GodNameUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GodNameScalarWhereInputSchema),z.lazy(() => GodNameScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberClassUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberClassCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberClassCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberClassUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberClassUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberClassCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberClassWhereUniqueInputSchema),z.lazy(() => MemberClassWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberClassUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberClassUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberClassUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberClassUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberClassScalarWhereInputSchema),z.lazy(() => MemberClassScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MgYearUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MgYearCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MgYearCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MgYearCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MgYearUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MgYearUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MgYearCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MgYearWhereUniqueInputSchema),z.lazy(() => MgYearWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MgYearUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MgYearUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MgYearUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MgYearUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MgYearScalarWhereInputSchema),z.lazy(() => MgYearScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProductCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductWhereUniqueInputSchema),z.lazy(() => ProductWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProductUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema).array(),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PurchaseWhereUniqueInputSchema),z.lazy(() => PurchaseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RelationshipManagerCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RelationshipManagerWhereUniqueInputSchema),z.lazy(() => RelationshipManagerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RelationshipManagerScalarWhereInputSchema),z.lazy(() => RelationshipManagerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Service1UncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutOrganizationInputSchema),z.lazy(() => Service1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Service1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Service1UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Service1UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service1CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Service1WhereUniqueInputSchema),z.lazy(() => Service1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Service1UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Service1UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Service1UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Service1UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Service1ScalarWhereInputSchema),z.lazy(() => Service1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Service2UncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutOrganizationInputSchema),z.lazy(() => Service2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Service2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Service2UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Service2UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service2CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Service2UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Service2UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Service2UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Service2UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Service2ScalarWhereInputSchema),z.lazy(() => Service2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing1UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Servicing1UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.TempleUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => TempleCreateWithoutOrganizationInputSchema),z.lazy(() => TempleCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TempleCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TempleCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TempleUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TempleUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TempleCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TempleWhereUniqueInputSchema),z.lazy(() => TempleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TempleUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TempleUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TempleUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => TempleUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TempleScalarWhereInputSchema),z.lazy(() => TempleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutFinder1Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerCreateWithoutFinder1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutFinder2Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerCreateWithoutFinder2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutRm1InputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutRm1Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerCreateWithoutRm1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerCreateNestedManyWithoutRm2InputSchema: z.ZodType<Prisma.CustomerCreateNestedManyWithoutRm2Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerCreateWithoutRm2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreateNestedManyWithoutRmInputSchema: z.ZodType<Prisma.ExpenseCreateNestedManyWithoutRmInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseCreateWithoutRmInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyRmInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutRelationshipManagersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRelationshipManagersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutFinder1Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerCreateWithoutFinder1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutFinder2Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerCreateWithoutFinder2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutRm1Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerCreateWithoutRm1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedCreateNestedManyWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateNestedManyWithoutRm2Input> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerCreateWithoutRm2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedCreateNestedManyWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateNestedManyWithoutRmInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseCreateWithoutRmInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyRmInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutFinder1NestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutFinder1NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerCreateWithoutFinder1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder1InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutFinder2NestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutFinder2NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerCreateWithoutFinder2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder2InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutRm1NestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutRm1NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerCreateWithoutRm1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm1InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm1InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutRm1InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutRm1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUpdateManyWithoutRm2NestedInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithoutRm2NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerCreateWithoutRm2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm2InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm2InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutRm2InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutRm2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUpdateManyWithoutRmNestedInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithoutRmNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseCreateWithoutRmInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutRmInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutRmInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyRmInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutRmInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutRmInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutRmInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutRmInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRelationshipManagersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutRelationshipManagersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUpdateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRelationshipManagersInputSchema) ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutFinder1NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerCreateWithoutFinder1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder1InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutFinder2NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerCreateWithoutFinder2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutFinder2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyFinder2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder2InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutFinder2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutRm1NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerCreateWithoutRm1InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm1InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm1InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutRm1InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutRm1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutRm2NestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerCreateWithoutRm2InputSchema).array(),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema),z.lazy(() => CustomerCreateOrConnectWithoutRm2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm2InputSchema),z.lazy(() => CustomerUpsertWithWhereUniqueWithoutRm2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerCreateManyRm2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerWhereUniqueInputSchema),z.lazy(() => CustomerWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm2InputSchema),z.lazy(() => CustomerUpdateWithWhereUniqueWithoutRm2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerUpdateManyWithWhereWithoutRm2InputSchema),z.lazy(() => CustomerUpdateManyWithWhereWithoutRm2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutRmNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseCreateWithoutRmInputSchema).array(),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema),z.lazy(() => ExpenseCreateOrConnectWithoutRmInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutRmInputSchema),z.lazy(() => ExpenseUpsertWithWhereUniqueWithoutRmInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ExpenseCreateManyRmInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ExpenseWhereUniqueInputSchema),z.lazy(() => ExpenseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutRmInputSchema),z.lazy(() => ExpenseUpdateWithWhereUniqueWithoutRmInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ExpenseUpdateManyWithWhereWithoutRmInputSchema),z.lazy(() => ExpenseUpdateManyWithWhereWithoutRmInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AssetTransactionCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema).array(),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AssetTransactionCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BankAccountCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateWithoutCustomerInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutFinder1CustomersInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutFinder1CustomersInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutFinder2CustomersInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutFinder2CustomersInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutCustomersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCustomersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutRm1CustomersInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutRm1CustomersInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutRm2CustomersInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutRm2CustomersInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const ProfitSharingCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema).array(),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AssetTransactionCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateWithoutCustomerInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateNestedManyWithoutCustomerInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyCustomerInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableDecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  increment: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const AssetTransactionUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.AssetTransactionUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema).array(),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AssetTransactionCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AssetTransactionScalarWhereInputSchema),z.lazy(() => AssetTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.BankAccountUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateWithoutCustomerInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BankAccountUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => BankAccountUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutFinder1CustomersInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutFinder1CustomersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutFinder2CustomersInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutFinder2CustomersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutCustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutCustomersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutCustomersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutCustomersInputSchema),z.lazy(() => OrganizationUpdateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomersInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutRm1CustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutRm1CustomersInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutRm1CustomersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm1CustomersInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutRm2CustomersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutRm2CustomersInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutRm2CustomersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm2CustomersInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema).array(),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => AssetTransactionCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AssetTransactionCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AssetTransactionWhereUniqueInputSchema),z.lazy(() => AssetTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AssetTransactionScalarWhereInputSchema),z.lazy(() => AssetTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateWithoutCustomerInputSchema).array(),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => BankAccountCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BankAccountCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BankAccountWhereUniqueInputSchema),z.lazy(() => BankAccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BankAccountUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => BankAccountUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutCustomerInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyCustomerInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMembersInputSchema),z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutMembersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutMembersInputSchema),z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutPurchasesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutPurchasesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPurchasesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumPurchaseTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPurchaseTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PurchaseTypeSchema).optional()
}).strict();

export const OrganizationUpdateOneWithoutPurchasesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutPurchasesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutPurchasesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutPurchasesInputSchema),z.lazy(() => OrganizationUpdateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutPurchasesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutPurchasesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPurchasesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPurchasesInputSchema),z.lazy(() => UserUpdateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutAiChatsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutAiChatsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAiChatsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneWithoutAiChatsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutAiChatsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutAiChatsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutAiChatsInputSchema),z.lazy(() => OrganizationUpdateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutAiChatsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutAiChatsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAiChatsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAiChatsInputSchema),z.lazy(() => UserUpdateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputSchema) ]).optional(),
}).strict();

export const CustomerCreateNestedOneWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerCreateNestedOneWithoutBankAccountsInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutBankAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutBankAccountsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutBankAccountsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBankAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBankAccountsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ProfitSharingCreateNestedManyWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingCreateNestedManyWithoutBankAccountInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyBankAccountInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyBankAccountInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DecimalFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DecimalFieldUpdateOperationsInput> = z.object({
  set: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  increment: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  decrement: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  multiply: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  divide: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const CustomerUpdateOneWithoutBankAccountsNestedInputSchema: z.ZodType<Prisma.CustomerUpdateOneWithoutBankAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutBankAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutBankAccountsInputSchema).optional(),
  upsert: z.lazy(() => CustomerUpsertWithoutBankAccountsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CustomerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateToOneWithWhereWithoutBankAccountsInputSchema),z.lazy(() => CustomerUpdateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutBankAccountsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutBankAccountsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutBankAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBankAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBankAccountsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutBankAccountsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUpdateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBankAccountsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateManyWithoutBankAccountNestedInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithoutBankAccountNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyBankAccountInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutBankAccountInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyBankAccountInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExpenseCreatereceiptUrlsInputSchema: z.ZodType<Prisma.ExpenseCreatereceiptUrlsInput> = z.object({
  set: z.string().array()
}).strict();

export const OrganizationCreateNestedOneWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutExpensesInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const RelationshipManagerCreateNestedOneWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerCreateNestedOneWithoutExpensesInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional()
}).strict();

export const ExpenseUpdatereceiptUrlsInputSchema: z.ZodType<Prisma.ExpenseUpdatereceiptUrlsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutExpensesInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutExpensesInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutExpensesInputSchema),z.lazy(() => OrganizationUpdateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpensesInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateOneWithoutExpensesNestedInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateOneWithoutExpensesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutExpensesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RelationshipManagerCreateOrConnectWithoutExpensesInputSchema).optional(),
  upsert: z.lazy(() => RelationshipManagerUpsertWithoutExpensesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RelationshipManagerWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RelationshipManagerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateToOneWithWhereWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUpdateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutExpensesInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutProductsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ProfitSharingCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateWithoutProductInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedCreateNestedManyWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateNestedManyWithoutProductInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateWithoutProductInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyProductInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutProductsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutProductsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProductsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProductsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutProductsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutProductsInputSchema),z.lazy(() => OrganizationUpdateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProductsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateWithoutProductInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutProductNestedInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutProductNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateWithoutProductInputSchema).array(),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema),z.lazy(() => ProfitSharingCreateOrConnectWithoutProductInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProfitSharingCreateManyProductInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProfitSharingWhereUniqueInputSchema),z.lazy(() => ProfitSharingWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema),z.lazy(() => ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutProductInputSchema),z.lazy(() => ProfitSharingUpdateManyWithWhereWithoutProductInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BankAccountCreateNestedOneWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountCreateNestedOneWithoutProfitSharingInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BankAccountCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => BankAccountWhereUniqueInputSchema).optional()
}).strict();

export const CustomerCreateNestedOneWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerCreateNestedOneWithoutProfitSharingInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutProfitSharingInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const ProductCreateNestedOneWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductCreateNestedOneWithoutProfitSharingInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional()
}).strict();

export const BankAccountUpdateOneWithoutProfitSharingNestedInputSchema: z.ZodType<Prisma.BankAccountUpdateOneWithoutProfitSharingNestedInput> = z.object({
  create: z.union([ z.lazy(() => BankAccountCreateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BankAccountCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  upsert: z.lazy(() => BankAccountUpsertWithoutProfitSharingInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => BankAccountWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => BankAccountWhereInputSchema) ]).optional(),
  connect: z.lazy(() => BankAccountWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BankAccountUpdateToOneWithWhereWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUpdateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutProfitSharingInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema: z.ZodType<Prisma.CustomerUpdateOneRequiredWithoutProfitSharingNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  upsert: z.lazy(() => CustomerUpsertWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateToOneWithWhereWithoutProfitSharingInputSchema),z.lazy(() => CustomerUpdateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutProfitSharingInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutProfitSharingNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUpdateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProfitSharingInputSchema) ]).optional(),
}).strict();

export const ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema: z.ZodType<Prisma.ProductUpdateOneRequiredWithoutProfitSharingNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductCreateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutProfitSharingInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductCreateOrConnectWithoutProfitSharingInputSchema).optional(),
  upsert: z.lazy(() => ProductUpsertWithoutProfitSharingInputSchema).optional(),
  connect: z.lazy(() => ProductWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductUpdateToOneWithWhereWithoutProfitSharingInputSchema),z.lazy(() => ProductUpdateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutProfitSharingInputSchema) ]).optional(),
}).strict();

export const CustomerCreateNestedOneWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerCreateNestedOneWithoutAssetTransactionsInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutAssetTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutAssetTransactionsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional()
}).strict();

export const CustomerUpdateOneRequiredWithoutAssetTransactionsNestedInputSchema: z.ZodType<Prisma.CustomerUpdateOneRequiredWithoutAssetTransactionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerCreateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutAssetTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomerCreateOrConnectWithoutAssetTransactionsInputSchema).optional(),
  upsert: z.lazy(() => CustomerUpsertWithoutAssetTransactionsInputSchema).optional(),
  connect: z.lazy(() => CustomerWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomerUpdateToOneWithWhereWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUpdateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutAssetTransactionsInputSchema) ]).optional(),
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const AnomalyEventCreateNestedManyWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventCreateNestedManyWithoutExperimentRunInput> = z.object({
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AnomalyEventCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AnomalyEventCreateManyExperimentRunInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelCreateNestedManyWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelCreateNestedManyWithoutExperimentRunInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TrainedModelCreateManyExperimentRunInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AnomalyEventUncheckedCreateNestedManyWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedCreateNestedManyWithoutExperimentRunInput> = z.object({
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AnomalyEventCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AnomalyEventCreateManyExperimentRunInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelUncheckedCreateNestedManyWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUncheckedCreateNestedManyWithoutExperimentRunInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TrainedModelCreateManyExperimentRunInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumExperimentRunStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumExperimentRunStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ExperimentRunStatusSchema).optional()
}).strict();

export const AnomalyEventUpdateManyWithoutExperimentRunNestedInputSchema: z.ZodType<Prisma.AnomalyEventUpdateManyWithoutExperimentRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AnomalyEventCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AnomalyEventUpsertWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUpsertWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AnomalyEventCreateManyExperimentRunInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AnomalyEventUpdateWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUpdateWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AnomalyEventUpdateManyWithWhereWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUpdateManyWithWhereWithoutExperimentRunInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AnomalyEventScalarWhereInputSchema),z.lazy(() => AnomalyEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelUpdateManyWithoutExperimentRunNestedInputSchema: z.ZodType<Prisma.TrainedModelUpdateManyWithoutExperimentRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TrainedModelUpsertWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUpsertWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TrainedModelCreateManyExperimentRunInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TrainedModelUpdateWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUpdateWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TrainedModelUpdateManyWithWhereWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUpdateManyWithWhereWithoutExperimentRunInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TrainedModelScalarWhereInputSchema),z.lazy(() => TrainedModelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AnomalyEventUncheckedUpdateManyWithoutExperimentRunNestedInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedUpdateManyWithoutExperimentRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AnomalyEventCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AnomalyEventUpsertWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUpsertWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AnomalyEventCreateManyExperimentRunInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AnomalyEventWhereUniqueInputSchema),z.lazy(() => AnomalyEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AnomalyEventUpdateWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUpdateWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AnomalyEventUpdateManyWithWhereWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUpdateManyWithWhereWithoutExperimentRunInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AnomalyEventScalarWhereInputSchema),z.lazy(() => AnomalyEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelUncheckedUpdateManyWithoutExperimentRunNestedInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateManyWithoutExperimentRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema).array(),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelCreateOrConnectWithoutExperimentRunInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TrainedModelUpsertWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUpsertWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TrainedModelCreateManyExperimentRunInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TrainedModelWhereUniqueInputSchema),z.lazy(() => TrainedModelWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TrainedModelUpdateWithWhereUniqueWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUpdateWithWhereUniqueWithoutExperimentRunInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TrainedModelUpdateManyWithWhereWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUpdateManyWithWhereWithoutExperimentRunInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TrainedModelScalarWhereInputSchema),z.lazy(() => TrainedModelScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ExperimentRunCreateNestedOneWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunCreateNestedOneWithoutAnomalyEventsInput> = z.object({
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExperimentRunCreateOrConnectWithoutAnomalyEventsInputSchema).optional(),
  connect: z.lazy(() => ExperimentRunWhereUniqueInputSchema).optional()
}).strict();

export const EventLabelLinkCreateNestedManyWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkCreateNestedManyWithoutAnomalyEventInput> = z.object({
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema).array(),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventLabelLinkCreateManyAnomalyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventLabelLinkUncheckedCreateNestedManyWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedCreateNestedManyWithoutAnomalyEventInput> = z.object({
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema).array(),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventLabelLinkCreateManyAnomalyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const EnumAnomalyEventStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumAnomalyEventStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => AnomalyEventStatusSchema).optional()
}).strict();

export const ExperimentRunUpdateOneWithoutAnomalyEventsNestedInputSchema: z.ZodType<Prisma.ExperimentRunUpdateOneWithoutAnomalyEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExperimentRunCreateOrConnectWithoutAnomalyEventsInputSchema).optional(),
  upsert: z.lazy(() => ExperimentRunUpsertWithoutAnomalyEventsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ExperimentRunWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ExperimentRunWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExperimentRunUpdateToOneWithWhereWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUpdateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutAnomalyEventsInputSchema) ]).optional(),
}).strict();

export const EventLabelLinkUpdateManyWithoutAnomalyEventNestedInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateManyWithoutAnomalyEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema).array(),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventLabelLinkCreateManyAnomalyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventLabelLinkUpdateManyWithWhereWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUpdateManyWithWhereWithoutAnomalyEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventLabelLinkScalarWhereInputSchema),z.lazy(() => EventLabelLinkScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventLabelLinkUncheckedUpdateManyWithoutAnomalyEventNestedInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedUpdateManyWithoutAnomalyEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema).array(),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventLabelLinkCreateManyAnomalyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventLabelLinkUpdateManyWithWhereWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUpdateManyWithWhereWithoutAnomalyEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventLabelLinkScalarWhereInputSchema),z.lazy(() => EventLabelLinkScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventLabelLinkCreateNestedManyWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkCreateNestedManyWithoutAnomalyLabelInput> = z.object({
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema).array(),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyLabelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventLabelLinkCreateManyAnomalyLabelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventLabelLinkUncheckedCreateNestedManyWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedCreateNestedManyWithoutAnomalyLabelInput> = z.object({
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema).array(),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyLabelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventLabelLinkCreateManyAnomalyLabelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EventLabelLinkUpdateManyWithoutAnomalyLabelNestedInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateManyWithoutAnomalyLabelNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema).array(),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyLabelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyLabelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventLabelLinkCreateManyAnomalyLabelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyLabelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventLabelLinkUpdateManyWithWhereWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUpdateManyWithWhereWithoutAnomalyLabelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventLabelLinkScalarWhereInputSchema),z.lazy(() => EventLabelLinkScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EventLabelLinkUncheckedUpdateManyWithoutAnomalyLabelNestedInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedUpdateManyWithoutAnomalyLabelNestedInput> = z.object({
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema).array(),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkCreateOrConnectWithoutAnomalyLabelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyLabelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EventLabelLinkCreateManyAnomalyLabelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EventLabelLinkWhereUniqueInputSchema),z.lazy(() => EventLabelLinkWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyLabelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EventLabelLinkUpdateManyWithWhereWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUpdateManyWithWhereWithoutAnomalyLabelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EventLabelLinkScalarWhereInputSchema),z.lazy(() => EventLabelLinkScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GodNameCreateNestedOneWithoutBorrowGodInputSchema: z.ZodType<Prisma.GodNameCreateNestedOneWithoutBorrowGodInput> = z.object({
  create: z.union([ z.lazy(() => GodNameCreateWithoutBorrowGodInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutBorrowGodInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GodNameCreateOrConnectWithoutBorrowGodInputSchema).optional(),
  connect: z.lazy(() => GodNameWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutBorrow_godInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBorrow_godInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBorrow_godInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const GodNameUpdateOneRequiredWithoutBorrowGodNestedInputSchema: z.ZodType<Prisma.GodNameUpdateOneRequiredWithoutBorrowGodNestedInput> = z.object({
  create: z.union([ z.lazy(() => GodNameCreateWithoutBorrowGodInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutBorrowGodInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GodNameCreateOrConnectWithoutBorrowGodInputSchema).optional(),
  upsert: z.lazy(() => GodNameUpsertWithoutBorrowGodInputSchema).optional(),
  connect: z.lazy(() => GodNameWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => GodNameUpdateToOneWithWhereWithoutBorrowGodInputSchema),z.lazy(() => GodNameUpdateWithoutBorrowGodInputSchema),z.lazy(() => GodNameUncheckedUpdateWithoutBorrowGodInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutBorrow_godNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutBorrow_godNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBorrow_godInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBorrow_godInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutBorrow_godInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUpdateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBorrow_godInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutBuddhistInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBuddhistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBuddhistInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutBuddhistNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutBuddhistNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBuddhistInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutBuddhistInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutBuddhistInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutBuddhistInputSchema),z.lazy(() => OrganizationUpdateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBuddhistInputSchema) ]).optional(),
}).strict();

export const AnomalyEventCreateNestedOneWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyEventCreateNestedOneWithoutEventLabelLinksInput> = z.object({
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutEventLabelLinksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AnomalyEventCreateOrConnectWithoutEventLabelLinksInputSchema).optional(),
  connect: z.lazy(() => AnomalyEventWhereUniqueInputSchema).optional()
}).strict();

export const AnomalyLabelCreateNestedOneWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyLabelCreateNestedOneWithoutEventLabelLinksInput> = z.object({
  create: z.union([ z.lazy(() => AnomalyLabelCreateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyLabelUncheckedCreateWithoutEventLabelLinksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AnomalyLabelCreateOrConnectWithoutEventLabelLinksInputSchema).optional(),
  connect: z.lazy(() => AnomalyLabelWhereUniqueInputSchema).optional()
}).strict();

export const AnomalyEventUpdateOneRequiredWithoutEventLabelLinksNestedInputSchema: z.ZodType<Prisma.AnomalyEventUpdateOneRequiredWithoutEventLabelLinksNestedInput> = z.object({
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutEventLabelLinksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AnomalyEventCreateOrConnectWithoutEventLabelLinksInputSchema).optional(),
  upsert: z.lazy(() => AnomalyEventUpsertWithoutEventLabelLinksInputSchema).optional(),
  connect: z.lazy(() => AnomalyEventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AnomalyEventUpdateToOneWithWhereWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyEventUpdateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyEventUncheckedUpdateWithoutEventLabelLinksInputSchema) ]).optional(),
}).strict();

export const AnomalyLabelUpdateOneRequiredWithoutEventLabelLinksNestedInputSchema: z.ZodType<Prisma.AnomalyLabelUpdateOneRequiredWithoutEventLabelLinksNestedInput> = z.object({
  create: z.union([ z.lazy(() => AnomalyLabelCreateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyLabelUncheckedCreateWithoutEventLabelLinksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AnomalyLabelCreateOrConnectWithoutEventLabelLinksInputSchema).optional(),
  upsert: z.lazy(() => AnomalyLabelUpsertWithoutEventLabelLinksInputSchema).optional(),
  connect: z.lazy(() => AnomalyLabelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AnomalyLabelUpdateToOneWithWhereWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyLabelUpdateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyLabelUncheckedUpdateWithoutEventLabelLinksInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamilyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFamilyInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const FamilyMemberCreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberCreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema).array(),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyMemberCreateOrConnectWithoutFamilyInputSchema),z.lazy(() => FamilyMemberCreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyMemberCreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing1CreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1CreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutFamilyInputSchema),z.lazy(() => Servicing1CreateWithoutFamilyInputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing2CreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2CreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutFamilyInputSchema),z.lazy(() => Servicing2CreateWithoutFamilyInputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FamilyMemberUncheckedCreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedCreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema).array(),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyMemberCreateOrConnectWithoutFamilyInputSchema),z.lazy(() => FamilyMemberCreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyMemberCreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutFamilyInputSchema),z.lazy(() => Servicing1CreateWithoutFamilyInputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateNestedManyWithoutFamilyInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutFamilyInputSchema),z.lazy(() => Servicing2CreateWithoutFamilyInputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyFamilyInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamilyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFamilyInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutFamilyInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutFamilyInputSchema),z.lazy(() => OrganizationUpdateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamilyInputSchema) ]).optional(),
}).strict();

export const FamilyMemberUpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.FamilyMemberUpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema).array(),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyMemberCreateOrConnectWithoutFamilyInputSchema),z.lazy(() => FamilyMemberCreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FamilyMemberUpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyMemberCreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FamilyMemberUpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FamilyMemberUpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FamilyMemberScalarWhereInputSchema),z.lazy(() => FamilyMemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.Servicing1UpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutFamilyInputSchema),z.lazy(() => Servicing1CreateWithoutFamilyInputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing1UpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => Servicing1UpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutFamilyInputSchema),z.lazy(() => Servicing2CreateWithoutFamilyInputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FamilyMemberUncheckedUpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedUpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema).array(),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FamilyMemberCreateOrConnectWithoutFamilyInputSchema),z.lazy(() => FamilyMemberCreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FamilyMemberUpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FamilyMemberCreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FamilyMemberWhereUniqueInputSchema),z.lazy(() => FamilyMemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FamilyMemberUpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FamilyMemberUpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FamilyMemberScalarWhereInputSchema),z.lazy(() => FamilyMemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutFamilyInputSchema),z.lazy(() => Servicing1CreateWithoutFamilyInputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing1UpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => Servicing1UpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutFamilyNestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutFamilyInputSchema),z.lazy(() => Servicing2CreateWithoutFamilyInputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutFamilyInputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutFamilyInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyFamilyInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutFamilyInputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutFamilyInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FamilyCreateNestedOneWithoutFamilyMembersInputSchema: z.ZodType<Prisma.FamilyCreateNestedOneWithoutFamilyMembersInput> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutFamilyMembersInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutFamilyMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FamilyCreateOrConnectWithoutFamilyMembersInputSchema).optional(),
  connect: z.lazy(() => FamilyWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutFamily_memberInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamily_memberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFamily_memberInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const FamilyUpdateOneRequiredWithoutFamilyMembersNestedInputSchema: z.ZodType<Prisma.FamilyUpdateOneRequiredWithoutFamilyMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutFamilyMembersInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutFamilyMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FamilyCreateOrConnectWithoutFamilyMembersInputSchema).optional(),
  upsert: z.lazy(() => FamilyUpsertWithoutFamilyMembersInputSchema).optional(),
  connect: z.lazy(() => FamilyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FamilyUpdateToOneWithWhereWithoutFamilyMembersInputSchema),z.lazy(() => FamilyUpdateWithoutFamilyMembersInputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutFamilyMembersInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutFamily_memberNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutFamily_memberNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamily_memberInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutFamily_memberInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutFamily_memberInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUpdateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamily_memberInputSchema) ]).optional(),
}).strict();

export const BorrowGodCreateNestedManyWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodCreateNestedManyWithoutGodNameInput> = z.object({
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema).array(),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BorrowGodCreateOrConnectWithoutGodNameInputSchema),z.lazy(() => BorrowGodCreateOrConnectWithoutGodNameInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BorrowGodCreateManyGodNameInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutGod_nameInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGod_nameInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutGod_nameInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const BorrowGodUncheckedCreateNestedManyWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodUncheckedCreateNestedManyWithoutGodNameInput> = z.object({
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema).array(),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BorrowGodCreateOrConnectWithoutGodNameInputSchema),z.lazy(() => BorrowGodCreateOrConnectWithoutGodNameInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BorrowGodCreateManyGodNameInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BorrowGodUpdateManyWithoutGodNameNestedInputSchema: z.ZodType<Prisma.BorrowGodUpdateManyWithoutGodNameNestedInput> = z.object({
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema).array(),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BorrowGodCreateOrConnectWithoutGodNameInputSchema),z.lazy(() => BorrowGodCreateOrConnectWithoutGodNameInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BorrowGodUpsertWithWhereUniqueWithoutGodNameInputSchema),z.lazy(() => BorrowGodUpsertWithWhereUniqueWithoutGodNameInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BorrowGodCreateManyGodNameInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BorrowGodUpdateWithWhereUniqueWithoutGodNameInputSchema),z.lazy(() => BorrowGodUpdateWithWhereUniqueWithoutGodNameInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BorrowGodUpdateManyWithWhereWithoutGodNameInputSchema),z.lazy(() => BorrowGodUpdateManyWithWhereWithoutGodNameInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BorrowGodScalarWhereInputSchema),z.lazy(() => BorrowGodScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutGod_nameNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutGod_nameNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGod_nameInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutGod_nameInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutGod_nameInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutGod_nameInputSchema),z.lazy(() => OrganizationUpdateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutGod_nameInputSchema) ]).optional(),
}).strict();

export const BorrowGodUncheckedUpdateManyWithoutGodNameNestedInputSchema: z.ZodType<Prisma.BorrowGodUncheckedUpdateManyWithoutGodNameNestedInput> = z.object({
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema).array(),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BorrowGodCreateOrConnectWithoutGodNameInputSchema),z.lazy(() => BorrowGodCreateOrConnectWithoutGodNameInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BorrowGodUpsertWithWhereUniqueWithoutGodNameInputSchema),z.lazy(() => BorrowGodUpsertWithWhereUniqueWithoutGodNameInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BorrowGodCreateManyGodNameInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BorrowGodWhereUniqueInputSchema),z.lazy(() => BorrowGodWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BorrowGodUpdateWithWhereUniqueWithoutGodNameInputSchema),z.lazy(() => BorrowGodUpdateWithWhereUniqueWithoutGodNameInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BorrowGodUpdateManyWithWhereWithoutGodNameInputSchema),z.lazy(() => BorrowGodUpdateManyWithWhereWithoutGodNameInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BorrowGodScalarWhereInputSchema),z.lazy(() => BorrowGodScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMember_classInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMember_classInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMember_classInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutMember_classNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMember_classNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMember_classInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMember_classInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMember_classInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMember_classInputSchema),z.lazy(() => OrganizationUpdateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMember_classInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMgyearInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMgyearInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMgyearInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutMgyearNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMgyearNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMgyearInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMgyearInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMgyearInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMgyearInputSchema),z.lazy(() => OrganizationUpdateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMgyearInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutService1InputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutService1InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const Service2CreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.Service2CreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutService1InputSchema),z.lazy(() => Service2CreateWithoutService1InputSchema).array(),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service2CreateOrConnectWithoutService1InputSchema),z.lazy(() => Service2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service2CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing1CreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.Servicing1CreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService1InputSchema),z.lazy(() => Servicing1CreateWithoutService1InputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutService1InputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing2CreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.Servicing2CreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService1InputSchema),z.lazy(() => Servicing2CreateWithoutService1InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutService1InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Service2UncheckedCreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.Service2UncheckedCreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutService1InputSchema),z.lazy(() => Service2CreateWithoutService1InputSchema).array(),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service2CreateOrConnectWithoutService1InputSchema),z.lazy(() => Service2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service2CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UncheckedCreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService1InputSchema),z.lazy(() => Servicing1CreateWithoutService1InputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutService1InputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedCreateNestedManyWithoutService1InputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateNestedManyWithoutService1Input> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService1InputSchema),z.lazy(() => Servicing2CreateWithoutService1InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutService1InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyService1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutService1NestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutService1InputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutService1InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutService1InputSchema),z.lazy(() => OrganizationUpdateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService1InputSchema) ]).optional(),
}).strict();

export const Service2UpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.Service2UpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutService1InputSchema),z.lazy(() => Service2CreateWithoutService1InputSchema).array(),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service2CreateOrConnectWithoutService1InputSchema),z.lazy(() => Service2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Service2UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Service2UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service2CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Service2UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Service2UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Service2UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => Service2UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Service2ScalarWhereInputSchema),z.lazy(() => Service2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.Servicing1UpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService1InputSchema),z.lazy(() => Servicing1CreateWithoutService1InputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutService1InputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing1UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => Servicing1UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService1InputSchema),z.lazy(() => Servicing2CreateWithoutService1InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutService1InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Service2UncheckedUpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.Service2UncheckedUpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutService1InputSchema),z.lazy(() => Service2CreateWithoutService1InputSchema).array(),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Service2CreateOrConnectWithoutService1InputSchema),z.lazy(() => Service2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Service2UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Service2UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Service2CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Service2WhereUniqueInputSchema),z.lazy(() => Service2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Service2UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Service2UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Service2UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => Service2UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Service2ScalarWhereInputSchema),z.lazy(() => Service2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UncheckedUpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService1InputSchema),z.lazy(() => Servicing1CreateWithoutService1InputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutService1InputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing1UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => Servicing1UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutService1NestedInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutService1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService1InputSchema),z.lazy(() => Servicing2CreateWithoutService1InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutService1InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutService1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyService1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutService1InputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutService1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutService1InputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutService1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutService2InputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutService2InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const Service1CreateNestedOneWithoutService2InputSchema: z.ZodType<Prisma.Service1CreateNestedOneWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutService2InputSchema),z.lazy(() => Service1UncheckedCreateWithoutService2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service1CreateOrConnectWithoutService2InputSchema).optional(),
  connect: z.lazy(() => Service1WhereUniqueInputSchema).optional()
}).strict();

export const Servicing1CreateNestedManyWithoutService2InputSchema: z.ZodType<Prisma.Servicing1CreateNestedManyWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService2InputSchema),z.lazy(() => Servicing1CreateWithoutService2InputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutService2InputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyService2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing2CreateNestedManyWithoutService2InputSchema: z.ZodType<Prisma.Servicing2CreateNestedManyWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService2InputSchema),z.lazy(() => Servicing2CreateWithoutService2InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutService2InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyService2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UncheckedCreateNestedManyWithoutService2InputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateNestedManyWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService2InputSchema),z.lazy(() => Servicing1CreateWithoutService2InputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutService2InputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyService2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedCreateNestedManyWithoutService2InputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateNestedManyWithoutService2Input> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService2InputSchema),z.lazy(() => Servicing2CreateWithoutService2InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutService2InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyService2InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutService2NestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutService2InputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutService2InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutService2InputSchema),z.lazy(() => OrganizationUpdateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService2InputSchema) ]).optional(),
}).strict();

export const Service1UpdateOneRequiredWithoutService2NestedInputSchema: z.ZodType<Prisma.Service1UpdateOneRequiredWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutService2InputSchema),z.lazy(() => Service1UncheckedCreateWithoutService2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service1CreateOrConnectWithoutService2InputSchema).optional(),
  upsert: z.lazy(() => Service1UpsertWithoutService2InputSchema).optional(),
  connect: z.lazy(() => Service1WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Service1UpdateToOneWithWhereWithoutService2InputSchema),z.lazy(() => Service1UpdateWithoutService2InputSchema),z.lazy(() => Service1UncheckedUpdateWithoutService2InputSchema) ]).optional(),
}).strict();

export const Servicing1UpdateManyWithoutService2NestedInputSchema: z.ZodType<Prisma.Servicing1UpdateManyWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService2InputSchema),z.lazy(() => Servicing1CreateWithoutService2InputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutService2InputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutService2InputSchema),z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyService2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutService2InputSchema),z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing1UpdateManyWithWhereWithoutService2InputSchema),z.lazy(() => Servicing1UpdateManyWithWhereWithoutService2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UpdateManyWithoutService2NestedInputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService2InputSchema),z.lazy(() => Servicing2CreateWithoutService2InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutService2InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutService2InputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyService2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutService2InputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutService2InputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutService2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing1UncheckedUpdateManyWithoutService2NestedInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateManyWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService2InputSchema),z.lazy(() => Servicing1CreateWithoutService2InputSchema).array(),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing1CreateOrConnectWithoutService2InputSchema),z.lazy(() => Servicing1CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutService2InputSchema),z.lazy(() => Servicing1UpsertWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing1CreateManyService2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing1WhereUniqueInputSchema),z.lazy(() => Servicing1WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutService2InputSchema),z.lazy(() => Servicing1UpdateWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing1UpdateManyWithWhereWithoutService2InputSchema),z.lazy(() => Servicing1UpdateManyWithWhereWithoutService2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutService2NestedInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutService2NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService2InputSchema),z.lazy(() => Servicing2CreateWithoutService2InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutService2InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutService2InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutService2InputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyService2InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutService2InputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutService2InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutService2InputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutService2InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FamilyCreateNestedOneWithoutServicing1InputSchema: z.ZodType<Prisma.FamilyCreateNestedOneWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutServicing1InputSchema),z.lazy(() => FamilyUncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FamilyCreateOrConnectWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => FamilyWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const Service1CreateNestedOneWithoutServicing1InputSchema: z.ZodType<Prisma.Service1CreateNestedOneWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutServicing1InputSchema),z.lazy(() => Service1UncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service1CreateOrConnectWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => Service1WhereUniqueInputSchema).optional()
}).strict();

export const Service2CreateNestedOneWithoutServicing1InputSchema: z.ZodType<Prisma.Service2CreateNestedOneWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutServicing1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service2CreateOrConnectWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => Service2WhereUniqueInputSchema).optional()
}).strict();

export const Servicing2CreateNestedManyWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2CreateNestedManyWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutServicing1InputSchema),z.lazy(() => Servicing2CreateWithoutServicing1InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutServicing1InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutServicing1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyServicing1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateNestedManyWithoutServicing1Input> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutServicing1InputSchema),z.lazy(() => Servicing2CreateWithoutServicing1InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutServicing1InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutServicing1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyServicing1InputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FamilyUpdateOneRequiredWithoutServicing1NestedInputSchema: z.ZodType<Prisma.FamilyUpdateOneRequiredWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutServicing1InputSchema),z.lazy(() => FamilyUncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FamilyCreateOrConnectWithoutServicing1InputSchema).optional(),
  upsert: z.lazy(() => FamilyUpsertWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => FamilyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FamilyUpdateToOneWithWhereWithoutServicing1InputSchema),z.lazy(() => FamilyUpdateWithoutServicing1InputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutServicing1InputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutServicing1InputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutServicing1InputSchema),z.lazy(() => OrganizationUpdateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing1InputSchema) ]).optional(),
}).strict();

export const Service1UpdateOneRequiredWithoutServicing1NestedInputSchema: z.ZodType<Prisma.Service1UpdateOneRequiredWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutServicing1InputSchema),z.lazy(() => Service1UncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service1CreateOrConnectWithoutServicing1InputSchema).optional(),
  upsert: z.lazy(() => Service1UpsertWithoutServicing1InputSchema).optional(),
  connect: z.lazy(() => Service1WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Service1UpdateToOneWithWhereWithoutServicing1InputSchema),z.lazy(() => Service1UpdateWithoutServicing1InputSchema),z.lazy(() => Service1UncheckedUpdateWithoutServicing1InputSchema) ]).optional(),
}).strict();

export const Service2UpdateOneWithoutServicing1NestedInputSchema: z.ZodType<Prisma.Service2UpdateOneWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutServicing1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutServicing1InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service2CreateOrConnectWithoutServicing1InputSchema).optional(),
  upsert: z.lazy(() => Service2UpsertWithoutServicing1InputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => Service2WhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => Service2WhereInputSchema) ]).optional(),
  connect: z.lazy(() => Service2WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Service2UpdateToOneWithWhereWithoutServicing1InputSchema),z.lazy(() => Service2UpdateWithoutServicing1InputSchema),z.lazy(() => Service2UncheckedUpdateWithoutServicing1InputSchema) ]).optional(),
}).strict();

export const Servicing2UpdateManyWithoutServicing1NestedInputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutServicing1InputSchema),z.lazy(() => Servicing2CreateWithoutServicing1InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutServicing1InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutServicing1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyServicing1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutServicing1InputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutServicing1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutServicing1NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing2CreateWithoutServicing1InputSchema),z.lazy(() => Servicing2CreateWithoutServicing1InputSchema).array(),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Servicing2CreateOrConnectWithoutServicing1InputSchema),z.lazy(() => Servicing2CreateOrConnectWithoutServicing1InputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema),z.lazy(() => Servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema).array() ]).optional(),
  createMany: z.lazy(() => Servicing2CreateManyServicing1InputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Servicing2WhereUniqueInputSchema),z.lazy(() => Servicing2WhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema),z.lazy(() => Servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Servicing2UpdateManyWithWhereWithoutServicing1InputSchema),z.lazy(() => Servicing2UpdateManyWithWhereWithoutServicing1InputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FamilyCreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.FamilyCreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutServicing2InputSchema),z.lazy(() => FamilyUncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FamilyCreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => FamilyWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const Service1CreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.Service1CreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutServicing2InputSchema),z.lazy(() => Service1UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service1CreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => Service1WhereUniqueInputSchema).optional()
}).strict();

export const Service2CreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.Service2CreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutServicing2InputSchema),z.lazy(() => Service2UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service2CreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => Service2WhereUniqueInputSchema).optional()
}).strict();

export const Servicing1CreateNestedOneWithoutServicing2InputSchema: z.ZodType<Prisma.Servicing1CreateNestedOneWithoutServicing2Input> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutServicing2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Servicing1CreateOrConnectWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => Servicing1WhereUniqueInputSchema).optional()
}).strict();

export const FamilyUpdateOneRequiredWithoutServicing2NestedInputSchema: z.ZodType<Prisma.FamilyUpdateOneRequiredWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => FamilyCreateWithoutServicing2InputSchema),z.lazy(() => FamilyUncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FamilyCreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => FamilyUpsertWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => FamilyWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FamilyUpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => FamilyUpdateWithoutServicing2InputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => OrganizationUpdateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const Service1UpdateOneRequiredWithoutServicing2NestedInputSchema: z.ZodType<Prisma.Service1UpdateOneRequiredWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => Service1CreateWithoutServicing2InputSchema),z.lazy(() => Service1UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service1CreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => Service1UpsertWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => Service1WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Service1UpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => Service1UpdateWithoutServicing2InputSchema),z.lazy(() => Service1UncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const Service2UpdateOneWithoutServicing2NestedInputSchema: z.ZodType<Prisma.Service2UpdateOneWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => Service2CreateWithoutServicing2InputSchema),z.lazy(() => Service2UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Service2CreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => Service2UpsertWithoutServicing2InputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => Service2WhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => Service2WhereInputSchema) ]).optional(),
  connect: z.lazy(() => Service2WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Service2UpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => Service2UpdateWithoutServicing2InputSchema),z.lazy(() => Service2UncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const Servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema: z.ZodType<Prisma.Servicing1UpdateOneRequiredWithoutServicing2NestedInput> = z.object({
  create: z.union([ z.lazy(() => Servicing1CreateWithoutServicing2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutServicing2InputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Servicing1CreateOrConnectWithoutServicing2InputSchema).optional(),
  upsert: z.lazy(() => Servicing1UpsertWithoutServicing2InputSchema).optional(),
  connect: z.lazy(() => Servicing1WhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Servicing1UpdateToOneWithWhereWithoutServicing2InputSchema),z.lazy(() => Servicing1UpdateWithoutServicing2InputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutServicing2InputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutTempleInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTempleInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutTempleInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutTempleNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutTempleNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTempleInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutTempleInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutTempleInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutTempleInputSchema),z.lazy(() => OrganizationUpdateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTempleInputSchema) ]).optional(),
}).strict();

export const ExperimentRunCreateNestedOneWithoutTrainedModelsInputSchema: z.ZodType<Prisma.ExperimentRunCreateNestedOneWithoutTrainedModelsInput> = z.object({
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutTrainedModelsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutTrainedModelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExperimentRunCreateOrConnectWithoutTrainedModelsInputSchema).optional(),
  connect: z.lazy(() => ExperimentRunWhereUniqueInputSchema).optional()
}).strict();

export const EvaluationRunCreateNestedManyWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunCreateNestedManyWithoutTrainedModelInput> = z.object({
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema).array(),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EvaluationRunCreateOrConnectWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunCreateOrConnectWithoutTrainedModelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EvaluationRunCreateManyTrainedModelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EvaluationRunUncheckedCreateNestedManyWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedCreateNestedManyWithoutTrainedModelInput> = z.object({
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema).array(),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EvaluationRunCreateOrConnectWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunCreateOrConnectWithoutTrainedModelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EvaluationRunCreateManyTrainedModelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ExperimentRunUpdateOneRequiredWithoutTrainedModelsNestedInputSchema: z.ZodType<Prisma.ExperimentRunUpdateOneRequiredWithoutTrainedModelsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutTrainedModelsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutTrainedModelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ExperimentRunCreateOrConnectWithoutTrainedModelsInputSchema).optional(),
  upsert: z.lazy(() => ExperimentRunUpsertWithoutTrainedModelsInputSchema).optional(),
  connect: z.lazy(() => ExperimentRunWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ExperimentRunUpdateToOneWithWhereWithoutTrainedModelsInputSchema),z.lazy(() => ExperimentRunUpdateWithoutTrainedModelsInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutTrainedModelsInputSchema) ]).optional(),
}).strict();

export const EvaluationRunUpdateManyWithoutTrainedModelNestedInputSchema: z.ZodType<Prisma.EvaluationRunUpdateManyWithoutTrainedModelNestedInput> = z.object({
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema).array(),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EvaluationRunCreateOrConnectWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunCreateOrConnectWithoutTrainedModelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EvaluationRunUpsertWithWhereUniqueWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUpsertWithWhereUniqueWithoutTrainedModelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EvaluationRunCreateManyTrainedModelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EvaluationRunUpdateWithWhereUniqueWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUpdateWithWhereUniqueWithoutTrainedModelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EvaluationRunUpdateManyWithWhereWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUpdateManyWithWhereWithoutTrainedModelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EvaluationRunScalarWhereInputSchema),z.lazy(() => EvaluationRunScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EvaluationRunUncheckedUpdateManyWithoutTrainedModelNestedInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedUpdateManyWithoutTrainedModelNestedInput> = z.object({
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema).array(),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EvaluationRunCreateOrConnectWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunCreateOrConnectWithoutTrainedModelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EvaluationRunUpsertWithWhereUniqueWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUpsertWithWhereUniqueWithoutTrainedModelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EvaluationRunCreateManyTrainedModelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EvaluationRunWhereUniqueInputSchema),z.lazy(() => EvaluationRunWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EvaluationRunUpdateWithWhereUniqueWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUpdateWithWhereUniqueWithoutTrainedModelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EvaluationRunUpdateManyWithWhereWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUpdateManyWithWhereWithoutTrainedModelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EvaluationRunScalarWhereInputSchema),z.lazy(() => EvaluationRunScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelCreateNestedOneWithoutEvaluationRunsInputSchema: z.ZodType<Prisma.TrainedModelCreateNestedOneWithoutEvaluationRunsInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutEvaluationRunsInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutEvaluationRunsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TrainedModelCreateOrConnectWithoutEvaluationRunsInputSchema).optional(),
  connect: z.lazy(() => TrainedModelWhereUniqueInputSchema).optional()
}).strict();

export const ModelPredictionCreateNestedManyWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionCreateNestedManyWithoutEvaluationRunInput> = z.object({
  create: z.union([ z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema).array(),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelPredictionCreateOrConnectWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionCreateOrConnectWithoutEvaluationRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ModelPredictionCreateManyEvaluationRunInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ModelPredictionUncheckedCreateNestedManyWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionUncheckedCreateNestedManyWithoutEvaluationRunInput> = z.object({
  create: z.union([ z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema).array(),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelPredictionCreateOrConnectWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionCreateOrConnectWithoutEvaluationRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ModelPredictionCreateManyEvaluationRunInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TrainedModelUpdateOneRequiredWithoutEvaluationRunsNestedInputSchema: z.ZodType<Prisma.TrainedModelUpdateOneRequiredWithoutEvaluationRunsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutEvaluationRunsInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutEvaluationRunsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TrainedModelCreateOrConnectWithoutEvaluationRunsInputSchema).optional(),
  upsert: z.lazy(() => TrainedModelUpsertWithoutEvaluationRunsInputSchema).optional(),
  connect: z.lazy(() => TrainedModelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TrainedModelUpdateToOneWithWhereWithoutEvaluationRunsInputSchema),z.lazy(() => TrainedModelUpdateWithoutEvaluationRunsInputSchema),z.lazy(() => TrainedModelUncheckedUpdateWithoutEvaluationRunsInputSchema) ]).optional(),
}).strict();

export const ModelPredictionUpdateManyWithoutEvaluationRunNestedInputSchema: z.ZodType<Prisma.ModelPredictionUpdateManyWithoutEvaluationRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema).array(),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelPredictionCreateOrConnectWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionCreateOrConnectWithoutEvaluationRunInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ModelPredictionUpsertWithWhereUniqueWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUpsertWithWhereUniqueWithoutEvaluationRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ModelPredictionCreateManyEvaluationRunInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ModelPredictionUpdateWithWhereUniqueWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUpdateWithWhereUniqueWithoutEvaluationRunInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ModelPredictionUpdateManyWithWhereWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUpdateManyWithWhereWithoutEvaluationRunInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ModelPredictionScalarWhereInputSchema),z.lazy(() => ModelPredictionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ModelPredictionUncheckedUpdateManyWithoutEvaluationRunNestedInputSchema: z.ZodType<Prisma.ModelPredictionUncheckedUpdateManyWithoutEvaluationRunNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema).array(),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelPredictionCreateOrConnectWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionCreateOrConnectWithoutEvaluationRunInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ModelPredictionUpsertWithWhereUniqueWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUpsertWithWhereUniqueWithoutEvaluationRunInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ModelPredictionCreateManyEvaluationRunInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelPredictionWhereUniqueInputSchema),z.lazy(() => ModelPredictionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ModelPredictionUpdateWithWhereUniqueWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUpdateWithWhereUniqueWithoutEvaluationRunInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ModelPredictionUpdateManyWithWhereWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUpdateManyWithWhereWithoutEvaluationRunInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ModelPredictionScalarWhereInputSchema),z.lazy(() => ModelPredictionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EvaluationRunCreateNestedOneWithoutPredictionsInputSchema: z.ZodType<Prisma.EvaluationRunCreateNestedOneWithoutPredictionsInput> = z.object({
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutPredictionsInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutPredictionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EvaluationRunCreateOrConnectWithoutPredictionsInputSchema).optional(),
  connect: z.lazy(() => EvaluationRunWhereUniqueInputSchema).optional()
}).strict();

export const EvaluationRunUpdateOneRequiredWithoutPredictionsNestedInputSchema: z.ZodType<Prisma.EvaluationRunUpdateOneRequiredWithoutPredictionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutPredictionsInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutPredictionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EvaluationRunCreateOrConnectWithoutPredictionsInputSchema).optional(),
  upsert: z.lazy(() => EvaluationRunUpsertWithoutPredictionsInputSchema).optional(),
  connect: z.lazy(() => EvaluationRunWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EvaluationRunUpdateToOneWithWhereWithoutPredictionsInputSchema),z.lazy(() => EvaluationRunUpdateWithoutPredictionsInputSchema),z.lazy(() => EvaluationRunUncheckedUpdateWithoutPredictionsInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedDecimalNullableFilterSchema: z.ZodType<Prisma.NestedDecimalNullableFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDecimalNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional().nullable(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalNullableFilterSchema).optional()
}).strict();

export const NestedEnumPurchaseTypeFilterSchema: z.ZodType<Prisma.NestedEnumPurchaseTypeFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPurchaseTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPurchaseTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PurchaseTypeSchema).optional(),
  in: z.lazy(() => PurchaseTypeSchema).array().optional(),
  notIn: z.lazy(() => PurchaseTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterSchema).optional()
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedDecimalFilterSchema: z.ZodType<Prisma.NestedDecimalFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalFilterSchema) ]).optional(),
}).strict();

export const NestedDecimalWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDecimalWithAggregatesFilter> = z.object({
  equals: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  in: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  notIn: z.union([z.number().array(),z.string().array(),z.instanceof(Decimal).array(),z.instanceof(Prisma.Decimal).array(),DecimalJsLikeSchema.array(),]).refine((v) => Array.isArray(v) && (v as any[]).every((v) => isValidDecimalInput(v)), { message: 'Must be a Decimal' }).optional(),
  lt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  lte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gt: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  gte: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  not: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NestedDecimalWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _sum: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _min: z.lazy(() => NestedDecimalFilterSchema).optional(),
  _max: z.lazy(() => NestedDecimalFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedEnumExperimentRunStatusFilterSchema: z.ZodType<Prisma.NestedEnumExperimentRunStatusFilter> = z.object({
  equals: z.lazy(() => ExperimentRunStatusSchema).optional(),
  in: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => NestedEnumExperimentRunStatusFilterSchema) ]).optional(),
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedEnumExperimentRunStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumExperimentRunStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ExperimentRunStatusSchema).optional(),
  in: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentRunStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => NestedEnumExperimentRunStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumExperimentRunStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumExperimentRunStatusFilterSchema).optional()
}).strict();

export const NestedEnumAnomalyEventStatusFilterSchema: z.ZodType<Prisma.NestedEnumAnomalyEventStatusFilter> = z.object({
  equals: z.lazy(() => AnomalyEventStatusSchema).optional(),
  in: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  notIn: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema) ]).optional(),
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedEnumAnomalyEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumAnomalyEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AnomalyEventStatusSchema).optional(),
  in: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  notIn: z.lazy(() => AnomalyEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => NestedEnumAnomalyEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAnomalyEventStatusFilterSchema).optional()
}).strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountCreateManyUserInputSchema),z.lazy(() => AccountCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AiChatCreateWithoutUserInputSchema: z.ZodType<Prisma.AiChatCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputSchema).optional()
}).strict();

export const AiChatUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AiChatCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AiChatCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AiChatCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AiChatCreateManyUserInputSchema),z.lazy(() => AiChatCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date()
}).strict();

export const InvitationCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InvitationCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyUserInputSchema),z.lazy(() => InvitationCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MemberCreateWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  createdAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const MemberCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyUserInputSchema),z.lazy(() => MemberCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PasskeyCreateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PasskeyCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PasskeyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PasskeyCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PasskeyCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PasskeyCreateManyUserInputSchema),z.lazy(() => PasskeyCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PurchaseCreateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputSchema).optional()
}).strict();

export const PurchaseUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PurchaseCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PurchaseCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PurchaseCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PurchaseCreateManyUserInputSchema),z.lazy(() => PurchaseCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TwoFactorCreateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const TwoFactorUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const TwoFactorCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TwoFactorCreateManyUserInputSchema),z.lazy(() => TwoFactorCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateManyMutationInputSchema),z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AiChatUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AiChatUpdateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AiChatCreateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AiChatUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateWithoutUserInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AiChatUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateManyMutationInputSchema),z.lazy(() => AiChatUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AiChatScalarWhereInputSchema: z.ZodType<Prisma.AiChatScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AiChatScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AiChatScalarWhereInputSchema),z.lazy(() => AiChatScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  messages: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const InvitationScalarWhereInputSchema: z.ZodType<Prisma.InvitationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const MemberUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutUserInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutUserInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const MemberScalarWhereInputSchema: z.ZodType<Prisma.MemberScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PasskeyUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PasskeyUpdateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PasskeyCreateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PasskeyUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PasskeyUpdateWithoutUserInputSchema),z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PasskeyUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PasskeyUpdateManyMutationInputSchema),z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PasskeyScalarWhereInputSchema: z.ZodType<Prisma.PasskeyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasskeyScalarWhereInputSchema),z.lazy(() => PasskeyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  publicKey: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  credentialID: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  counter: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  deviceType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backedUp: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  transports: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const PurchaseUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PurchaseUpdateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PurchaseUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateWithoutUserInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PurchaseUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateManyMutationInputSchema),z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PurchaseScalarWhereInputSchema: z.ZodType<Prisma.PurchaseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PurchaseScalarWhereInputSchema),z.lazy(() => PurchaseScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumPurchaseTypeFilterSchema),z.lazy(() => PurchaseTypeSchema) ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  subscriptionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TwoFactorUpdateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TwoFactorUpdateManyMutationInputSchema),z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorScalarWhereInputSchema: z.ZodType<Prisma.TwoFactorScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserCreateWithoutPasskeysInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPasskeysInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPasskeysInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPasskeysInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]),
}).strict();

export const UserUpsertWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUpsertWithoutPasskeysInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasskeysInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPasskeysInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPasskeysInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputSchema) ]),
}).strict();

export const UserUpdateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUpdateWithoutPasskeysInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPasskeysInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPasskeysInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateWithoutTwofactorsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTwofactorsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]),
}).strict();

export const UserUpsertWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpsertWithoutTwofactorsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]),
}).strict();

export const UserUpdateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpdateWithoutTwofactorsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTwofactorsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const AiChatCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputSchema).optional()
}).strict();

export const AiChatUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AiChatCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.AiChatCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AiChatCreateManyOrganizationInputSchema),z.lazy(() => AiChatCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BankAccountCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutBankAccountsInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.BankAccountCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BankAccountCreateManyOrganizationInputSchema),z.lazy(() => BankAccountCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BorrowGodCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  godName: z.lazy(() => GodNameCreateNestedOneWithoutBorrowGodInputSchema)
}).strict();

export const BorrowGodUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BorrowGodCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BorrowGodWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const BorrowGodCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.BorrowGodCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BorrowGodCreateManyOrganizationInputSchema),z.lazy(() => BorrowGodCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BuddhistCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BuddhistUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BuddhistCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BuddhistWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const BuddhistCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.BuddhistCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BuddhistCreateManyOrganizationInputSchema),z.lazy(() => BuddhistCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyOrganizationInputSchema),z.lazy(() => CustomerCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExpenseCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rm: z.lazy(() => RelationshipManagerCreateNestedOneWithoutExpensesInputSchema).optional()
}).strict();

export const ExpenseUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmId: z.string().optional().nullable()
}).strict();

export const ExpenseCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ExpenseCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseCreateManyOrganizationInputSchema),z.lazy(() => ExpenseCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FamilyCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  familyMembers: z.lazy(() => FamilyMemberCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  familyMembers: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FamilyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FamilyCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const FamilyCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.FamilyCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FamilyCreateManyOrganizationInputSchema),z.lazy(() => FamilyCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FamilyMemberCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutFamilyMembersInputSchema)
}).strict();

export const FamilyMemberUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  familyId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const FamilyMemberCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FamilyMemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const FamilyMemberCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.FamilyMemberCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FamilyMemberCreateManyOrganizationInputSchema),z.lazy(() => FamilyMemberCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const GodNameCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  borrowGod: z.lazy(() => BorrowGodCreateNestedManyWithoutGodNameInputSchema).optional()
}).strict();

export const GodNameUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  borrowGod: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutGodNameInputSchema).optional()
}).strict();

export const GodNameCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => GodNameWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GodNameCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const GodNameCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.GodNameCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => GodNameCreateManyOrganizationInputSchema),z.lazy(() => GodNameCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InvitationCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyOrganizationInputSchema),z.lazy(() => InvitationCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MemberCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  createdAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyOrganizationInputSchema),z.lazy(() => MemberCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MemberClassCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const MemberClassUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const MemberClassCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberClassWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberClassCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.MemberClassCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberClassCreateManyOrganizationInputSchema),z.lazy(() => MemberClassCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MgYearCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const MgYearUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const MgYearCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MgYearWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MgYearCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MgYearCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.MgYearCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MgYearCreateManyOrganizationInputSchema),z.lazy(() => MgYearCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutProductInputSchema).optional()
}).strict();

export const ProductCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProductCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ProductCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductCreateManyOrganizationInputSchema),z.lazy(() => ProductCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProfitSharingCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountCreateNestedOneWithoutProfitSharingInputSchema).optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutProfitSharingInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProfitSharingCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.ProfitSharingCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfitSharingCreateManyOrganizationInputSchema),z.lazy(() => ProfitSharingCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PurchaseCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputSchema).optional()
}).strict();

export const PurchaseUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PurchaseCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.PurchaseCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PurchaseCreateManyOrganizationInputSchema),z.lazy(() => PurchaseCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RelationshipManagerCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.RelationshipManagerCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RelationshipManagerCreateManyOrganizationInputSchema),z.lazy(() => RelationshipManagerCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Service1CreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1CreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1UncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1UncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1CreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1CreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Service1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Service1CreateWithoutOrganizationInputSchema),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Service1CreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.Service1CreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Service1CreateManyOrganizationInputSchema),z.lazy(() => Service1CreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Service2CreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2CreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service1: z.lazy(() => Service1CreateNestedOneWithoutService2InputSchema),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2UncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2UncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2CreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2CreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Service2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Service2CreateWithoutOrganizationInputSchema),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Service2CreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.Service2CreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Service2CreateManyOrganizationInputSchema),z.lazy(() => Service2CreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Servicing1CreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1CreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1UncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1CreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1CreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Servicing1CreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.Servicing1CreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Servicing1CreateManyOrganizationInputSchema),z.lazy(() => Servicing1CreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Servicing2CreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2CreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing2InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const Servicing2UncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2CreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2CreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Servicing2CreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.Servicing2CreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Servicing2CreateManyOrganizationInputSchema),z.lazy(() => Servicing2CreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TempleCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const TempleUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const TempleCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TempleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TempleCreateWithoutOrganizationInputSchema),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const TempleCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.TempleCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TempleCreateManyOrganizationInputSchema),z.lazy(() => TempleCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AiChatUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AiChatUpdateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => AiChatCreateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateWithoutOrganizationInputSchema),z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const AiChatUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AiChatUpdateManyMutationInputSchema),z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BankAccountUpdateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BankAccountUpdateWithoutOrganizationInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BankAccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BankAccountUpdateManyMutationInputSchema),z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const BankAccountScalarWhereInputSchema: z.ZodType<Prisma.BankAccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BankAccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BankAccountScalarWhereInputSchema),z.lazy(() => BankAccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accountNumber: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  balance: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  customerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const BorrowGodUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BorrowGodWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BorrowGodUpdateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const BorrowGodUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BorrowGodWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BorrowGodUpdateWithoutOrganizationInputSchema),z.lazy(() => BorrowGodUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const BorrowGodUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BorrowGodScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BorrowGodUpdateManyMutationInputSchema),z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const BorrowGodScalarWhereInputSchema: z.ZodType<Prisma.BorrowGodScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BorrowGodScalarWhereInputSchema),z.lazy(() => BorrowGodScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BorrowGodScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BorrowGodScalarWhereInputSchema),z.lazy(() => BorrowGodScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  godNameId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyName: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  typeId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const BuddhistUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BuddhistWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BuddhistUpdateWithoutOrganizationInputSchema),z.lazy(() => BuddhistUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => BuddhistCreateWithoutOrganizationInputSchema),z.lazy(() => BuddhistUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const BuddhistUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BuddhistWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BuddhistUpdateWithoutOrganizationInputSchema),z.lazy(() => BuddhistUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const BuddhistUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => BuddhistScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BuddhistUpdateManyMutationInputSchema),z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const BuddhistScalarWhereInputSchema: z.ZodType<Prisma.BuddhistScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BuddhistScalarWhereInputSchema),z.lazy(() => BuddhistScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BuddhistScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BuddhistScalarWhereInputSchema),z.lazy(() => BuddhistScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  templeNowText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutOrganizationInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const CustomerScalarWhereInputSchema: z.ZodType<Prisma.CustomerScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerScalarWhereInputSchema),z.lazy(() => CustomerScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  finder1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ExpenseUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutOrganizationInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateManyMutationInputSchema),z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ExpenseScalarWhereInputSchema: z.ZodType<Prisma.ExpenseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExpenseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExpenseScalarWhereInputSchema),z.lazy(() => ExpenseScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  exchangeRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  receiptUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  receiptUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  sgdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdAmount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  usdRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const FamilyUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FamilyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FamilyUpdateWithoutOrganizationInputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => FamilyCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const FamilyUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FamilyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FamilyUpdateWithoutOrganizationInputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const FamilyUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FamilyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FamilyUpdateManyMutationInputSchema),z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const FamilyScalarWhereInputSchema: z.ZodType<Prisma.FamilyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FamilyScalarWhereInputSchema),z.lazy(() => FamilyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FamilyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FamilyScalarWhereInputSchema),z.lazy(() => FamilyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mobile: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  postalCode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FamilyMemberUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FamilyMemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FamilyMemberUpdateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const FamilyMemberUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FamilyMemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FamilyMemberUpdateWithoutOrganizationInputSchema),z.lazy(() => FamilyMemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const FamilyMemberUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => FamilyMemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FamilyMemberUpdateManyMutationInputSchema),z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const FamilyMemberScalarWhereInputSchema: z.ZodType<Prisma.FamilyMemberScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FamilyMemberScalarWhereInputSchema),z.lazy(() => FamilyMemberScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FamilyMemberScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FamilyMemberScalarWhereInputSchema),z.lazy(() => FamilyMemberScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birthday: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lunarDate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gender: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  note: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mainPerson: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mailThis: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isLive: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  postcode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const GodNameUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => GodNameWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => GodNameUpdateWithoutOrganizationInputSchema),z.lazy(() => GodNameUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => GodNameCreateWithoutOrganizationInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const GodNameUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => GodNameWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => GodNameUpdateWithoutOrganizationInputSchema),z.lazy(() => GodNameUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const GodNameUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => GodNameScalarWhereInputSchema),
  data: z.union([ z.lazy(() => GodNameUpdateManyMutationInputSchema),z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const GodNameScalarWhereInputSchema: z.ZodType<Prisma.GodNameScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GodNameScalarWhereInputSchema),z.lazy(() => GodNameScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GodNameScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GodNameScalarWhereInputSchema),z.lazy(() => GodNameScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberClassUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberClassWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberClassUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberClassUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => MemberClassCreateWithoutOrganizationInputSchema),z.lazy(() => MemberClassUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberClassUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberClassWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberClassUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberClassUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberClassUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberClassScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberClassUpdateManyMutationInputSchema),z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberClassScalarWhereInputSchema: z.ZodType<Prisma.MemberClassScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberClassScalarWhereInputSchema),z.lazy(() => MemberClassScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberClassScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberClassScalarWhereInputSchema),z.lazy(() => MemberClassScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MgYearUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MgYearWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MgYearUpdateWithoutOrganizationInputSchema),z.lazy(() => MgYearUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => MgYearCreateWithoutOrganizationInputSchema),z.lazy(() => MgYearUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MgYearUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MgYearWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MgYearUpdateWithoutOrganizationInputSchema),z.lazy(() => MgYearUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const MgYearUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MgYearScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MgYearUpdateManyMutationInputSchema),z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const MgYearScalarWhereInputSchema: z.ZodType<Prisma.MgYearScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MgYearScalarWhereInputSchema),z.lazy(() => MgYearScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MgYearScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MgYearScalarWhereInputSchema),z.lazy(() => MgYearScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgyear: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductUpdateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProductUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateWithoutOrganizationInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProductUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProductScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductUpdateManyMutationInputSchema),z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ProductScalarWhereInputSchema: z.ZodType<Prisma.ProductScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductScalarWhereInputSchema),z.lazy(() => ProductScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  distributionType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateWithoutOrganizationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const ProfitSharingUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => ProfitSharingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateManyMutationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const ProfitSharingScalarWhereInputSchema: z.ZodType<Prisma.ProfitSharingScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProfitSharingScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProfitSharingScalarWhereInputSchema),z.lazy(() => ProfitSharingScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  bankAccountId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  productId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profitDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  companyProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenue: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  directTradeBookingFee: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finderProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  findersRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  fxRate: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmProfitSharePercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueOriginal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  rmRevenueUSD: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  shareable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  finder1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2Name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  companyFeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.lazy(() => DecimalNullableFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional().nullable(),
}).strict();

export const PurchaseUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PurchaseUpdateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => PurchaseCreateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateWithoutOrganizationInputSchema),z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const PurchaseUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PurchaseUpdateManyMutationInputSchema),z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutOrganizationInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RelationshipManagerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateManyMutationInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const RelationshipManagerScalarWhereInputSchema: z.ZodType<Prisma.RelationshipManagerScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RelationshipManagerScalarWhereInputSchema),z.lazy(() => RelationshipManagerScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RelationshipManagerScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RelationshipManagerScalarWhereInputSchema),z.lazy(() => RelationshipManagerScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  joinDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resignDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const Service1UpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1UpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Service1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Service1UpdateWithoutOrganizationInputSchema),z.lazy(() => Service1UncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => Service1CreateWithoutOrganizationInputSchema),z.lazy(() => Service1UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Service1UpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1UpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Service1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Service1UpdateWithoutOrganizationInputSchema),z.lazy(() => Service1UncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const Service1UpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1UpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Service1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Service1UpdateManyMutationInputSchema),z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const Service1ScalarWhereInputSchema: z.ZodType<Prisma.Service1ScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Service1ScalarWhereInputSchema),z.lazy(() => Service1ScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Service1ScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Service1ScalarWhereInputSchema),z.lazy(() => Service1ScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Service2UpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2UpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Service2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Service2UpdateWithoutOrganizationInputSchema),z.lazy(() => Service2UncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => Service2CreateWithoutOrganizationInputSchema),z.lazy(() => Service2UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Service2UpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2UpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Service2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Service2UpdateWithoutOrganizationInputSchema),z.lazy(() => Service2UncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const Service2UpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2UpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Service2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Service2UpdateManyMutationInputSchema),z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const Service2ScalarWhereInputSchema: z.ZodType<Prisma.Service2ScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Service2ScalarWhereInputSchema),z.lazy(() => Service2ScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Service2ScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Service2ScalarWhereInputSchema),z.lazy(() => Service2ScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  nowUse: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Servicing1UpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1UpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Servicing1UpdateWithoutOrganizationInputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Servicing1UpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1UpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Servicing1UpdateWithoutOrganizationInputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const Servicing1UpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1UpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Servicing1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Servicing1UpdateManyMutationInputSchema),z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const Servicing1ScalarWhereInputSchema: z.ZodType<Prisma.Servicing1ScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Servicing1ScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Servicing1ScalarWhereInputSchema),z.lazy(() => Servicing1ScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applyDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  applyText: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cellphone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accReceivable: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accReceived: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  accPending: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  payStatus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payMethod: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payCurrency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  receiptNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  booksNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  payee: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  advisePeople: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Servicing2UpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2UpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Servicing2UpdateWithoutOrganizationInputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutOrganizationInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Servicing2UpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2UpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateWithoutOrganizationInputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const Servicing2UpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateManyMutationInputSchema),z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const Servicing2ScalarWhereInputSchema: z.ZodType<Prisma.Servicing2ScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Servicing2ScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Servicing2ScalarWhereInputSchema),z.lazy(() => Servicing2ScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  familyId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  servicing1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ordernum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  year: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service1Id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  service2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  praytypeId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType1Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printType2Id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  livename: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people1: z.lazy(() => JsonNullableFilterSchema).optional(),
  passname: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  passname4: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  people0: z.lazy(() => JsonNullableFilterSchema).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sexualText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  liveYear: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  boxNum: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rowTotal: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  bornYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornMonth: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornDay: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  bornTime: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addr: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ps: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TempleUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TempleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TempleUpdateWithoutOrganizationInputSchema),z.lazy(() => TempleUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => TempleCreateWithoutOrganizationInputSchema),z.lazy(() => TempleUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const TempleUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TempleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TempleUpdateWithoutOrganizationInputSchema),z.lazy(() => TempleUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const TempleUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TempleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TempleUpdateManyMutationInputSchema),z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const TempleScalarWhereInputSchema: z.ZodType<Prisma.TempleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TempleScalarWhereInputSchema),z.lazy(() => TempleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TempleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TempleScalarWhereInputSchema),z.lazy(() => TempleScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomerCreateWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerCreateWithoutFinder1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutFinder1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutFinder1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema) ]),
}).strict();

export const CustomerCreateManyFinder1InputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyFinder1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyFinder1InputSchema),z.lazy(() => CustomerCreateManyFinder1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerCreateWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerCreateWithoutFinder2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutFinder2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutFinder2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema) ]),
}).strict();

export const CustomerCreateManyFinder2InputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyFinder2InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyFinder2InputSchema),z.lazy(() => CustomerCreateManyFinder2InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerCreateWithoutRm1InputSchema: z.ZodType<Prisma.CustomerCreateWithoutRm1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutRm1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutRm1InputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutRm1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema) ]),
}).strict();

export const CustomerCreateManyRm1InputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyRm1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyRm1InputSchema),z.lazy(() => CustomerCreateManyRm1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerCreateWithoutRm2InputSchema: z.ZodType<Prisma.CustomerCreateWithoutRm2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutRm2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutRm2InputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutRm2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema) ]),
}).strict();

export const CustomerCreateManyRm2InputEnvelopeSchema: z.ZodType<Prisma.CustomerCreateManyRm2InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerCreateManyRm2InputSchema),z.lazy(() => CustomerCreateManyRm2InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExpenseCreateWithoutRmInputSchema: z.ZodType<Prisma.ExpenseCreateWithoutRmInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutExpensesInputSchema)
}).strict();

export const ExpenseUncheckedCreateWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUncheckedCreateWithoutRmInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const ExpenseCreateOrConnectWithoutRmInputSchema: z.ZodType<Prisma.ExpenseCreateOrConnectWithoutRmInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema) ]),
}).strict();

export const ExpenseCreateManyRmInputEnvelopeSchema: z.ZodType<Prisma.ExpenseCreateManyRmInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ExpenseCreateManyRmInputSchema),z.lazy(() => ExpenseCreateManyRmInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutRelationshipManagersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutRelationshipManagersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutRelationshipManagersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema) ]),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutFinder1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutFinder1InputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder1InputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutFinder1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutFinder1InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutFinder1InputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutFinder1Input> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1InputSchema) ]),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutFinder2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutFinder2InputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutFinder2InputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutFinder2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutFinder2InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutFinder2InputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutFinder2Input> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2InputSchema) ]),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutRm1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutRm1InputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm1InputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutRm1Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutRm1InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutRm1InputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutRm1Input> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1InputSchema) ]),
}).strict();

export const CustomerUpsertWithWhereUniqueWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUpsertWithWhereUniqueWithoutRm2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerUpdateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutRm2InputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedCreateWithoutRm2InputSchema) ]),
}).strict();

export const CustomerUpdateWithWhereUniqueWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUpdateWithWhereUniqueWithoutRm2Input> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutRm2InputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutRm2InputSchema) ]),
}).strict();

export const CustomerUpdateManyWithWhereWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUpdateManyWithWhereWithoutRm2Input> = z.object({
  where: z.lazy(() => CustomerScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerUpdateManyMutationInputSchema),z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2InputSchema) ]),
}).strict();

export const ExpenseUpsertWithWhereUniqueWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUpsertWithWhereUniqueWithoutRmInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ExpenseUpdateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutRmInputSchema) ]),
  create: z.union([ z.lazy(() => ExpenseCreateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedCreateWithoutRmInputSchema) ]),
}).strict();

export const ExpenseUpdateWithWhereUniqueWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUpdateWithWhereUniqueWithoutRmInput> = z.object({
  where: z.lazy(() => ExpenseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateWithoutRmInputSchema),z.lazy(() => ExpenseUncheckedUpdateWithoutRmInputSchema) ]),
}).strict();

export const ExpenseUpdateManyWithWhereWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUpdateManyWithWhereWithoutRmInput> = z.object({
  where: z.lazy(() => ExpenseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ExpenseUpdateManyMutationInputSchema),z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutRelationshipManagersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRelationshipManagersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRelationshipManagersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutRelationshipManagersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutRelationshipManagersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRelationshipManagersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutRelationshipManagersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutRelationshipManagersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutRelationshipManagersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const AssetTransactionCreateWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AssetTransactionUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AssetTransactionCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionCreateOrConnectWithoutCustomerInput> = z.object({
  where: z.lazy(() => AssetTransactionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const AssetTransactionCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.AssetTransactionCreateManyCustomerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AssetTransactionCreateManyCustomerInputSchema),z.lazy(() => AssetTransactionCreateManyCustomerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const BankAccountCreateWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBankAccountsInputSchema),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutBankAccountInputSchema).optional()
}).strict();

export const BankAccountCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountCreateOrConnectWithoutCustomerInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const BankAccountCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.BankAccountCreateManyCustomerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BankAccountCreateManyCustomerInputSchema),z.lazy(() => BankAccountCreateManyCustomerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RelationshipManagerCreateWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutFinder1CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutFinder1CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutFinder1CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerCreateWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutFinder2CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutFinder2CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutFinder2CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutCustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutCustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutCustomersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]),
}).strict();

export const RelationshipManagerCreateWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutRm1CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutRm1CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutRm1CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerCreateWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutRm2CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutRmInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutRm2CustomersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutRmInputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutRm2CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema) ]),
}).strict();

export const ProfitSharingCreateWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountCreateNestedOneWithoutProfitSharingInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProfitSharingInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateWithoutCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingCreateOrConnectWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingCreateOrConnectWithoutCustomerInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const ProfitSharingCreateManyCustomerInputEnvelopeSchema: z.ZodType<Prisma.ProfitSharingCreateManyCustomerInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfitSharingCreateManyCustomerInputSchema),z.lazy(() => ProfitSharingCreateManyCustomerInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AssetTransactionUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUpsertWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => AssetTransactionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AssetTransactionUpdateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedUpdateWithoutCustomerInputSchema) ]),
  create: z.union([ z.lazy(() => AssetTransactionCreateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const AssetTransactionUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUpdateWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => AssetTransactionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AssetTransactionUpdateWithoutCustomerInputSchema),z.lazy(() => AssetTransactionUncheckedUpdateWithoutCustomerInputSchema) ]),
}).strict();

export const AssetTransactionUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUpdateManyWithWhereWithoutCustomerInput> = z.object({
  where: z.lazy(() => AssetTransactionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AssetTransactionUpdateManyMutationInputSchema),z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerInputSchema) ]),
}).strict();

export const AssetTransactionScalarWhereInputSchema: z.ZodType<Prisma.AssetTransactionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AssetTransactionScalarWhereInputSchema),z.lazy(() => AssetTransactionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AssetTransactionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AssetTransactionScalarWhereInputSchema),z.lazy(() => AssetTransactionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  customerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  currency: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  amount: z.union([ z.lazy(() => DecimalFilterSchema),z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }) ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const BankAccountUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUpsertWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BankAccountUpdateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutCustomerInputSchema) ]),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const BankAccountUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUpdateWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BankAccountUpdateWithoutCustomerInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutCustomerInputSchema) ]),
}).strict();

export const BankAccountUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUpdateManyWithWhereWithoutCustomerInput> = z.object({
  where: z.lazy(() => BankAccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BankAccountUpdateManyMutationInputSchema),z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerInputSchema) ]),
}).strict();

export const RelationshipManagerUpsertWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutFinder1CustomersInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder1CustomersInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutFinder1CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutFinder1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutFinder1CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutFinder1CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUpsertWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutFinder2CustomersInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutFinder2CustomersInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutFinder2CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutFinder2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutFinder2CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutFinder2CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutCustomersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutCustomersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutCustomersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutCustomersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutCustomersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutCustomersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutCustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUpsertWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutRm1CustomersInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm1CustomersInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm1CustomersInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutRm1CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutRm1CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm1CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutRm1CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutRm1CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutRm1CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUpsertWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutRm2CustomersInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm2CustomersInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutRm2CustomersInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutRm2CustomersInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutRm2CustomersInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutRm2CustomersInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutRm2CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutRm2CustomersInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutRm2CustomersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const ProfitSharingUpsertWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUpsertWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutCustomerInputSchema) ]),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutCustomerInputSchema) ]),
}).strict();

export const ProfitSharingUpdateWithWhereUniqueWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithWhereUniqueWithoutCustomerInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateWithoutCustomerInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutCustomerInputSchema) ]),
}).strict();

export const ProfitSharingUpdateManyWithWhereWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithWhereWithoutCustomerInput> = z.object({
  where: z.lazy(() => ProfitSharingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateManyMutationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]),
}).strict();

export const UserCreateWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutMembersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMembersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutMembersInputSchema: z.ZodType<Prisma.UserUpsertWithoutMembersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutMembersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]),
}).strict();

export const UserUpdateWithoutMembersInputSchema: z.ZodType<Prisma.UserUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutMembersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutMembersInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutPurchasesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]),
}).strict();

export const UserCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPurchasesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPurchasesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPurchasesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutPurchasesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutPurchasesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutPurchasesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUpsertWithoutPurchasesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedCreateWithoutPurchasesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPurchasesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPurchasesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputSchema) ]),
}).strict();

export const UserUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPurchasesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPurchasesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutAiChatsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]),
}).strict();

export const UserCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAiChatsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAiChatsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAiChatsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutAiChatsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutAiChatsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutAiChatsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAiChatsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAiChatsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAiChatsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAiChatsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAiChatsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAiChatsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboardingComplete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  locale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const CustomerCreateWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerCreateWithoutBankAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutBankAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutBankAccountsInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutBankAccountsInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutBankAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutBankAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutBankAccountsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBankAccountsInputSchema) ]),
}).strict();

export const ProfitSharingCreateWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingCreateWithoutBankAccountInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutProfitSharingInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProfitSharingInputSchema),
  product: z.lazy(() => ProductCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateWithoutBankAccountInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingCreateOrConnectWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingCreateOrConnectWithoutBankAccountInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema) ]),
}).strict();

export const ProfitSharingCreateManyBankAccountInputEnvelopeSchema: z.ZodType<Prisma.ProfitSharingCreateManyBankAccountInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfitSharingCreateManyBankAccountInputSchema),z.lazy(() => ProfitSharingCreateManyBankAccountInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerUpsertWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUpsertWithoutBankAccountsInput> = z.object({
  update: z.union([ z.lazy(() => CustomerUpdateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutBankAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutBankAccountsInputSchema) ]),
  where: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerUpdateToOneWithWhereWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUpdateToOneWithWhereWithoutBankAccountsInput> = z.object({
  where: z.lazy(() => CustomerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutBankAccountsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutBankAccountsInputSchema) ]),
}).strict();

export const CustomerUpdateWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutBankAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutBankAccountsInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutBankAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutBankAccountsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBankAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBankAccountsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutBankAccountsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutBankAccountsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBankAccountsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutBankAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutBankAccountsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutBankAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUpsertWithWhereUniqueWithoutBankAccountInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutBankAccountInputSchema) ]),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutBankAccountInputSchema) ]),
}).strict();

export const ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithWhereUniqueWithoutBankAccountInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateWithoutBankAccountInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutBankAccountInputSchema) ]),
}).strict();

export const ProfitSharingUpdateManyWithWhereWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithWhereWithoutBankAccountInput> = z.object({
  where: z.lazy(() => ProfitSharingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateManyMutationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutBankAccountInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutExpensesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]),
}).strict();

export const RelationshipManagerCreateWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerCreateNestedManyWithoutRm2InputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRelationshipManagersInputSchema)
}).strict();

export const RelationshipManagerUncheckedCreateWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedCreateWithoutExpensesInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder1InputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutFinder2InputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm1InputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutRm2InputSchema).optional()
}).strict();

export const RelationshipManagerCreateOrConnectWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerCreateOrConnectWithoutExpensesInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutExpensesInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutExpensesInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutExpensesInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutExpensesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutExpensesInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutExpensesInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUpsertWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUpsertWithoutExpensesInput> = z.object({
  update: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutExpensesInputSchema) ]),
  create: z.union([ z.lazy(() => RelationshipManagerCreateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedCreateWithoutExpensesInputSchema) ]),
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional()
}).strict();

export const RelationshipManagerUpdateToOneWithWhereWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateToOneWithWhereWithoutExpensesInput> = z.object({
  where: z.lazy(() => RelationshipManagerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RelationshipManagerUpdateWithoutExpensesInputSchema),z.lazy(() => RelationshipManagerUncheckedUpdateWithoutExpensesInputSchema) ]),
}).strict();

export const RelationshipManagerUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutRelationshipManagersNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutExpensesInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutExpensesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutProductsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutProductsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutProductsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProductsInputSchema) ]),
}).strict();

export const ProfitSharingCreateWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingCreateWithoutProductInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountCreateNestedOneWithoutProfitSharingInputSchema).optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutProfitSharingInputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProfitSharingInputSchema)
}).strict();

export const ProfitSharingUncheckedCreateWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedCreateWithoutProductInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingCreateOrConnectWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingCreateOrConnectWithoutProductInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const ProfitSharingCreateManyProductInputEnvelopeSchema: z.ZodType<Prisma.ProfitSharingCreateManyProductInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProfitSharingCreateManyProductInputSchema),z.lazy(() => ProfitSharingCreateManyProductInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutProductsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProductsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProductsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutProductsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutProductsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProductsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutProductsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutProductsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ProfitSharingUpsertWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUpsertWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProfitSharingUpdateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutProductInputSchema) ]),
  create: z.union([ z.lazy(() => ProfitSharingCreateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedCreateWithoutProductInputSchema) ]),
}).strict();

export const ProfitSharingUpdateWithWhereUniqueWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithWhereUniqueWithoutProductInput> = z.object({
  where: z.lazy(() => ProfitSharingWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateWithoutProductInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateWithoutProductInputSchema) ]),
}).strict();

export const ProfitSharingUpdateManyWithWhereWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUpdateManyWithWhereWithoutProductInput> = z.object({
  where: z.lazy(() => ProfitSharingScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProfitSharingUpdateManyMutationInputSchema),z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutProductInputSchema) ]),
}).strict();

export const BankAccountCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customer: z.lazy(() => CustomerCreateNestedOneWithoutBankAccountsInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBankAccountsInputSchema)
}).strict();

export const BankAccountUncheckedCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUncheckedCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable()
}).strict();

export const BankAccountCreateOrConnectWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountCreateOrConnectWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => BankAccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutProfitSharingInputSchema) ]),
}).strict();

export const CustomerCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutProfitSharingInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProfitSharingInputSchema) ]),
}).strict();

export const ProductCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutProductsInputSchema)
}).strict();

export const ProductUncheckedCreateWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUncheckedCreateWithoutProfitSharingInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string()
}).strict();

export const ProductCreateOrConnectWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductCreateOrConnectWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => ProductWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductCreateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutProfitSharingInputSchema) ]),
}).strict();

export const BankAccountUpsertWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUpsertWithoutProfitSharingInput> = z.object({
  update: z.union([ z.lazy(() => BankAccountUpdateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutProfitSharingInputSchema) ]),
  create: z.union([ z.lazy(() => BankAccountCreateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedCreateWithoutProfitSharingInputSchema) ]),
  where: z.lazy(() => BankAccountWhereInputSchema).optional()
}).strict();

export const BankAccountUpdateToOneWithWhereWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUpdateToOneWithWhereWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => BankAccountWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => BankAccountUpdateWithoutProfitSharingInputSchema),z.lazy(() => BankAccountUncheckedUpdateWithoutProfitSharingInputSchema) ]),
}).strict();

export const BankAccountUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneWithoutBankAccountsNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBankAccountsNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CustomerUpsertWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUpsertWithoutProfitSharingInput> = z.object({
  update: z.union([ z.lazy(() => CustomerUpdateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutProfitSharingInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutProfitSharingInputSchema) ]),
  where: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerUpdateToOneWithWhereWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUpdateToOneWithWhereWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => CustomerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutProfitSharingInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutProfitSharingInputSchema) ]),
}).strict();

export const CustomerUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutProfitSharingInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProfitSharingInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutProfitSharingInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutProfitSharingInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutProfitSharingInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ProductUpsertWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUpsertWithoutProfitSharingInput> = z.object({
  update: z.union([ z.lazy(() => ProductUpdateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutProfitSharingInputSchema) ]),
  create: z.union([ z.lazy(() => ProductCreateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedCreateWithoutProfitSharingInputSchema) ]),
  where: z.lazy(() => ProductWhereInputSchema).optional()
}).strict();

export const ProductUpdateToOneWithWhereWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUpdateToOneWithWhereWithoutProfitSharingInput> = z.object({
  where: z.lazy(() => ProductWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductUpdateWithoutProfitSharingInputSchema),z.lazy(() => ProductUncheckedUpdateWithoutProfitSharingInputSchema) ]),
}).strict();

export const ProductUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProductsNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutProfitSharingInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutProfitSharingInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerCreateWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerCreateWithoutAssetTransactionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutCustomerInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder1CustomersInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutFinder2CustomersInputSchema).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutCustomersInputSchema),
  rm1: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm1CustomersInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerCreateNestedOneWithoutRm2CustomersInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerUncheckedCreateWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUncheckedCreateWithoutAssetTransactionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutCustomerInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutCustomerInputSchema).optional()
}).strict();

export const CustomerCreateOrConnectWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerCreateOrConnectWithoutAssetTransactionsInput> = z.object({
  where: z.lazy(() => CustomerWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerCreateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutAssetTransactionsInputSchema) ]),
}).strict();

export const CustomerUpsertWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUpsertWithoutAssetTransactionsInput> = z.object({
  update: z.union([ z.lazy(() => CustomerUpdateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutAssetTransactionsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerCreateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedCreateWithoutAssetTransactionsInputSchema) ]),
  where: z.lazy(() => CustomerWhereInputSchema).optional()
}).strict();

export const CustomerUpdateToOneWithWhereWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUpdateToOneWithWhereWithoutAssetTransactionsInput> = z.object({
  where: z.lazy(() => CustomerWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomerUpdateWithoutAssetTransactionsInputSchema),z.lazy(() => CustomerUncheckedUpdateWithoutAssetTransactionsInputSchema) ]),
}).strict();

export const CustomerUpdateWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutAssetTransactionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutAssetTransactionsInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutAssetTransactionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const AnomalyEventCreateWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventCreateWithoutExperimentRunInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  eventLabelLinks: z.lazy(() => EventLabelLinkCreateNestedManyWithoutAnomalyEventInputSchema).optional()
}).strict();

export const AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedCreateWithoutExperimentRunInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  eventLabelLinks: z.lazy(() => EventLabelLinkUncheckedCreateNestedManyWithoutAnomalyEventInputSchema).optional()
}).strict();

export const AnomalyEventCreateOrConnectWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventCreateOrConnectWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => AnomalyEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema) ]),
}).strict();

export const AnomalyEventCreateManyExperimentRunInputEnvelopeSchema: z.ZodType<Prisma.AnomalyEventCreateManyExperimentRunInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AnomalyEventCreateManyExperimentRunInputSchema),z.lazy(() => AnomalyEventCreateManyExperimentRunInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TrainedModelCreateWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelCreateWithoutExperimentRunInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  modelPath: z.string().optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  evaluationRuns: z.lazy(() => EvaluationRunCreateNestedManyWithoutTrainedModelInputSchema).optional()
}).strict();

export const TrainedModelUncheckedCreateWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUncheckedCreateWithoutExperimentRunInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  modelPath: z.string().optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  evaluationRuns: z.lazy(() => EvaluationRunUncheckedCreateNestedManyWithoutTrainedModelInputSchema).optional()
}).strict();

export const TrainedModelCreateOrConnectWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelCreateOrConnectWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => TrainedModelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema) ]),
}).strict();

export const TrainedModelCreateManyExperimentRunInputEnvelopeSchema: z.ZodType<Prisma.TrainedModelCreateManyExperimentRunInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TrainedModelCreateManyExperimentRunInputSchema),z.lazy(() => TrainedModelCreateManyExperimentRunInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AnomalyEventUpsertWithWhereUniqueWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventUpsertWithWhereUniqueWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => AnomalyEventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AnomalyEventUpdateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUncheckedUpdateWithoutExperimentRunInputSchema) ]),
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutExperimentRunInputSchema) ]),
}).strict();

export const AnomalyEventUpdateWithWhereUniqueWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventUpdateWithWhereUniqueWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => AnomalyEventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AnomalyEventUpdateWithoutExperimentRunInputSchema),z.lazy(() => AnomalyEventUncheckedUpdateWithoutExperimentRunInputSchema) ]),
}).strict();

export const AnomalyEventUpdateManyWithWhereWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventUpdateManyWithWhereWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => AnomalyEventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AnomalyEventUpdateManyMutationInputSchema),z.lazy(() => AnomalyEventUncheckedUpdateManyWithoutExperimentRunInputSchema) ]),
}).strict();

export const AnomalyEventScalarWhereInputSchema: z.ZodType<Prisma.AnomalyEventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AnomalyEventScalarWhereInputSchema),z.lazy(() => AnomalyEventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnomalyEventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnomalyEventScalarWhereInputSchema),z.lazy(() => AnomalyEventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  meterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventTimestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  detectionRule: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  dataWindow: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumAnomalyEventStatusFilterSchema),z.lazy(() => AnomalyEventStatusSchema) ]).optional(),
  reviewerId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reviewTimestamp: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  justificationNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  experimentRunId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TrainedModelUpsertWithWhereUniqueWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUpsertWithWhereUniqueWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => TrainedModelWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TrainedModelUpdateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedUpdateWithoutExperimentRunInputSchema) ]),
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutExperimentRunInputSchema) ]),
}).strict();

export const TrainedModelUpdateWithWhereUniqueWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUpdateWithWhereUniqueWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => TrainedModelWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TrainedModelUpdateWithoutExperimentRunInputSchema),z.lazy(() => TrainedModelUncheckedUpdateWithoutExperimentRunInputSchema) ]),
}).strict();

export const TrainedModelUpdateManyWithWhereWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUpdateManyWithWhereWithoutExperimentRunInput> = z.object({
  where: z.lazy(() => TrainedModelScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TrainedModelUpdateManyMutationInputSchema),z.lazy(() => TrainedModelUncheckedUpdateManyWithoutExperimentRunInputSchema) ]),
}).strict();

export const TrainedModelScalarWhereInputSchema: z.ZodType<Prisma.TrainedModelScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TrainedModelScalarWhereInputSchema),z.lazy(() => TrainedModelScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TrainedModelScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TrainedModelScalarWhereInputSchema),z.lazy(() => TrainedModelScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  scenarioType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  experimentRunId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelConfig: z.lazy(() => JsonFilterSchema).optional(),
  dataSourceConfig: z.lazy(() => JsonFilterSchema).optional(),
  modelPath: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  trainingMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ExperimentRunCreateWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunCreateWithoutAnomalyEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  trainedModels: z.lazy(() => TrainedModelCreateNestedManyWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedCreateWithoutAnomalyEventsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  trainedModels: z.lazy(() => TrainedModelUncheckedCreateNestedManyWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunCreateOrConnectWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunCreateOrConnectWithoutAnomalyEventsInput> = z.object({
  where: z.lazy(() => ExperimentRunWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema) ]),
}).strict();

export const EventLabelLinkCreateWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkCreateWithoutAnomalyEventInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date().optional(),
  anomalyLabel: z.lazy(() => AnomalyLabelCreateNestedOneWithoutEventLabelLinksInputSchema)
}).strict();

export const EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedCreateWithoutAnomalyEventInput> = z.object({
  id: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const EventLabelLinkCreateOrConnectWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkCreateOrConnectWithoutAnomalyEventInput> = z.object({
  where: z.lazy(() => EventLabelLinkWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema) ]),
}).strict();

export const EventLabelLinkCreateManyAnomalyEventInputEnvelopeSchema: z.ZodType<Prisma.EventLabelLinkCreateManyAnomalyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventLabelLinkCreateManyAnomalyEventInputSchema),z.lazy(() => EventLabelLinkCreateManyAnomalyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExperimentRunUpsertWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUpsertWithoutAnomalyEventsInput> = z.object({
  update: z.union([ z.lazy(() => ExperimentRunUpdateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutAnomalyEventsInputSchema) ]),
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutAnomalyEventsInputSchema) ]),
  where: z.lazy(() => ExperimentRunWhereInputSchema).optional()
}).strict();

export const ExperimentRunUpdateToOneWithWhereWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUpdateToOneWithWhereWithoutAnomalyEventsInput> = z.object({
  where: z.lazy(() => ExperimentRunWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ExperimentRunUpdateWithoutAnomalyEventsInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutAnomalyEventsInputSchema) ]),
}).strict();

export const ExperimentRunUpdateWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUpdateWithoutAnomalyEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  trainedModels: z.lazy(() => TrainedModelUpdateManyWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedUpdateWithoutAnomalyEventsInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedUpdateWithoutAnomalyEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  trainedModels: z.lazy(() => TrainedModelUncheckedUpdateManyWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyEventInput> = z.object({
  where: z.lazy(() => EventLabelLinkWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventLabelLinkUpdateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUncheckedUpdateWithoutAnomalyEventInputSchema) ]),
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyEventInputSchema) ]),
}).strict();

export const EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyEventInput> = z.object({
  where: z.lazy(() => EventLabelLinkWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventLabelLinkUpdateWithoutAnomalyEventInputSchema),z.lazy(() => EventLabelLinkUncheckedUpdateWithoutAnomalyEventInputSchema) ]),
}).strict();

export const EventLabelLinkUpdateManyWithWhereWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateManyWithWhereWithoutAnomalyEventInput> = z.object({
  where: z.lazy(() => EventLabelLinkScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventLabelLinkUpdateManyMutationInputSchema),z.lazy(() => EventLabelLinkUncheckedUpdateManyWithoutAnomalyEventInputSchema) ]),
}).strict();

export const EventLabelLinkScalarWhereInputSchema: z.ZodType<Prisma.EventLabelLinkScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EventLabelLinkScalarWhereInputSchema),z.lazy(() => EventLabelLinkScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EventLabelLinkScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EventLabelLinkScalarWhereInputSchema),z.lazy(() => EventLabelLinkScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  labelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EventLabelLinkCreateWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkCreateWithoutAnomalyLabelInput> = z.object({
  id: z.string(),
  createdAt: z.coerce.date().optional(),
  anomalyEvent: z.lazy(() => AnomalyEventCreateNestedOneWithoutEventLabelLinksInputSchema)
}).strict();

export const EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedCreateWithoutAnomalyLabelInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const EventLabelLinkCreateOrConnectWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkCreateOrConnectWithoutAnomalyLabelInput> = z.object({
  where: z.lazy(() => EventLabelLinkWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema) ]),
}).strict();

export const EventLabelLinkCreateManyAnomalyLabelInputEnvelopeSchema: z.ZodType<Prisma.EventLabelLinkCreateManyAnomalyLabelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EventLabelLinkCreateManyAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkCreateManyAnomalyLabelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkUpsertWithWhereUniqueWithoutAnomalyLabelInput> = z.object({
  where: z.lazy(() => EventLabelLinkWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EventLabelLinkUpdateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUncheckedUpdateWithoutAnomalyLabelInputSchema) ]),
  create: z.union([ z.lazy(() => EventLabelLinkCreateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUncheckedCreateWithoutAnomalyLabelInputSchema) ]),
}).strict();

export const EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateWithWhereUniqueWithoutAnomalyLabelInput> = z.object({
  where: z.lazy(() => EventLabelLinkWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EventLabelLinkUpdateWithoutAnomalyLabelInputSchema),z.lazy(() => EventLabelLinkUncheckedUpdateWithoutAnomalyLabelInputSchema) ]),
}).strict();

export const EventLabelLinkUpdateManyWithWhereWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateManyWithWhereWithoutAnomalyLabelInput> = z.object({
  where: z.lazy(() => EventLabelLinkScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EventLabelLinkUpdateManyMutationInputSchema),z.lazy(() => EventLabelLinkUncheckedUpdateManyWithoutAnomalyLabelInputSchema) ]),
}).strict();

export const GodNameCreateWithoutBorrowGodInputSchema: z.ZodType<Prisma.GodNameCreateWithoutBorrowGodInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutGod_nameInputSchema)
}).strict();

export const GodNameUncheckedCreateWithoutBorrowGodInputSchema: z.ZodType<Prisma.GodNameUncheckedCreateWithoutBorrowGodInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const GodNameCreateOrConnectWithoutBorrowGodInputSchema: z.ZodType<Prisma.GodNameCreateOrConnectWithoutBorrowGodInput> = z.object({
  where: z.lazy(() => GodNameWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GodNameCreateWithoutBorrowGodInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutBorrowGodInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutBorrow_godInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutBorrow_godInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutBorrow_godInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBorrow_godInputSchema) ]),
}).strict();

export const GodNameUpsertWithoutBorrowGodInputSchema: z.ZodType<Prisma.GodNameUpsertWithoutBorrowGodInput> = z.object({
  update: z.union([ z.lazy(() => GodNameUpdateWithoutBorrowGodInputSchema),z.lazy(() => GodNameUncheckedUpdateWithoutBorrowGodInputSchema) ]),
  create: z.union([ z.lazy(() => GodNameCreateWithoutBorrowGodInputSchema),z.lazy(() => GodNameUncheckedCreateWithoutBorrowGodInputSchema) ]),
  where: z.lazy(() => GodNameWhereInputSchema).optional()
}).strict();

export const GodNameUpdateToOneWithWhereWithoutBorrowGodInputSchema: z.ZodType<Prisma.GodNameUpdateToOneWithWhereWithoutBorrowGodInput> = z.object({
  where: z.lazy(() => GodNameWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => GodNameUpdateWithoutBorrowGodInputSchema),z.lazy(() => GodNameUncheckedUpdateWithoutBorrowGodInputSchema) ]),
}).strict();

export const GodNameUpdateWithoutBorrowGodInputSchema: z.ZodType<Prisma.GodNameUpdateWithoutBorrowGodInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutGod_nameNestedInputSchema).optional()
}).strict();

export const GodNameUncheckedUpdateWithoutBorrowGodInputSchema: z.ZodType<Prisma.GodNameUncheckedUpdateWithoutBorrowGodInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpsertWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutBorrow_godInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBorrow_godInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBorrow_godInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutBorrow_godInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutBorrow_godInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBorrow_godInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutBorrow_godInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutBorrow_godInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutBorrow_godInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutBuddhistInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutBuddhistInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutBuddhistInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBuddhistInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutBuddhistInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBuddhistInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutBuddhistInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutBuddhistInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutBuddhistInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutBuddhistInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutBuddhistInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutBuddhistInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutBuddhistInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const AnomalyEventCreateWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyEventCreateWithoutEventLabelLinksInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  experimentRun: z.lazy(() => ExperimentRunCreateNestedOneWithoutAnomalyEventsInputSchema).optional()
}).strict();

export const AnomalyEventUncheckedCreateWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedCreateWithoutEventLabelLinksInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  experimentRunId: z.string().optional().nullable()
}).strict();

export const AnomalyEventCreateOrConnectWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyEventCreateOrConnectWithoutEventLabelLinksInput> = z.object({
  where: z.lazy(() => AnomalyEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutEventLabelLinksInputSchema) ]),
}).strict();

export const AnomalyLabelCreateWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyLabelCreateWithoutEventLabelLinksInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const AnomalyLabelUncheckedCreateWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyLabelUncheckedCreateWithoutEventLabelLinksInput> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const AnomalyLabelCreateOrConnectWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyLabelCreateOrConnectWithoutEventLabelLinksInput> = z.object({
  where: z.lazy(() => AnomalyLabelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AnomalyLabelCreateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyLabelUncheckedCreateWithoutEventLabelLinksInputSchema) ]),
}).strict();

export const AnomalyEventUpsertWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyEventUpsertWithoutEventLabelLinksInput> = z.object({
  update: z.union([ z.lazy(() => AnomalyEventUpdateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyEventUncheckedUpdateWithoutEventLabelLinksInputSchema) ]),
  create: z.union([ z.lazy(() => AnomalyEventCreateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyEventUncheckedCreateWithoutEventLabelLinksInputSchema) ]),
  where: z.lazy(() => AnomalyEventWhereInputSchema).optional()
}).strict();

export const AnomalyEventUpdateToOneWithWhereWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyEventUpdateToOneWithWhereWithoutEventLabelLinksInput> = z.object({
  where: z.lazy(() => AnomalyEventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AnomalyEventUpdateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyEventUncheckedUpdateWithoutEventLabelLinksInputSchema) ]),
}).strict();

export const AnomalyEventUpdateWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyEventUpdateWithoutEventLabelLinksInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRun: z.lazy(() => ExperimentRunUpdateOneWithoutAnomalyEventsNestedInputSchema).optional()
}).strict();

export const AnomalyEventUncheckedUpdateWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedUpdateWithoutEventLabelLinksInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRunId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AnomalyLabelUpsertWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyLabelUpsertWithoutEventLabelLinksInput> = z.object({
  update: z.union([ z.lazy(() => AnomalyLabelUpdateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyLabelUncheckedUpdateWithoutEventLabelLinksInputSchema) ]),
  create: z.union([ z.lazy(() => AnomalyLabelCreateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyLabelUncheckedCreateWithoutEventLabelLinksInputSchema) ]),
  where: z.lazy(() => AnomalyLabelWhereInputSchema).optional()
}).strict();

export const AnomalyLabelUpdateToOneWithWhereWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyLabelUpdateToOneWithWhereWithoutEventLabelLinksInput> = z.object({
  where: z.lazy(() => AnomalyLabelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AnomalyLabelUpdateWithoutEventLabelLinksInputSchema),z.lazy(() => AnomalyLabelUncheckedUpdateWithoutEventLabelLinksInputSchema) ]),
}).strict();

export const AnomalyLabelUpdateWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyLabelUpdateWithoutEventLabelLinksInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnomalyLabelUncheckedUpdateWithoutEventLabelLinksInputSchema: z.ZodType<Prisma.AnomalyLabelUncheckedUpdateWithoutEventLabelLinksInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutFamilyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutFamilyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutFamilyInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const FamilyMemberCreateWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberCreateWithoutFamilyInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamily_memberInputSchema)
}).strict();

export const FamilyMemberUncheckedCreateWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedCreateWithoutFamilyInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const FamilyMemberCreateOrConnectWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberCreateOrConnectWithoutFamilyInput> = z.object({
  where: z.lazy(() => FamilyMemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const FamilyMemberCreateManyFamilyInputEnvelopeSchema: z.ZodType<Prisma.FamilyMemberCreateManyFamilyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FamilyMemberCreateManyFamilyInputSchema),z.lazy(() => FamilyMemberCreateManyFamilyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Servicing1CreateWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1CreateWithoutFamilyInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1UncheckedCreateWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateWithoutFamilyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1CreateOrConnectWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1CreateOrConnectWithoutFamilyInput> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutFamilyInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const Servicing1CreateManyFamilyInputEnvelopeSchema: z.ZodType<Prisma.Servicing1CreateManyFamilyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Servicing1CreateManyFamilyInputSchema),z.lazy(() => Servicing1CreateManyFamilyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Servicing2CreateWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2CreateWithoutFamilyInput> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing2InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const Servicing2UncheckedCreateWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateWithoutFamilyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2CreateOrConnectWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2CreateOrConnectWithoutFamilyInput> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutFamilyInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const Servicing2CreateManyFamilyInputEnvelopeSchema: z.ZodType<Prisma.Servicing2CreateManyFamilyInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Servicing2CreateManyFamilyInputSchema),z.lazy(() => Servicing2CreateManyFamilyInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutFamilyInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamilyInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamilyInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutFamilyInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutFamilyInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamilyInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const FamilyMemberUpsertWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberUpsertWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => FamilyMemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FamilyMemberUpdateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUncheckedUpdateWithoutFamilyInputSchema) ]),
  create: z.union([ z.lazy(() => FamilyMemberCreateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const FamilyMemberUpdateWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberUpdateWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => FamilyMemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FamilyMemberUpdateWithoutFamilyInputSchema),z.lazy(() => FamilyMemberUncheckedUpdateWithoutFamilyInputSchema) ]),
}).strict();

export const FamilyMemberUpdateManyWithWhereWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberUpdateManyWithWhereWithoutFamilyInput> = z.object({
  where: z.lazy(() => FamilyMemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FamilyMemberUpdateManyMutationInputSchema),z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutFamilyInputSchema) ]),
}).strict();

export const Servicing1UpsertWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1UpsertWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Servicing1UpdateWithoutFamilyInputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutFamilyInputSchema) ]),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutFamilyInputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const Servicing1UpdateWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1UpdateWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Servicing1UpdateWithoutFamilyInputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutFamilyInputSchema) ]),
}).strict();

export const Servicing1UpdateManyWithWhereWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1UpdateManyWithWhereWithoutFamilyInput> = z.object({
  where: z.lazy(() => Servicing1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Servicing1UpdateManyMutationInputSchema),z.lazy(() => Servicing1UncheckedUpdateManyWithoutFamilyInputSchema) ]),
}).strict();

export const Servicing2UpsertWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2UpsertWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Servicing2UpdateWithoutFamilyInputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutFamilyInputSchema) ]),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutFamilyInputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutFamilyInputSchema) ]),
}).strict();

export const Servicing2UpdateWithWhereUniqueWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2UpdateWithWhereUniqueWithoutFamilyInput> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateWithoutFamilyInputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutFamilyInputSchema) ]),
}).strict();

export const Servicing2UpdateManyWithWhereWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithWhereWithoutFamilyInput> = z.object({
  where: z.lazy(() => Servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateManyMutationInputSchema),z.lazy(() => Servicing2UncheckedUpdateManyWithoutFamilyInputSchema) ]),
}).strict();

export const FamilyCreateWithoutFamilyMembersInputSchema: z.ZodType<Prisma.FamilyCreateWithoutFamilyMembersInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamilyInputSchema),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyUncheckedCreateWithoutFamilyMembersInputSchema: z.ZodType<Prisma.FamilyUncheckedCreateWithoutFamilyMembersInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyCreateOrConnectWithoutFamilyMembersInputSchema: z.ZodType<Prisma.FamilyCreateOrConnectWithoutFamilyMembersInput> = z.object({
  where: z.lazy(() => FamilyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FamilyCreateWithoutFamilyMembersInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutFamilyMembersInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutFamily_memberInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutFamily_memberInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutFamily_memberInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamily_memberInputSchema) ]),
}).strict();

export const FamilyUpsertWithoutFamilyMembersInputSchema: z.ZodType<Prisma.FamilyUpsertWithoutFamilyMembersInput> = z.object({
  update: z.union([ z.lazy(() => FamilyUpdateWithoutFamilyMembersInputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutFamilyMembersInputSchema) ]),
  create: z.union([ z.lazy(() => FamilyCreateWithoutFamilyMembersInputSchema),z.lazy(() => FamilyUncheckedCreateWithoutFamilyMembersInputSchema) ]),
  where: z.lazy(() => FamilyWhereInputSchema).optional()
}).strict();

export const FamilyUpdateToOneWithWhereWithoutFamilyMembersInputSchema: z.ZodType<Prisma.FamilyUpdateToOneWithWhereWithoutFamilyMembersInput> = z.object({
  where: z.lazy(() => FamilyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FamilyUpdateWithoutFamilyMembersInputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutFamilyMembersInputSchema) ]),
}).strict();

export const FamilyUpdateWithoutFamilyMembersInputSchema: z.ZodType<Prisma.FamilyUpdateWithoutFamilyMembersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const FamilyUncheckedUpdateWithoutFamilyMembersInputSchema: z.ZodType<Prisma.FamilyUncheckedUpdateWithoutFamilyMembersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutFamily_memberInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamily_memberInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutFamily_memberInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutFamily_memberInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutFamily_memberInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutFamily_memberInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutFamily_memberInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutFamily_memberInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutFamily_memberInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const BorrowGodCreateWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodCreateWithoutGodNameInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutBorrow_godInputSchema)
}).strict();

export const BorrowGodUncheckedCreateWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodUncheckedCreateWithoutGodNameInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BorrowGodCreateOrConnectWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodCreateOrConnectWithoutGodNameInput> = z.object({
  where: z.lazy(() => BorrowGodWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema) ]),
}).strict();

export const BorrowGodCreateManyGodNameInputEnvelopeSchema: z.ZodType<Prisma.BorrowGodCreateManyGodNameInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BorrowGodCreateManyGodNameInputSchema),z.lazy(() => BorrowGodCreateManyGodNameInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutGod_nameInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutGod_nameInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutGod_nameInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGod_nameInputSchema) ]),
}).strict();

export const BorrowGodUpsertWithWhereUniqueWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodUpsertWithWhereUniqueWithoutGodNameInput> = z.object({
  where: z.lazy(() => BorrowGodWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BorrowGodUpdateWithoutGodNameInputSchema),z.lazy(() => BorrowGodUncheckedUpdateWithoutGodNameInputSchema) ]),
  create: z.union([ z.lazy(() => BorrowGodCreateWithoutGodNameInputSchema),z.lazy(() => BorrowGodUncheckedCreateWithoutGodNameInputSchema) ]),
}).strict();

export const BorrowGodUpdateWithWhereUniqueWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodUpdateWithWhereUniqueWithoutGodNameInput> = z.object({
  where: z.lazy(() => BorrowGodWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BorrowGodUpdateWithoutGodNameInputSchema),z.lazy(() => BorrowGodUncheckedUpdateWithoutGodNameInputSchema) ]),
}).strict();

export const BorrowGodUpdateManyWithWhereWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodUpdateManyWithWhereWithoutGodNameInput> = z.object({
  where: z.lazy(() => BorrowGodScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BorrowGodUpdateManyMutationInputSchema),z.lazy(() => BorrowGodUncheckedUpdateManyWithoutGodNameInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutGod_nameInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutGod_nameInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutGod_nameInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutGod_nameInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutGod_nameInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutGod_nameInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutGod_nameInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutGod_nameInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutGod_nameInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutMember_classInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMember_classInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMember_classInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMember_classInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMember_classInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMember_classInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMember_classInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMember_classInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutMember_classInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMember_classInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMember_classInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutMember_classInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMember_classInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutMgyearInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMgyearInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMgyearInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMgyearInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMgyearInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMgyearInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMgyearInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMgyearInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutMgyearInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMgyearInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMgyearInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutMgyearInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMgyearInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutService1InputSchema: z.ZodType<Prisma.OrganizationCreateWithoutService1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutService1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutService1InputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutService1Input> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const Service2CreateWithoutService1InputSchema: z.ZodType<Prisma.Service2CreateWithoutService1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService2InputSchema),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2UncheckedCreateWithoutService1InputSchema: z.ZodType<Prisma.Service2UncheckedCreateWithoutService1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutService2InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2CreateOrConnectWithoutService1InputSchema: z.ZodType<Prisma.Service2CreateOrConnectWithoutService1Input> = z.object({
  where: z.lazy(() => Service2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Service2CreateWithoutService1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const Service2CreateManyService1InputEnvelopeSchema: z.ZodType<Prisma.Service2CreateManyService1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Service2CreateManyService1InputSchema),z.lazy(() => Service2CreateManyService1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Servicing1CreateWithoutService1InputSchema: z.ZodType<Prisma.Servicing1CreateWithoutService1Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing1InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1UncheckedCreateWithoutService1InputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateWithoutService1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1CreateOrConnectWithoutService1InputSchema: z.ZodType<Prisma.Servicing1CreateOrConnectWithoutService1Input> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService1InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const Servicing1CreateManyService1InputEnvelopeSchema: z.ZodType<Prisma.Servicing1CreateManyService1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Servicing1CreateManyService1InputSchema),z.lazy(() => Servicing1CreateManyService1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Servicing2CreateWithoutService1InputSchema: z.ZodType<Prisma.Servicing2CreateWithoutService1Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing2InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing2InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const Servicing2UncheckedCreateWithoutService1InputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateWithoutService1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2CreateOrConnectWithoutService1InputSchema: z.ZodType<Prisma.Servicing2CreateOrConnectWithoutService1Input> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const Servicing2CreateManyService1InputEnvelopeSchema: z.ZodType<Prisma.Servicing2CreateManyService1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Servicing2CreateManyService1InputSchema),z.lazy(() => Servicing2CreateManyService1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutService1Input> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService1InputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService1InputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutService1Input> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutService1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService1InputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutService1InputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const Service2UpsertWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.Service2UpsertWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => Service2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Service2UpdateWithoutService1InputSchema),z.lazy(() => Service2UncheckedUpdateWithoutService1InputSchema) ]),
  create: z.union([ z.lazy(() => Service2CreateWithoutService1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const Service2UpdateWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.Service2UpdateWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => Service2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Service2UpdateWithoutService1InputSchema),z.lazy(() => Service2UncheckedUpdateWithoutService1InputSchema) ]),
}).strict();

export const Service2UpdateManyWithWhereWithoutService1InputSchema: z.ZodType<Prisma.Service2UpdateManyWithWhereWithoutService1Input> = z.object({
  where: z.lazy(() => Service2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Service2UpdateManyMutationInputSchema),z.lazy(() => Service2UncheckedUpdateManyWithoutService1InputSchema) ]),
}).strict();

export const Servicing1UpsertWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.Servicing1UpsertWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Servicing1UpdateWithoutService1InputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutService1InputSchema) ]),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService1InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const Servicing1UpdateWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.Servicing1UpdateWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Servicing1UpdateWithoutService1InputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutService1InputSchema) ]),
}).strict();

export const Servicing1UpdateManyWithWhereWithoutService1InputSchema: z.ZodType<Prisma.Servicing1UpdateManyWithWhereWithoutService1Input> = z.object({
  where: z.lazy(() => Servicing1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Servicing1UpdateManyMutationInputSchema),z.lazy(() => Servicing1UncheckedUpdateManyWithoutService1InputSchema) ]),
}).strict();

export const Servicing2UpsertWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.Servicing2UpsertWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Servicing2UpdateWithoutService1InputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutService1InputSchema) ]),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService1InputSchema) ]),
}).strict();

export const Servicing2UpdateWithWhereUniqueWithoutService1InputSchema: z.ZodType<Prisma.Servicing2UpdateWithWhereUniqueWithoutService1Input> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateWithoutService1InputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutService1InputSchema) ]),
}).strict();

export const Servicing2UpdateManyWithWhereWithoutService1InputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithWhereWithoutService1Input> = z.object({
  where: z.lazy(() => Servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateManyMutationInputSchema),z.lazy(() => Servicing2UncheckedUpdateManyWithoutService1InputSchema) ]),
}).strict();

export const OrganizationCreateWithoutService2InputSchema: z.ZodType<Prisma.OrganizationCreateWithoutService2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutService2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutService2InputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutService2Input> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const Service1CreateWithoutService2InputSchema: z.ZodType<Prisma.Service1CreateWithoutService2Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService1InputSchema),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1UncheckedCreateWithoutService2InputSchema: z.ZodType<Prisma.Service1UncheckedCreateWithoutService2Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1CreateOrConnectWithoutService2InputSchema: z.ZodType<Prisma.Service1CreateOrConnectWithoutService2Input> = z.object({
  where: z.lazy(() => Service1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Service1CreateWithoutService2InputSchema),z.lazy(() => Service1UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const Servicing1CreateWithoutService2InputSchema: z.ZodType<Prisma.Servicing1CreateWithoutService2Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing1InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing1InputSchema),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1UncheckedCreateWithoutService2InputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateWithoutService2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1CreateOrConnectWithoutService2InputSchema: z.ZodType<Prisma.Servicing1CreateOrConnectWithoutService2Input> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const Servicing1CreateManyService2InputEnvelopeSchema: z.ZodType<Prisma.Servicing1CreateManyService2InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Servicing1CreateManyService2InputSchema),z.lazy(() => Servicing1CreateManyService2InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Servicing2CreateWithoutService2InputSchema: z.ZodType<Prisma.Servicing2CreateWithoutService2Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing2InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing2InputSchema),
  servicing1: z.lazy(() => Servicing1CreateNestedOneWithoutServicing2InputSchema)
}).strict();

export const Servicing2UncheckedCreateWithoutService2InputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateWithoutService2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2CreateOrConnectWithoutService2InputSchema: z.ZodType<Prisma.Servicing2CreateOrConnectWithoutService2Input> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService2InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const Servicing2CreateManyService2InputEnvelopeSchema: z.ZodType<Prisma.Servicing2CreateManyService2InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Servicing2CreateManyService2InputSchema),z.lazy(() => Servicing2CreateManyService2InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutService2Input> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService2InputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutService2InputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutService2Input> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutService2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutService2InputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutService2InputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const Service1UpsertWithoutService2InputSchema: z.ZodType<Prisma.Service1UpsertWithoutService2Input> = z.object({
  update: z.union([ z.lazy(() => Service1UpdateWithoutService2InputSchema),z.lazy(() => Service1UncheckedUpdateWithoutService2InputSchema) ]),
  create: z.union([ z.lazy(() => Service1CreateWithoutService2InputSchema),z.lazy(() => Service1UncheckedCreateWithoutService2InputSchema) ]),
  where: z.lazy(() => Service1WhereInputSchema).optional()
}).strict();

export const Service1UpdateToOneWithWhereWithoutService2InputSchema: z.ZodType<Prisma.Service1UpdateToOneWithWhereWithoutService2Input> = z.object({
  where: z.lazy(() => Service1WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => Service1UpdateWithoutService2InputSchema),z.lazy(() => Service1UncheckedUpdateWithoutService2InputSchema) ]),
}).strict();

export const Service1UpdateWithoutService2InputSchema: z.ZodType<Prisma.Service1UpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Service1UncheckedUpdateWithoutService2InputSchema: z.ZodType<Prisma.Service1UncheckedUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Servicing1UpsertWithWhereUniqueWithoutService2InputSchema: z.ZodType<Prisma.Servicing1UpsertWithWhereUniqueWithoutService2Input> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Servicing1UpdateWithoutService2InputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutService2InputSchema) ]),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutService2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const Servicing1UpdateWithWhereUniqueWithoutService2InputSchema: z.ZodType<Prisma.Servicing1UpdateWithWhereUniqueWithoutService2Input> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Servicing1UpdateWithoutService2InputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutService2InputSchema) ]),
}).strict();

export const Servicing1UpdateManyWithWhereWithoutService2InputSchema: z.ZodType<Prisma.Servicing1UpdateManyWithWhereWithoutService2Input> = z.object({
  where: z.lazy(() => Servicing1ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Servicing1UpdateManyMutationInputSchema),z.lazy(() => Servicing1UncheckedUpdateManyWithoutService2InputSchema) ]),
}).strict();

export const Servicing2UpsertWithWhereUniqueWithoutService2InputSchema: z.ZodType<Prisma.Servicing2UpsertWithWhereUniqueWithoutService2Input> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Servicing2UpdateWithoutService2InputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutService2InputSchema) ]),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutService2InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutService2InputSchema) ]),
}).strict();

export const Servicing2UpdateWithWhereUniqueWithoutService2InputSchema: z.ZodType<Prisma.Servicing2UpdateWithWhereUniqueWithoutService2Input> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateWithoutService2InputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutService2InputSchema) ]),
}).strict();

export const Servicing2UpdateManyWithWhereWithoutService2InputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithWhereWithoutService2Input> = z.object({
  where: z.lazy(() => Servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateManyMutationInputSchema),z.lazy(() => Servicing2UncheckedUpdateManyWithoutService2InputSchema) ]),
}).strict();

export const FamilyCreateWithoutServicing1InputSchema: z.ZodType<Prisma.FamilyCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamilyInputSchema),
  familyMembers: z.lazy(() => FamilyMemberCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyUncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.FamilyUncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  familyMembers: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyCreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.FamilyCreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => FamilyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FamilyCreateWithoutServicing1InputSchema),z.lazy(() => FamilyUncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const OrganizationCreateWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationCreateWithoutServicing1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const Service1CreateWithoutServicing1InputSchema: z.ZodType<Prisma.Service1CreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService1InputSchema),
  service2: z.lazy(() => Service2CreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1UncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.Service1UncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1CreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.Service1CreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => Service1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Service1CreateWithoutServicing1InputSchema),z.lazy(() => Service1UncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const Service2CreateWithoutServicing1InputSchema: z.ZodType<Prisma.Service2CreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService2InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutService2InputSchema),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2UncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.Service2UncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2CreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.Service2CreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => Service2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Service2CreateWithoutServicing1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const Servicing2CreateWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2CreateWithoutServicing1Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing2InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing2InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing2InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing2InputSchema).optional()
}).strict();

export const Servicing2UncheckedCreateWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2UncheckedCreateWithoutServicing1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2CreateOrConnectWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2CreateOrConnectWithoutServicing1Input> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutServicing1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const Servicing2CreateManyServicing1InputEnvelopeSchema: z.ZodType<Prisma.Servicing2CreateManyServicing1InputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Servicing2CreateManyServicing1InputSchema),z.lazy(() => Servicing2CreateManyServicing1InputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FamilyUpsertWithoutServicing1InputSchema: z.ZodType<Prisma.FamilyUpsertWithoutServicing1Input> = z.object({
  update: z.union([ z.lazy(() => FamilyUpdateWithoutServicing1InputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => FamilyCreateWithoutServicing1InputSchema),z.lazy(() => FamilyUncheckedCreateWithoutServicing1InputSchema) ]),
  where: z.lazy(() => FamilyWhereInputSchema).optional()
}).strict();

export const FamilyUpdateToOneWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.FamilyUpdateToOneWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => FamilyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FamilyUpdateWithoutServicing1InputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const FamilyUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.FamilyUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema).optional(),
  familyMembers: z.lazy(() => FamilyMemberUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const FamilyUncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.FamilyUncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  familyMembers: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutServicing1Input> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing1InputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutServicing1InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const Service1UpsertWithoutServicing1InputSchema: z.ZodType<Prisma.Service1UpsertWithoutServicing1Input> = z.object({
  update: z.union([ z.lazy(() => Service1UpdateWithoutServicing1InputSchema),z.lazy(() => Service1UncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => Service1CreateWithoutServicing1InputSchema),z.lazy(() => Service1UncheckedCreateWithoutServicing1InputSchema) ]),
  where: z.lazy(() => Service1WhereInputSchema).optional()
}).strict();

export const Service1UpdateToOneWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.Service1UpdateToOneWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => Service1WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => Service1UpdateWithoutServicing1InputSchema),z.lazy(() => Service1UncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const Service1UpdateWithoutServicing1InputSchema: z.ZodType<Prisma.Service1UpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService1NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Service1UncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.Service1UncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Service2UpsertWithoutServicing1InputSchema: z.ZodType<Prisma.Service2UpsertWithoutServicing1Input> = z.object({
  update: z.union([ z.lazy(() => Service2UpdateWithoutServicing1InputSchema),z.lazy(() => Service2UncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => Service2CreateWithoutServicing1InputSchema),z.lazy(() => Service2UncheckedCreateWithoutServicing1InputSchema) ]),
  where: z.lazy(() => Service2WhereInputSchema).optional()
}).strict();

export const Service2UpdateToOneWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.Service2UpdateToOneWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => Service2WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => Service2UpdateWithoutServicing1InputSchema),z.lazy(() => Service2UncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const Service2UpdateWithoutServicing1InputSchema: z.ZodType<Prisma.Service2UpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Service2UncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.Service2UncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Servicing2UpsertWithWhereUniqueWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2UpsertWithWhereUniqueWithoutServicing1Input> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Servicing2UpdateWithoutServicing1InputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutServicing1InputSchema) ]),
  create: z.union([ z.lazy(() => Servicing2CreateWithoutServicing1InputSchema),z.lazy(() => Servicing2UncheckedCreateWithoutServicing1InputSchema) ]),
}).strict();

export const Servicing2UpdateWithWhereUniqueWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2UpdateWithWhereUniqueWithoutServicing1Input> = z.object({
  where: z.lazy(() => Servicing2WhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateWithoutServicing1InputSchema),z.lazy(() => Servicing2UncheckedUpdateWithoutServicing1InputSchema) ]),
}).strict();

export const Servicing2UpdateManyWithWhereWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2UpdateManyWithWhereWithoutServicing1Input> = z.object({
  where: z.lazy(() => Servicing2ScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Servicing2UpdateManyMutationInputSchema),z.lazy(() => Servicing2UncheckedUpdateManyWithoutServicing1InputSchema) ]),
}).strict();

export const FamilyCreateWithoutServicing2InputSchema: z.ZodType<Prisma.FamilyCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutFamilyInputSchema),
  familyMembers: z.lazy(() => FamilyMemberCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyUncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.FamilyUncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  familyMembers: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutFamilyInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutFamilyInputSchema).optional()
}).strict();

export const FamilyCreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.FamilyCreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => FamilyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FamilyCreateWithoutServicing2InputSchema),z.lazy(() => FamilyUncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const OrganizationCreateWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationCreateWithoutServicing2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const Service1CreateWithoutServicing2InputSchema: z.ZodType<Prisma.Service1CreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService1InputSchema),
  service2: z.lazy(() => Service2CreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1UncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.Service1UncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutService1InputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutService1InputSchema).optional()
}).strict();

export const Service1CreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.Service1CreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => Service1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Service1CreateWithoutServicing2InputSchema),z.lazy(() => Service1UncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const Service2CreateWithoutServicing2InputSchema: z.ZodType<Prisma.Service2CreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutService2InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutService2InputSchema),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2UncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.Service2UncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutService2InputSchema).optional()
}).strict();

export const Service2CreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.Service2CreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => Service2WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Service2CreateWithoutServicing2InputSchema),z.lazy(() => Service2UncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const Servicing1CreateWithoutServicing2InputSchema: z.ZodType<Prisma.Servicing1CreateWithoutServicing2Input> = z.object({
  id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date(),
  family: z.lazy(() => FamilyCreateNestedOneWithoutServicing1InputSchema),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutServicing1InputSchema),
  service1: z.lazy(() => Service1CreateNestedOneWithoutServicing1InputSchema),
  service2: z.lazy(() => Service2CreateNestedOneWithoutServicing1InputSchema).optional()
}).strict();

export const Servicing1UncheckedCreateWithoutServicing2InputSchema: z.ZodType<Prisma.Servicing1UncheckedCreateWithoutServicing2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing1CreateOrConnectWithoutServicing2InputSchema: z.ZodType<Prisma.Servicing1CreateOrConnectWithoutServicing2Input> = z.object({
  where: z.lazy(() => Servicing1WhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutServicing2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutServicing2InputSchema) ]),
}).strict();

export const FamilyUpsertWithoutServicing2InputSchema: z.ZodType<Prisma.FamilyUpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => FamilyUpdateWithoutServicing2InputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => FamilyCreateWithoutServicing2InputSchema),z.lazy(() => FamilyUncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => FamilyWhereInputSchema).optional()
}).strict();

export const FamilyUpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.FamilyUpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => FamilyWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FamilyUpdateWithoutServicing2InputSchema),z.lazy(() => FamilyUncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const FamilyUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.FamilyUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamilyNestedInputSchema).optional(),
  familyMembers: z.lazy(() => FamilyMemberUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const FamilyUncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.FamilyUncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  familyMembers: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutServicing2InputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  temple: z.lazy(() => TempleUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const Service1UpsertWithoutServicing2InputSchema: z.ZodType<Prisma.Service1UpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => Service1UpdateWithoutServicing2InputSchema),z.lazy(() => Service1UncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => Service1CreateWithoutServicing2InputSchema),z.lazy(() => Service1UncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => Service1WhereInputSchema).optional()
}).strict();

export const Service1UpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.Service1UpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => Service1WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => Service1UpdateWithoutServicing2InputSchema),z.lazy(() => Service1UncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const Service1UpdateWithoutServicing2InputSchema: z.ZodType<Prisma.Service1UpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService1NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Service1UncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.Service1UncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Service2UpsertWithoutServicing2InputSchema: z.ZodType<Prisma.Service2UpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => Service2UpdateWithoutServicing2InputSchema),z.lazy(() => Service2UncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => Service2CreateWithoutServicing2InputSchema),z.lazy(() => Service2UncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => Service2WhereInputSchema).optional()
}).strict();

export const Service2UpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.Service2UpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => Service2WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => Service2UpdateWithoutServicing2InputSchema),z.lazy(() => Service2UncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const Service2UpdateWithoutServicing2InputSchema: z.ZodType<Prisma.Service2UpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Service2UncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.Service2UncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Servicing1UpsertWithoutServicing2InputSchema: z.ZodType<Prisma.Servicing1UpsertWithoutServicing2Input> = z.object({
  update: z.union([ z.lazy(() => Servicing1UpdateWithoutServicing2InputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutServicing2InputSchema) ]),
  create: z.union([ z.lazy(() => Servicing1CreateWithoutServicing2InputSchema),z.lazy(() => Servicing1UncheckedCreateWithoutServicing2InputSchema) ]),
  where: z.lazy(() => Servicing1WhereInputSchema).optional()
}).strict();

export const Servicing1UpdateToOneWithWhereWithoutServicing2InputSchema: z.ZodType<Prisma.Servicing1UpdateToOneWithWhereWithoutServicing2Input> = z.object({
  where: z.lazy(() => Servicing1WhereInputSchema).optional(),
  data: z.union([ z.lazy(() => Servicing1UpdateWithoutServicing2InputSchema),z.lazy(() => Servicing1UncheckedUpdateWithoutServicing2InputSchema) ]),
}).strict();

export const Servicing1UpdateWithoutServicing2InputSchema: z.ZodType<Prisma.Servicing1UpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateWithoutServicing2InputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateWithoutServicing2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutTempleInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1CreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2CreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutTempleInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutTempleInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTempleInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutTempleInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTempleInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTempleInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutTempleInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutTempleInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTempleInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutTempleInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutTempleInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutTempleInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  paymentsCustomerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  borrow_god: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  buddhist: z.lazy(() => BuddhistUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family: z.lazy(() => FamilyUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  family_member: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  god_name: z.lazy(() => GodNameUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  member_class: z.lazy(() => MemberClassUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  mgyear: z.lazy(() => MgYearUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  products: z.lazy(() => ProductUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ProfitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  relationshipManagers: z.lazy(() => RelationshipManagerUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service1: z.lazy(() => Service1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const ExperimentRunCreateWithoutTrainedModelsInputSchema: z.ZodType<Prisma.ExperimentRunCreateWithoutTrainedModelsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventCreateNestedManyWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedCreateWithoutTrainedModelsInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedCreateWithoutTrainedModelsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.lazy(() => ExperimentRunStatusSchema).optional(),
  candidateCount: z.number().int().optional().nullable(),
  positiveLabelCount: z.number().int().optional().nullable(),
  negativeLabelCount: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventUncheckedCreateNestedManyWithoutExperimentRunInputSchema).optional()
}).strict();

export const ExperimentRunCreateOrConnectWithoutTrainedModelsInputSchema: z.ZodType<Prisma.ExperimentRunCreateOrConnectWithoutTrainedModelsInput> = z.object({
  where: z.lazy(() => ExperimentRunWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutTrainedModelsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutTrainedModelsInputSchema) ]),
}).strict();

export const EvaluationRunCreateWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunCreateWithoutTrainedModelInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  predictions: z.lazy(() => ModelPredictionCreateNestedManyWithoutEvaluationRunInputSchema).optional()
}).strict();

export const EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedCreateWithoutTrainedModelInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  predictions: z.lazy(() => ModelPredictionUncheckedCreateNestedManyWithoutEvaluationRunInputSchema).optional()
}).strict();

export const EvaluationRunCreateOrConnectWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunCreateOrConnectWithoutTrainedModelInput> = z.object({
  where: z.lazy(() => EvaluationRunWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema) ]),
}).strict();

export const EvaluationRunCreateManyTrainedModelInputEnvelopeSchema: z.ZodType<Prisma.EvaluationRunCreateManyTrainedModelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EvaluationRunCreateManyTrainedModelInputSchema),z.lazy(() => EvaluationRunCreateManyTrainedModelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ExperimentRunUpsertWithoutTrainedModelsInputSchema: z.ZodType<Prisma.ExperimentRunUpsertWithoutTrainedModelsInput> = z.object({
  update: z.union([ z.lazy(() => ExperimentRunUpdateWithoutTrainedModelsInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutTrainedModelsInputSchema) ]),
  create: z.union([ z.lazy(() => ExperimentRunCreateWithoutTrainedModelsInputSchema),z.lazy(() => ExperimentRunUncheckedCreateWithoutTrainedModelsInputSchema) ]),
  where: z.lazy(() => ExperimentRunWhereInputSchema).optional()
}).strict();

export const ExperimentRunUpdateToOneWithWhereWithoutTrainedModelsInputSchema: z.ZodType<Prisma.ExperimentRunUpdateToOneWithWhereWithoutTrainedModelsInput> = z.object({
  where: z.lazy(() => ExperimentRunWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ExperimentRunUpdateWithoutTrainedModelsInputSchema),z.lazy(() => ExperimentRunUncheckedUpdateWithoutTrainedModelsInputSchema) ]),
}).strict();

export const ExperimentRunUpdateWithoutTrainedModelsInputSchema: z.ZodType<Prisma.ExperimentRunUpdateWithoutTrainedModelsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventUpdateManyWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const ExperimentRunUncheckedUpdateWithoutTrainedModelsInputSchema: z.ZodType<Prisma.ExperimentRunUncheckedUpdateWithoutTrainedModelsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filteringParameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentRunStatusSchema),z.lazy(() => EnumExperimentRunStatusFieldUpdateOperationsInputSchema) ]).optional(),
  candidateCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  positiveLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  negativeLabelCount: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  candidateStats: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),z.record(z.any()) ]).optional(),
  anomalyEvents: z.lazy(() => AnomalyEventUncheckedUpdateManyWithoutExperimentRunNestedInputSchema).optional()
}).strict();

export const EvaluationRunUpsertWithWhereUniqueWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunUpsertWithWhereUniqueWithoutTrainedModelInput> = z.object({
  where: z.lazy(() => EvaluationRunWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EvaluationRunUpdateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUncheckedUpdateWithoutTrainedModelInputSchema) ]),
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutTrainedModelInputSchema) ]),
}).strict();

export const EvaluationRunUpdateWithWhereUniqueWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunUpdateWithWhereUniqueWithoutTrainedModelInput> = z.object({
  where: z.lazy(() => EvaluationRunWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EvaluationRunUpdateWithoutTrainedModelInputSchema),z.lazy(() => EvaluationRunUncheckedUpdateWithoutTrainedModelInputSchema) ]),
}).strict();

export const EvaluationRunUpdateManyWithWhereWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunUpdateManyWithWhereWithoutTrainedModelInput> = z.object({
  where: z.lazy(() => EvaluationRunScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EvaluationRunUpdateManyMutationInputSchema),z.lazy(() => EvaluationRunUncheckedUpdateManyWithoutTrainedModelInputSchema) ]),
}).strict();

export const EvaluationRunScalarWhereInputSchema: z.ZodType<Prisma.EvaluationRunScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EvaluationRunScalarWhereInputSchema),z.lazy(() => EvaluationRunScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EvaluationRunScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EvaluationRunScalarWhereInputSchema),z.lazy(() => EvaluationRunScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  scenarioType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  trainedModelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testSetSource: z.lazy(() => JsonFilterSchema).optional(),
  evaluationMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const TrainedModelCreateWithoutEvaluationRunsInputSchema: z.ZodType<Prisma.TrainedModelCreateWithoutEvaluationRunsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  modelPath: z.string().optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  experimentRun: z.lazy(() => ExperimentRunCreateNestedOneWithoutTrainedModelsInputSchema)
}).strict();

export const TrainedModelUncheckedCreateWithoutEvaluationRunsInputSchema: z.ZodType<Prisma.TrainedModelUncheckedCreateWithoutEvaluationRunsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  experimentRunId: z.string(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  modelPath: z.string().optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable()
}).strict();

export const TrainedModelCreateOrConnectWithoutEvaluationRunsInputSchema: z.ZodType<Prisma.TrainedModelCreateOrConnectWithoutEvaluationRunsInput> = z.object({
  where: z.lazy(() => TrainedModelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutEvaluationRunsInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutEvaluationRunsInputSchema) ]),
}).strict();

export const ModelPredictionCreateWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionCreateWithoutEvaluationRunInput> = z.object({
  id: z.string().cuid().optional(),
  anomalyEventId: z.string().optional().nullable(),
  timestamp: z.coerce.date(),
  predictionScore: z.number(),
  groundTruth: z.number().int().optional().nullable()
}).strict();

export const ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionUncheckedCreateWithoutEvaluationRunInput> = z.object({
  id: z.string().cuid().optional(),
  anomalyEventId: z.string().optional().nullable(),
  timestamp: z.coerce.date(),
  predictionScore: z.number(),
  groundTruth: z.number().int().optional().nullable()
}).strict();

export const ModelPredictionCreateOrConnectWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionCreateOrConnectWithoutEvaluationRunInput> = z.object({
  where: z.lazy(() => ModelPredictionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema) ]),
}).strict();

export const ModelPredictionCreateManyEvaluationRunInputEnvelopeSchema: z.ZodType<Prisma.ModelPredictionCreateManyEvaluationRunInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ModelPredictionCreateManyEvaluationRunInputSchema),z.lazy(() => ModelPredictionCreateManyEvaluationRunInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TrainedModelUpsertWithoutEvaluationRunsInputSchema: z.ZodType<Prisma.TrainedModelUpsertWithoutEvaluationRunsInput> = z.object({
  update: z.union([ z.lazy(() => TrainedModelUpdateWithoutEvaluationRunsInputSchema),z.lazy(() => TrainedModelUncheckedUpdateWithoutEvaluationRunsInputSchema) ]),
  create: z.union([ z.lazy(() => TrainedModelCreateWithoutEvaluationRunsInputSchema),z.lazy(() => TrainedModelUncheckedCreateWithoutEvaluationRunsInputSchema) ]),
  where: z.lazy(() => TrainedModelWhereInputSchema).optional()
}).strict();

export const TrainedModelUpdateToOneWithWhereWithoutEvaluationRunsInputSchema: z.ZodType<Prisma.TrainedModelUpdateToOneWithWhereWithoutEvaluationRunsInput> = z.object({
  where: z.lazy(() => TrainedModelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TrainedModelUpdateWithoutEvaluationRunsInputSchema),z.lazy(() => TrainedModelUncheckedUpdateWithoutEvaluationRunsInputSchema) ]),
}).strict();

export const TrainedModelUpdateWithoutEvaluationRunsInputSchema: z.ZodType<Prisma.TrainedModelUpdateWithoutEvaluationRunsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  experimentRun: z.lazy(() => ExperimentRunUpdateOneRequiredWithoutTrainedModelsNestedInputSchema).optional()
}).strict();

export const TrainedModelUncheckedUpdateWithoutEvaluationRunsInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateWithoutEvaluationRunsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  experimentRunId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelPredictionUpsertWithWhereUniqueWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionUpsertWithWhereUniqueWithoutEvaluationRunInput> = z.object({
  where: z.lazy(() => ModelPredictionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ModelPredictionUpdateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUncheckedUpdateWithoutEvaluationRunInputSchema) ]),
  create: z.union([ z.lazy(() => ModelPredictionCreateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUncheckedCreateWithoutEvaluationRunInputSchema) ]),
}).strict();

export const ModelPredictionUpdateWithWhereUniqueWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionUpdateWithWhereUniqueWithoutEvaluationRunInput> = z.object({
  where: z.lazy(() => ModelPredictionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ModelPredictionUpdateWithoutEvaluationRunInputSchema),z.lazy(() => ModelPredictionUncheckedUpdateWithoutEvaluationRunInputSchema) ]),
}).strict();

export const ModelPredictionUpdateManyWithWhereWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionUpdateManyWithWhereWithoutEvaluationRunInput> = z.object({
  where: z.lazy(() => ModelPredictionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ModelPredictionUpdateManyMutationInputSchema),z.lazy(() => ModelPredictionUncheckedUpdateManyWithoutEvaluationRunInputSchema) ]),
}).strict();

export const ModelPredictionScalarWhereInputSchema: z.ZodType<Prisma.ModelPredictionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelPredictionScalarWhereInputSchema),z.lazy(() => ModelPredictionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelPredictionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelPredictionScalarWhereInputSchema),z.lazy(() => ModelPredictionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  evaluationRunId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  anomalyEventId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  predictionScore: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  groundTruth: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const EvaluationRunCreateWithoutPredictionsInputSchema: z.ZodType<Prisma.EvaluationRunCreateWithoutPredictionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable(),
  trainedModel: z.lazy(() => TrainedModelCreateNestedOneWithoutEvaluationRunsInputSchema)
}).strict();

export const EvaluationRunUncheckedCreateWithoutPredictionsInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedCreateWithoutPredictionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  trainedModelId: z.string(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable()
}).strict();

export const EvaluationRunCreateOrConnectWithoutPredictionsInputSchema: z.ZodType<Prisma.EvaluationRunCreateOrConnectWithoutPredictionsInput> = z.object({
  where: z.lazy(() => EvaluationRunWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutPredictionsInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutPredictionsInputSchema) ]),
}).strict();

export const EvaluationRunUpsertWithoutPredictionsInputSchema: z.ZodType<Prisma.EvaluationRunUpsertWithoutPredictionsInput> = z.object({
  update: z.union([ z.lazy(() => EvaluationRunUpdateWithoutPredictionsInputSchema),z.lazy(() => EvaluationRunUncheckedUpdateWithoutPredictionsInputSchema) ]),
  create: z.union([ z.lazy(() => EvaluationRunCreateWithoutPredictionsInputSchema),z.lazy(() => EvaluationRunUncheckedCreateWithoutPredictionsInputSchema) ]),
  where: z.lazy(() => EvaluationRunWhereInputSchema).optional()
}).strict();

export const EvaluationRunUpdateToOneWithWhereWithoutPredictionsInputSchema: z.ZodType<Prisma.EvaluationRunUpdateToOneWithWhereWithoutPredictionsInput> = z.object({
  where: z.lazy(() => EvaluationRunWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EvaluationRunUpdateWithoutPredictionsInputSchema),z.lazy(() => EvaluationRunUncheckedUpdateWithoutPredictionsInputSchema) ]),
}).strict();

export const EvaluationRunUpdateWithoutPredictionsInputSchema: z.ZodType<Prisma.EvaluationRunUpdateWithoutPredictionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainedModel: z.lazy(() => TrainedModelUpdateOneRequiredWithoutEvaluationRunsNestedInputSchema).optional()
}).strict();

export const EvaluationRunUncheckedUpdateWithoutPredictionsInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedUpdateWithoutPredictionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  trainedModelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountCreateManyUserInputSchema: z.ZodType<Prisma.AccountCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.coerce.date().optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AiChatCreateManyUserInputSchema: z.ZodType<Prisma.AiChatCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InvitationCreateManyUserInputSchema: z.ZodType<Prisma.InvitationCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date()
}).strict();

export const MemberCreateManyUserInputSchema: z.ZodType<Prisma.MemberCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const PasskeyCreateManyUserInputSchema: z.ZodType<Prisma.PasskeyCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional().nullable()
}).strict();

export const PurchaseCreateManyUserInputSchema: z.ZodType<Prisma.PurchaseCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  organizationId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  expiresAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const TwoFactorCreateManyUserInputSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUpdateWithoutUserInputSchema: z.ZodType<Prisma.AiChatUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputSchema).optional()
}).strict();

export const AiChatUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUpdateWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasskeyUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasskeyUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  publicKey: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  credentialID: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  counter: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  deviceType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backedUp: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  transports: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PurchaseUpdateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputSchema).optional()
}).strict();

export const PurchaseUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUpdateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatCreateManyOrganizationInputSchema: z.ZodType<Prisma.AiChatCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const BankAccountCreateManyOrganizationInputSchema: z.ZodType<Prisma.BankAccountCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  customerId: z.string().optional().nullable()
}).strict();

export const BorrowGodCreateManyOrganizationInputSchema: z.ZodType<Prisma.BorrowGodCreateManyOrganizationInput> = z.object({
  id: z.string(),
  godNameId: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BuddhistCreateManyOrganizationInputSchema: z.ZodType<Prisma.BuddhistCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  cellphone: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  templeNowText: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const CustomerCreateManyOrganizationInputSchema: z.ZodType<Prisma.CustomerCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const ExpenseCreateManyOrganizationInputSchema: z.ZodType<Prisma.ExpenseCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmId: z.string().optional().nullable()
}).strict();

export const FamilyCreateManyOrganizationInputSchema: z.ZodType<Prisma.FamilyCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  mobile: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const FamilyMemberCreateManyOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  familyId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const GodNameCreateManyOrganizationInputSchema: z.ZodType<Prisma.GodNameCreateManyOrganizationInput> = z.object({
  id: z.string(),
  value: z.string(),
  price: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  order: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const InvitationCreateManyOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const MemberCreateManyOrganizationInputSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberClassCreateManyOrganizationInputSchema: z.ZodType<Prisma.MemberClassCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const MgYearCreateManyOrganizationInputSchema: z.ZodType<Prisma.MgYearCreateManyOrganizationInput> = z.object({
  id: z.string(),
  order: z.number().int().optional(),
  mgyear: z.string(),
  year: z.string(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const ProductCreateManyOrganizationInputSchema: z.ZodType<Prisma.ProductCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  code: z.string(),
  currency: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  distributionType: z.string().optional(),
  status: z.string().optional(),
  category: z.string()
}).strict();

export const ProfitSharingCreateManyOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const PurchaseCreateManyOrganizationInputSchema: z.ZodType<Prisma.PurchaseCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  type: z.lazy(() => PurchaseTypeSchema),
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RelationshipManagerCreateManyOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerCreateManyOrganizationInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string(),
  phone: z.string().optional().nullable(),
  status: z.string().optional(),
  customerCount: z.number().int().optional(),
  joinDate: z.coerce.date().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.string().optional(),
  resignDate: z.coerce.date().optional().nullable()
}).strict();

export const Service1CreateManyOrganizationInputSchema: z.ZodType<Prisma.Service1CreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Service2CreateManyOrganizationInputSchema: z.ZodType<Prisma.Service2CreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  service1Id: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing1CreateManyOrganizationInputSchema: z.ZodType<Prisma.Servicing1CreateManyOrganizationInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2CreateManyOrganizationInputSchema: z.ZodType<Prisma.Servicing2CreateManyOrganizationInput> = z.object({
  id: z.string(),
  familyId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const TempleCreateManyOrganizationInputSchema: z.ZodType<Prisma.TempleCreateManyOrganizationInput> = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const AiChatUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputSchema).optional()
}).strict();

export const AiChatUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AiChatUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => JsonNullValueInputSchema),z.array(z.object({ role: z.enum(['user', 'assistant']), content: z.string() })) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BankAccountUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customer: z.lazy(() => CustomerUpdateOneWithoutBankAccountsNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BorrowGodUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  godName: z.lazy(() => GodNameUpdateOneRequiredWithoutBorrowGodNestedInputSchema).optional()
}).strict();

export const BorrowGodUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  godNameId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BorrowGodUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BorrowGodUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  godNameId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BuddhistUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BuddhistUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BuddhistUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.BuddhistUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  templeNowText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rm: z.lazy(() => RelationshipManagerUpdateOneWithoutExpensesNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FamilyUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  familyMembers: z.lazy(() => FamilyMemberUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const FamilyUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  familyMembers: z.lazy(() => FamilyMemberUncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutFamilyNestedInputSchema).optional()
}).strict();

export const FamilyUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mobile: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  postalCode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FamilyMemberUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutFamilyMembersNestedInputSchema).optional()
}).strict();

export const FamilyMemberUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FamilyMemberUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GodNameUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  borrowGod: z.lazy(() => BorrowGodUpdateManyWithoutGodNameNestedInputSchema).optional()
}).strict();

export const GodNameUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  borrowGod: z.lazy(() => BorrowGodUncheckedUpdateManyWithoutGodNameNestedInputSchema).optional()
}).strict();

export const GodNameUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.GodNameUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberClassUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberClassUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberClassUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberClassUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MgYearUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MgYearUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MgYearUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MgYearUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgyear: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutProductNestedInputSchema).optional()
}).strict();

export const ProductUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProductUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  distributionType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountUpdateOneWithoutProfitSharingNestedInputSchema).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PurchaseUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputSchema).optional()
}).strict();

export const PurchaseUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PurchaseUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => PurchaseTypeSchema),z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subscriptionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RelationshipManagerUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder1NestedInputSchema).optional(),
  finder2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutFinder2NestedInputSchema).optional(),
  rm1Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm1NestedInputSchema).optional(),
  rm2Customers: z.lazy(() => CustomerUncheckedUpdateManyWithoutRm2NestedInputSchema).optional(),
  expenses: z.lazy(() => ExpenseUncheckedUpdateManyWithoutRmNestedInputSchema).optional()
}).strict();

export const RelationshipManagerUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RelationshipManagerUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resignDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Service1UpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1UpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => Service2UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Service1UncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1UncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service2: z.lazy(() => Service2UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutService1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutService1NestedInputSchema).optional()
}).strict();

export const Service1UncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Service1UncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Service2UpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2UpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Service2UncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2UncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Service2UncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Service2UncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing1UpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1UpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2UpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const Servicing2UncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TempleUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TempleUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TempleUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.TempleUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerCreateManyFinder1InputSchema: z.ZodType<Prisma.CustomerCreateManyFinder1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const CustomerCreateManyFinder2InputSchema: z.ZodType<Prisma.CustomerCreateManyFinder2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const CustomerCreateManyRm1InputSchema: z.ZodType<Prisma.CustomerCreateManyRm1Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm2Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const CustomerCreateManyRm2InputSchema: z.ZodType<Prisma.CustomerCreateManyRm2Input> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  email: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  organizationId: z.string(),
  rm1Id: z.string().optional().nullable(),
  finder1Id: z.string().optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  finder1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2ProfitShare: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  code: z.string()
}).strict();

export const ExpenseCreateManyRmInputSchema: z.ZodType<Prisma.ExpenseCreateManyRmInput> = z.object({
  id: z.string().cuid().optional(),
  category: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  exchangeRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  receiptUrl: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  date: z.coerce.date().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseCreatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdAmount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  usdRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional()
}).strict();

export const CustomerUpdateWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUpdateWithoutFinder1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutFinder1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutFinder1InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutFinder1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUpdateWithoutFinder2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutFinder2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutFinder2InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutFinder2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUpdateWithoutRm1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm2: z.lazy(() => RelationshipManagerUpdateOneWithoutRm2CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutRm1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutRm1InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutRm1Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerUpdateWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUpdateWithoutRm2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUpdateManyWithoutCustomerNestedInputSchema).optional(),
  finder1: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder1CustomersNestedInputSchema).optional(),
  finder2: z.lazy(() => RelationshipManagerUpdateOneWithoutFinder2CustomersNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutCustomersNestedInputSchema).optional(),
  rm1: z.lazy(() => RelationshipManagerUpdateOneWithoutRm1CustomersNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateWithoutRm2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assetTransactions: z.lazy(() => AssetTransactionUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  bankAccounts: z.lazy(() => BankAccountUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutCustomerNestedInputSchema).optional()
}).strict();

export const CustomerUncheckedUpdateManyWithoutRm2InputSchema: z.ZodType<Prisma.CustomerUncheckedUpdateManyWithoutRm2Input> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  finder1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitShare: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUpdateWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUpdateWithoutRmInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutExpensesNestedInputSchema).optional()
}).strict();

export const ExpenseUncheckedUpdateWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateWithoutRmInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExpenseUncheckedUpdateManyWithoutRmInputSchema: z.ZodType<Prisma.ExpenseUncheckedUpdateManyWithoutRmInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  exchangeRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiptUrls: z.union([ z.lazy(() => ExpenseUpdatereceiptUrlsInputSchema),z.string().array() ]).optional(),
  sgdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdAmount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  usdRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionCreateManyCustomerInputSchema: z.ZodType<Prisma.AssetTransactionCreateManyCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  date: z.coerce.date().optional(),
  currency: z.string().optional(),
  type: z.string(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const BankAccountCreateManyCustomerInputSchema: z.ZodType<Prisma.BankAccountCreateManyCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankName: z.string(),
  accountName: z.string().optional().nullable(),
  accountNumber: z.string(),
  currency: z.string().optional(),
  balance: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  status: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProfitSharingCreateManyCustomerInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyCustomerInput> = z.object({
  id: z.string().cuid().optional(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const AssetTransactionUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AssetTransactionUncheckedUpdateManyWithoutCustomerInputSchema: z.ZodType<Prisma.AssetTransactionUncheckedUpdateManyWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BankAccountUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBankAccountsNestedInputSchema).optional(),
  profitSharing: z.lazy(() => ProfitSharingUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  profitSharing: z.lazy(() => ProfitSharingUncheckedUpdateManyWithoutBankAccountNestedInputSchema).optional()
}).strict();

export const BankAccountUncheckedUpdateManyWithoutCustomerInputSchema: z.ZodType<Prisma.BankAccountUncheckedUpdateManyWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accountName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accountNumber: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  balance: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProfitSharingUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountUpdateOneWithoutProfitSharingNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutCustomerInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutCustomerInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingCreateManyBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyBankAccountInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  productId: z.string(),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingUpdateWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithoutBankAccountInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  product: z.lazy(() => ProductUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateWithoutBankAccountInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutBankAccountInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutBankAccountInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  productId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingCreateManyProductInputSchema: z.ZodType<Prisma.ProfitSharingCreateManyProductInput> = z.object({
  id: z.string().cuid().optional(),
  customerId: z.string(),
  bankAccountId: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  amount: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  profitDate: z.coerce.date().optional(),
  companyProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyRevenue: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  companyRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  currency: z.string().optional(),
  directTradeBookingFee: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finderProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  findersRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  findersRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  fxRate: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  rmRevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  rmRevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  shareable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),
  finder1Id: z.string().optional().nullable(),
  finder1Name: z.string().optional().nullable(),
  finder1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2Id: z.string().optional().nullable(),
  finder2Name: z.string().optional().nullable(),
  finder2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1Id: z.string().optional().nullable(),
  rm1Name: z.string().optional().nullable(),
  rm1ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2Id: z.string().optional().nullable(),
  rm2Name: z.string().optional().nullable(),
  rm2ProfitSharePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueOriginal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenueUSD: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  bankRetroPercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  companyFeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  companyRevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  finder2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm1RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2FeePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable(),
  rm2RevenuePercent: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional().nullable()
}).strict();

export const ProfitSharingUpdateWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BankAccount: z.lazy(() => BankAccountUpdateOneWithoutProfitSharingNestedInputSchema).optional(),
  customer: z.lazy(() => CustomerUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutProfitSharingNestedInputSchema).optional()
}).strict();

export const ProfitSharingUncheckedUpdateWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProfitSharingUncheckedUpdateManyWithoutProductInputSchema: z.ZodType<Prisma.ProfitSharingUncheckedUpdateManyWithoutProductInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  customerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  bankAccountId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  profitDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  companyProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenue: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  currency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  directTradeBookingFee: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finderProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  findersRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  fxRate: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  rmRevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  shareable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  finder1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2Name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2ProfitSharePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueOriginal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenueUSD: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bankRetroPercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  companyFeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  companyRevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  finder2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm1RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2FeePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rm2RevenuePercent: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => NullableDecimalFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AnomalyEventCreateManyExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventCreateManyExperimentRunInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  meterId: z.string(),
  eventTimestamp: z.coerce.date(),
  detectionRule: z.string(),
  score: z.number(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.lazy(() => AnomalyEventStatusSchema).optional(),
  reviewerId: z.string().optional().nullable(),
  reviewTimestamp: z.coerce.date().optional().nullable(),
  justificationNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const TrainedModelCreateManyExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelCreateManyExperimentRunInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  modelPath: z.string().optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable()
}).strict();

export const AnomalyEventUpdateWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventUpdateWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkUpdateManyWithoutAnomalyEventNestedInputSchema).optional()
}).strict();

export const AnomalyEventUncheckedUpdateWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedUpdateWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  eventLabelLinks: z.lazy(() => EventLabelLinkUncheckedUpdateManyWithoutAnomalyEventNestedInputSchema).optional()
}).strict();

export const AnomalyEventUncheckedUpdateManyWithoutExperimentRunInputSchema: z.ZodType<Prisma.AnomalyEventUncheckedUpdateManyWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  meterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventTimestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  detectionRule: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  dataWindow: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.lazy(() => AnomalyEventStatusSchema),z.lazy(() => EnumAnomalyEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  reviewerId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reviewTimestamp: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  justificationNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TrainedModelUpdateWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUpdateWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  evaluationRuns: z.lazy(() => EvaluationRunUpdateManyWithoutTrainedModelNestedInputSchema).optional()
}).strict();

export const TrainedModelUncheckedUpdateWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  evaluationRuns: z.lazy(() => EvaluationRunUncheckedUpdateManyWithoutTrainedModelNestedInputSchema).optional()
}).strict();

export const TrainedModelUncheckedUpdateManyWithoutExperimentRunInputSchema: z.ZodType<Prisma.TrainedModelUncheckedUpdateManyWithoutExperimentRunInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  dataSourceConfig: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelPath: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trainingMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EventLabelLinkCreateManyAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkCreateManyAnomalyEventInput> = z.object({
  id: z.string(),
  labelId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const EventLabelLinkUpdateWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateWithoutAnomalyEventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyLabel: z.lazy(() => AnomalyLabelUpdateOneRequiredWithoutEventLabelLinksNestedInputSchema).optional()
}).strict();

export const EventLabelLinkUncheckedUpdateWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedUpdateWithoutAnomalyEventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  labelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventLabelLinkUncheckedUpdateManyWithoutAnomalyEventInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedUpdateManyWithoutAnomalyEventInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  labelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventLabelLinkCreateManyAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkCreateManyAnomalyLabelInput> = z.object({
  id: z.string(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const EventLabelLinkUpdateWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkUpdateWithoutAnomalyLabelInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEvent: z.lazy(() => AnomalyEventUpdateOneRequiredWithoutEventLabelLinksNestedInputSchema).optional()
}).strict();

export const EventLabelLinkUncheckedUpdateWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedUpdateWithoutAnomalyLabelInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EventLabelLinkUncheckedUpdateManyWithoutAnomalyLabelInputSchema: z.ZodType<Prisma.EventLabelLinkUncheckedUpdateManyWithoutAnomalyLabelInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FamilyMemberCreateManyFamilyInputSchema: z.ZodType<Prisma.FamilyMemberCreateManyFamilyInput> = z.object({
  id: z.string(),
  name: z.string(),
  relation: z.string().optional().nullable(),
  birthday: z.coerce.date().optional().nullable(),
  lunarDate: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  note: z.string().optional().nullable(),
  mainPerson: z.string().optional(),
  mailThis: z.string().optional(),
  isLive: z.string().optional(),
  postcode: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing1CreateManyFamilyInputSchema: z.ZodType<Prisma.Servicing1CreateManyFamilyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2CreateManyFamilyInputSchema: z.ZodType<Prisma.Servicing2CreateManyFamilyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const FamilyMemberUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutFamily_memberNestedInputSchema).optional()
}).strict();

export const FamilyMemberUncheckedUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FamilyMemberUncheckedUpdateManyWithoutFamilyInputSchema: z.ZodType<Prisma.FamilyMemberUncheckedUpdateManyWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birthday: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lunarDate: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gender: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  note: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mainPerson: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mailThis: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isLive: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  postcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing1UpdateWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1UpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateManyWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateManyWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UpdateWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2UpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const Servicing2UncheckedUpdateWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutFamilyInputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutFamilyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BorrowGodCreateManyGodNameInputSchema: z.ZodType<Prisma.BorrowGodCreateManyGodNameInput> = z.object({
  id: z.string(),
  applyName: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  typeId: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const BorrowGodUpdateWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodUpdateWithoutGodNameInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutBorrow_godNestedInputSchema).optional()
}).strict();

export const BorrowGodUncheckedUpdateWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodUncheckedUpdateWithoutGodNameInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BorrowGodUncheckedUpdateManyWithoutGodNameInputSchema: z.ZodType<Prisma.BorrowGodUncheckedUpdateManyWithoutGodNameInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyName: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  typeId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Service2CreateManyService1InputSchema: z.ZodType<Prisma.Service2CreateManyService1Input> = z.object({
  id: z.string(),
  name: z.string(),
  level: z.number().int().optional(),
  nowUse: z.string().optional(),
  organizationId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing1CreateManyService1InputSchema: z.ZodType<Prisma.Servicing1CreateManyService1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2CreateManyService1InputSchema: z.ZodType<Prisma.Servicing2CreateManyService1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Service2UpdateWithoutService1InputSchema: z.ZodType<Prisma.Service2UpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutService2NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Service2UncheckedUpdateWithoutService1InputSchema: z.ZodType<Prisma.Service2UncheckedUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1: z.lazy(() => Servicing1UncheckedUpdateManyWithoutService2NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutService2NestedInputSchema).optional()
}).strict();

export const Service2UncheckedUpdateManyWithoutService1InputSchema: z.ZodType<Prisma.Service2UncheckedUpdateManyWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  nowUse: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing1UpdateWithoutService1InputSchema: z.ZodType<Prisma.Servicing1UpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateWithoutService1InputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateManyWithoutService1InputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateManyWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UpdateWithoutService1InputSchema: z.ZodType<Prisma.Servicing2UpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const Servicing2UncheckedUpdateWithoutService1InputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutService1InputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutService1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing1CreateManyService2InputSchema: z.ZodType<Prisma.Servicing1CreateManyService2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  applyDate: z.coerce.date(),
  applyText: z.string(),
  cellphone: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  service1Id: z.string(),
  serial: z.string().optional().nullable(),
  accReceivable: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accReceived: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  accPending: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  payStatus: z.string().optional().nullable(),
  payMethod: z.string().optional().nullable(),
  payCurrency: z.string().optional(),
  receiptNum: z.string().optional().nullable(),
  booksNum: z.string().optional().nullable(),
  payee: z.string().optional().nullable(),
  advisePeople: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2CreateManyService2InputSchema: z.ZodType<Prisma.Servicing2CreateManyService2Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  servicing1Id: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing1UpdateWithoutService2InputSchema: z.ZodType<Prisma.Servicing1UpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing1NestedInputSchema).optional(),
  servicing2: z.lazy(() => Servicing2UpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateWithoutService2InputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  servicing2: z.lazy(() => Servicing2UncheckedUpdateManyWithoutServicing1NestedInputSchema).optional()
}).strict();

export const Servicing1UncheckedUpdateManyWithoutService2InputSchema: z.ZodType<Prisma.Servicing1UncheckedUpdateManyWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  applyDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  applyText: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cellphone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accReceivable: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accReceived: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  accPending: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  payStatus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payMethod: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payCurrency: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiptNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  booksNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  payee: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  advisePeople: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UpdateWithoutService2InputSchema: z.ZodType<Prisma.Servicing2UpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  servicing1: z.lazy(() => Servicing1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional()
}).strict();

export const Servicing2UncheckedUpdateWithoutService2InputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutService2InputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutService2Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  servicing1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2CreateManyServicing1InputSchema: z.ZodType<Prisma.Servicing2CreateManyServicing1Input> = z.object({
  id: z.string(),
  familyId: z.string(),
  organizationId: z.string(),
  ordernum: z.string(),
  year: z.string(),
  service1Id: z.string(),
  service2Id: z.string().optional().nullable(),
  serial: z.string().optional().nullable(),
  praytypeId: z.string().optional().nullable(),
  printType1Id: z.string().optional().nullable(),
  printType2Id: z.string().optional().nullable(),
  livename: z.string().optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.string().optional().nullable(),
  passname1: z.string().optional().nullable(),
  passname2: z.string().optional().nullable(),
  passname3: z.string().optional().nullable(),
  passname4: z.string().optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.string().optional().nullable(),
  sexualId: z.string().optional().nullable(),
  sexualText: z.string().optional().nullable(),
  liveYear: z.number().int().optional().nullable(),
  boxNum: z.string().optional().nullable(),
  rowTotal: z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }).optional(),
  bornYear: z.string().optional().nullable(),
  bornMonth: z.string().optional().nullable(),
  bornDay: z.string().optional().nullable(),
  bornTime: z.string().optional().nullable(),
  addr: z.string().optional().nullable(),
  ps: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date()
}).strict();

export const Servicing2UpdateWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2UpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  family: z.lazy(() => FamilyUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service1: z.lazy(() => Service1UpdateOneRequiredWithoutServicing2NestedInputSchema).optional(),
  service2: z.lazy(() => Service2UpdateOneWithoutServicing2NestedInputSchema).optional()
}).strict();

export const Servicing2UncheckedUpdateWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Servicing2UncheckedUpdateManyWithoutServicing1InputSchema: z.ZodType<Prisma.Servicing2UncheckedUpdateManyWithoutServicing1Input> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  familyId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ordernum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service1Id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  service2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serial: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  praytypeId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType1Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printType2Id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  livename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people1: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  passname: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname3: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passname4: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  people0: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sexualText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  liveYear: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  boxNum: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rowTotal: z.union([ z.union([z.number(),z.string(),z.instanceof(Decimal),z.instanceof(Prisma.Decimal),DecimalJsLikeSchema,]).refine((v) => isValidDecimalInput(v), { message: 'Must be a Decimal' }),z.lazy(() => DecimalFieldUpdateOperationsInputSchema) ]).optional(),
  bornYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornMonth: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornDay: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bornTime: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addr: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ps: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EvaluationRunCreateManyTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunCreateManyTrainedModelInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  scenarioType: z.string(),
  status: z.string(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  completedAt: z.coerce.date().optional().nullable()
}).strict();

export const EvaluationRunUpdateWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunUpdateWithoutTrainedModelInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  predictions: z.lazy(() => ModelPredictionUpdateManyWithoutEvaluationRunNestedInputSchema).optional()
}).strict();

export const EvaluationRunUncheckedUpdateWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedUpdateWithoutTrainedModelInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  predictions: z.lazy(() => ModelPredictionUncheckedUpdateManyWithoutEvaluationRunNestedInputSchema).optional()
}).strict();

export const EvaluationRunUncheckedUpdateManyWithoutTrainedModelInputSchema: z.ZodType<Prisma.EvaluationRunUncheckedUpdateManyWithoutTrainedModelInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  scenarioType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testSetSource: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  evaluationMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelPredictionCreateManyEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionCreateManyEvaluationRunInput> = z.object({
  id: z.string().cuid().optional(),
  anomalyEventId: z.string().optional().nullable(),
  timestamp: z.coerce.date(),
  predictionScore: z.number(),
  groundTruth: z.number().int().optional().nullable()
}).strict();

export const ModelPredictionUpdateWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionUpdateWithoutEvaluationRunInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  predictionScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  groundTruth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelPredictionUncheckedUpdateWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionUncheckedUpdateWithoutEvaluationRunInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  predictionScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  groundTruth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelPredictionUncheckedUpdateManyWithoutEvaluationRunInputSchema: z.ZodType<Prisma.ModelPredictionUncheckedUpdateManyWithoutEvaluationRunInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  anomalyEventId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  predictionScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  groundTruth: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const UserFindFirstArgsSchema: z.ZodType<Omit<Prisma.UserFindFirstArgs, "select" | "include">> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.UserFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Omit<Prisma.UserFindManyArgs, "select" | "include">> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Omit<Prisma.UserFindUniqueArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.UserFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Omit<Prisma.SessionFindFirstArgs, "select" | "include">> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.SessionFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Omit<Prisma.SessionFindManyArgs, "select" | "include">> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Omit<Prisma.SessionFindUniqueArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.SessionFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const AccountFindFirstArgsSchema: z.ZodType<Omit<Prisma.AccountFindFirstArgs, "select" | "include">> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AccountFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindManyArgsSchema: z.ZodType<Omit<Prisma.AccountFindManyArgs, "select" | "include">> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AccountFindUniqueArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AccountFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindFirstArgsSchema: z.ZodType<Omit<Prisma.VerificationFindFirstArgs, "select">> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.VerificationFindFirstOrThrowArgs, "select">> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindManyArgsSchema: z.ZodType<Omit<Prisma.VerificationFindManyArgs, "select">> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationAggregateArgsSchema: z.ZodType<Prisma.VerificationAggregateArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationGroupByArgsSchema: z.ZodType<Prisma.VerificationGroupByArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithAggregationInputSchema.array(),VerificationOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationScalarFieldEnumSchema.array(),
  having: VerificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationFindUniqueArgsSchema: z.ZodType<Omit<Prisma.VerificationFindUniqueArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.VerificationFindUniqueOrThrowArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const PasskeyFindFirstArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindFirstArgs, "select" | "include">> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasskeyScalarFieldEnumSchema,PasskeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasskeyFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasskeyScalarFieldEnumSchema,PasskeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasskeyFindManyArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindManyArgs, "select" | "include">> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasskeyScalarFieldEnumSchema,PasskeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasskeyAggregateArgsSchema: z.ZodType<Prisma.PasskeyAggregateArgs> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithRelationInputSchema.array(),PasskeyOrderByWithRelationInputSchema ]).optional(),
  cursor: PasskeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasskeyGroupByArgsSchema: z.ZodType<Prisma.PasskeyGroupByArgs> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  orderBy: z.union([ PasskeyOrderByWithAggregationInputSchema.array(),PasskeyOrderByWithAggregationInputSchema ]).optional(),
  by: PasskeyScalarFieldEnumSchema.array(),
  having: PasskeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasskeyFindUniqueArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindUniqueArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const PasskeyFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.PasskeyFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorFindFirstArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindFirstArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorFindManyArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindManyArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorAggregateArgsSchema: z.ZodType<Prisma.TwoFactorAggregateArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TwoFactorGroupByArgsSchema: z.ZodType<Prisma.TwoFactorGroupByArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithAggregationInputSchema.array(),TwoFactorOrderByWithAggregationInputSchema ]).optional(),
  by: TwoFactorScalarFieldEnumSchema.array(),
  having: TwoFactorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TwoFactorFindUniqueArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindUniqueArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.TwoFactorFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindFirstArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindFirstArgs, "select" | "include">> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindManyArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindManyArgs, "select" | "include">> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFindUniqueArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindUniqueArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.OrganizationFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const RelationshipManagerFindFirstArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindFirstArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithRelationInputSchema.array(),RelationshipManagerOrderByWithRelationInputSchema ]).optional(),
  cursor: RelationshipManagerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RelationshipManagerScalarFieldEnumSchema,RelationshipManagerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RelationshipManagerFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithRelationInputSchema.array(),RelationshipManagerOrderByWithRelationInputSchema ]).optional(),
  cursor: RelationshipManagerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RelationshipManagerScalarFieldEnumSchema,RelationshipManagerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RelationshipManagerFindManyArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindManyArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithRelationInputSchema.array(),RelationshipManagerOrderByWithRelationInputSchema ]).optional(),
  cursor: RelationshipManagerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RelationshipManagerScalarFieldEnumSchema,RelationshipManagerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RelationshipManagerAggregateArgsSchema: z.ZodType<Prisma.RelationshipManagerAggregateArgs> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithRelationInputSchema.array(),RelationshipManagerOrderByWithRelationInputSchema ]).optional(),
  cursor: RelationshipManagerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RelationshipManagerGroupByArgsSchema: z.ZodType<Prisma.RelationshipManagerGroupByArgs> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  orderBy: z.union([ RelationshipManagerOrderByWithAggregationInputSchema.array(),RelationshipManagerOrderByWithAggregationInputSchema ]).optional(),
  by: RelationshipManagerScalarFieldEnumSchema.array(),
  having: RelationshipManagerScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RelationshipManagerFindUniqueArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindUniqueArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereUniqueInputSchema,
}).strict() ;

export const RelationshipManagerFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereUniqueInputSchema,
}).strict() ;

export const CustomerFindFirstArgsSchema: z.ZodType<Omit<Prisma.CustomerFindFirstArgs, "select" | "include">> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerScalarFieldEnumSchema,CustomerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.CustomerFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerScalarFieldEnumSchema,CustomerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerFindManyArgsSchema: z.ZodType<Omit<Prisma.CustomerFindManyArgs, "select" | "include">> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerScalarFieldEnumSchema,CustomerScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerAggregateArgsSchema: z.ZodType<Prisma.CustomerAggregateArgs> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithRelationInputSchema.array(),CustomerOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerGroupByArgsSchema: z.ZodType<Prisma.CustomerGroupByArgs> = z.object({
  where: CustomerWhereInputSchema.optional(),
  orderBy: z.union([ CustomerOrderByWithAggregationInputSchema.array(),CustomerOrderByWithAggregationInputSchema ]).optional(),
  by: CustomerScalarFieldEnumSchema.array(),
  having: CustomerScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerFindUniqueArgsSchema: z.ZodType<Omit<Prisma.CustomerFindUniqueArgs, "select" | "include">> = z.object({
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.CustomerFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const MemberFindFirstArgsSchema: z.ZodType<Omit<Prisma.MemberFindFirstArgs, "select" | "include">> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.MemberFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberFindManyArgsSchema: z.ZodType<Omit<Prisma.MemberFindManyArgs, "select" | "include">> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberAggregateArgsSchema: z.ZodType<Prisma.MemberAggregateArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberGroupByArgsSchema: z.ZodType<Prisma.MemberGroupByArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithAggregationInputSchema.array(),MemberOrderByWithAggregationInputSchema ]).optional(),
  by: MemberScalarFieldEnumSchema.array(),
  having: MemberScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberFindUniqueArgsSchema: z.ZodType<Omit<Prisma.MemberFindUniqueArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.MemberFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindFirstArgsSchema: z.ZodType<Omit<Prisma.InvitationFindFirstArgs, "select" | "include">> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.InvitationFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindManyArgsSchema: z.ZodType<Omit<Prisma.InvitationFindManyArgs, "select" | "include">> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationAggregateArgsSchema: z.ZodType<Prisma.InvitationAggregateArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationGroupByArgsSchema: z.ZodType<Prisma.InvitationGroupByArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithAggregationInputSchema.array(),InvitationOrderByWithAggregationInputSchema ]).optional(),
  by: InvitationScalarFieldEnumSchema.array(),
  having: InvitationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationFindUniqueArgsSchema: z.ZodType<Omit<Prisma.InvitationFindUniqueArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.InvitationFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const PurchaseFindFirstArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindFirstArgs, "select" | "include">> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurchaseScalarFieldEnumSchema,PurchaseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurchaseFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurchaseScalarFieldEnumSchema,PurchaseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurchaseFindManyArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindManyArgs, "select" | "include">> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PurchaseScalarFieldEnumSchema,PurchaseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PurchaseAggregateArgsSchema: z.ZodType<Prisma.PurchaseAggregateArgs> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithRelationInputSchema.array(),PurchaseOrderByWithRelationInputSchema ]).optional(),
  cursor: PurchaseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PurchaseGroupByArgsSchema: z.ZodType<Prisma.PurchaseGroupByArgs> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  orderBy: z.union([ PurchaseOrderByWithAggregationInputSchema.array(),PurchaseOrderByWithAggregationInputSchema ]).optional(),
  by: PurchaseScalarFieldEnumSchema.array(),
  having: PurchaseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PurchaseFindUniqueArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindUniqueArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const PurchaseFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.PurchaseFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const AiChatFindFirstArgsSchema: z.ZodType<Omit<Prisma.AiChatFindFirstArgs, "select" | "include">> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AiChatScalarFieldEnumSchema,AiChatScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AiChatFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AiChatFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AiChatScalarFieldEnumSchema,AiChatScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AiChatFindManyArgsSchema: z.ZodType<Omit<Prisma.AiChatFindManyArgs, "select" | "include">> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AiChatScalarFieldEnumSchema,AiChatScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AiChatAggregateArgsSchema: z.ZodType<Prisma.AiChatAggregateArgs> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithRelationInputSchema.array(),AiChatOrderByWithRelationInputSchema ]).optional(),
  cursor: AiChatWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AiChatGroupByArgsSchema: z.ZodType<Prisma.AiChatGroupByArgs> = z.object({
  where: AiChatWhereInputSchema.optional(),
  orderBy: z.union([ AiChatOrderByWithAggregationInputSchema.array(),AiChatOrderByWithAggregationInputSchema ]).optional(),
  by: AiChatScalarFieldEnumSchema.array(),
  having: AiChatScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AiChatFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AiChatFindUniqueArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const AiChatFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AiChatFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const BankAccountFindFirstArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindFirstArgs, "select" | "include">> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithRelationInputSchema.array(),BankAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: BankAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BankAccountScalarFieldEnumSchema,BankAccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BankAccountFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithRelationInputSchema.array(),BankAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: BankAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BankAccountScalarFieldEnumSchema,BankAccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BankAccountFindManyArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindManyArgs, "select" | "include">> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithRelationInputSchema.array(),BankAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: BankAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BankAccountScalarFieldEnumSchema,BankAccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BankAccountAggregateArgsSchema: z.ZodType<Prisma.BankAccountAggregateArgs> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithRelationInputSchema.array(),BankAccountOrderByWithRelationInputSchema ]).optional(),
  cursor: BankAccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BankAccountGroupByArgsSchema: z.ZodType<Prisma.BankAccountGroupByArgs> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  orderBy: z.union([ BankAccountOrderByWithAggregationInputSchema.array(),BankAccountOrderByWithAggregationInputSchema ]).optional(),
  by: BankAccountScalarFieldEnumSchema.array(),
  having: BankAccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BankAccountFindUniqueArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindUniqueArgs, "select" | "include">> = z.object({
  where: BankAccountWhereUniqueInputSchema,
}).strict() ;

export const BankAccountFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.BankAccountFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: BankAccountWhereUniqueInputSchema,
}).strict() ;

export const ExpenseFindFirstArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindFirstArgs, "select" | "include">> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseFindManyArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindManyArgs, "select" | "include">> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExpenseScalarFieldEnumSchema,ExpenseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExpenseAggregateArgsSchema: z.ZodType<Prisma.ExpenseAggregateArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithRelationInputSchema.array(),ExpenseOrderByWithRelationInputSchema ]).optional(),
  cursor: ExpenseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseGroupByArgsSchema: z.ZodType<Prisma.ExpenseGroupByArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  orderBy: z.union([ ExpenseOrderByWithAggregationInputSchema.array(),ExpenseOrderByWithAggregationInputSchema ]).optional(),
  by: ExpenseScalarFieldEnumSchema.array(),
  having: ExpenseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExpenseFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindUniqueArgs, "select" | "include">> = z.object({
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ExpenseFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ProductFindFirstArgsSchema: z.ZodType<Omit<Prisma.ProductFindFirstArgs, "select" | "include">> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProductFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductFindManyArgsSchema: z.ZodType<Omit<Prisma.ProductFindManyArgs, "select" | "include">> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductScalarFieldEnumSchema,ProductScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductAggregateArgsSchema: z.ZodType<Prisma.ProductAggregateArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithRelationInputSchema.array(),ProductOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductGroupByArgsSchema: z.ZodType<Prisma.ProductGroupByArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  orderBy: z.union([ ProductOrderByWithAggregationInputSchema.array(),ProductOrderByWithAggregationInputSchema ]).optional(),
  by: ProductScalarFieldEnumSchema.array(),
  having: ProductScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ProductFindUniqueArgs, "select" | "include">> = z.object({
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProductFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProfitSharingFindFirstArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindFirstArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithRelationInputSchema.array(),ProfitSharingOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfitSharingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfitSharingScalarFieldEnumSchema,ProfitSharingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfitSharingFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithRelationInputSchema.array(),ProfitSharingOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfitSharingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfitSharingScalarFieldEnumSchema,ProfitSharingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfitSharingFindManyArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindManyArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithRelationInputSchema.array(),ProfitSharingOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfitSharingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProfitSharingScalarFieldEnumSchema,ProfitSharingScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProfitSharingAggregateArgsSchema: z.ZodType<Prisma.ProfitSharingAggregateArgs> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithRelationInputSchema.array(),ProfitSharingOrderByWithRelationInputSchema ]).optional(),
  cursor: ProfitSharingWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfitSharingGroupByArgsSchema: z.ZodType<Prisma.ProfitSharingGroupByArgs> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  orderBy: z.union([ ProfitSharingOrderByWithAggregationInputSchema.array(),ProfitSharingOrderByWithAggregationInputSchema ]).optional(),
  by: ProfitSharingScalarFieldEnumSchema.array(),
  having: ProfitSharingScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProfitSharingFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindUniqueArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereUniqueInputSchema,
}).strict() ;

export const ProfitSharingFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereUniqueInputSchema,
}).strict() ;

export const AssetTransactionFindFirstArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindFirstArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithRelationInputSchema.array(),AssetTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: AssetTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AssetTransactionScalarFieldEnumSchema,AssetTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AssetTransactionFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithRelationInputSchema.array(),AssetTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: AssetTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AssetTransactionScalarFieldEnumSchema,AssetTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AssetTransactionFindManyArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindManyArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithRelationInputSchema.array(),AssetTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: AssetTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AssetTransactionScalarFieldEnumSchema,AssetTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AssetTransactionAggregateArgsSchema: z.ZodType<Prisma.AssetTransactionAggregateArgs> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithRelationInputSchema.array(),AssetTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: AssetTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AssetTransactionGroupByArgsSchema: z.ZodType<Prisma.AssetTransactionGroupByArgs> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  orderBy: z.union([ AssetTransactionOrderByWithAggregationInputSchema.array(),AssetTransactionOrderByWithAggregationInputSchema ]).optional(),
  by: AssetTransactionScalarFieldEnumSchema.array(),
  having: AssetTransactionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AssetTransactionFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindUniqueArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereUniqueInputSchema,
}).strict() ;

export const AssetTransactionFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereUniqueInputSchema,
}).strict() ;

export const AmmeterFindFirstArgsSchema: z.ZodType<Omit<Prisma.AmmeterFindFirstArgs, "select">> = z.object({
  where: AmmeterWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterOrderByWithRelationInputSchema.array(),AmmeterOrderByWithRelationInputSchema ]).optional(),
  cursor: AmmeterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmmeterScalarFieldEnumSchema,AmmeterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AmmeterFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AmmeterFindFirstOrThrowArgs, "select">> = z.object({
  where: AmmeterWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterOrderByWithRelationInputSchema.array(),AmmeterOrderByWithRelationInputSchema ]).optional(),
  cursor: AmmeterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmmeterScalarFieldEnumSchema,AmmeterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AmmeterFindManyArgsSchema: z.ZodType<Omit<Prisma.AmmeterFindManyArgs, "select">> = z.object({
  where: AmmeterWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterOrderByWithRelationInputSchema.array(),AmmeterOrderByWithRelationInputSchema ]).optional(),
  cursor: AmmeterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmmeterScalarFieldEnumSchema,AmmeterScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AmmeterAggregateArgsSchema: z.ZodType<Prisma.AmmeterAggregateArgs> = z.object({
  where: AmmeterWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterOrderByWithRelationInputSchema.array(),AmmeterOrderByWithRelationInputSchema ]).optional(),
  cursor: AmmeterWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AmmeterGroupByArgsSchema: z.ZodType<Prisma.AmmeterGroupByArgs> = z.object({
  where: AmmeterWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterOrderByWithAggregationInputSchema.array(),AmmeterOrderByWithAggregationInputSchema ]).optional(),
  by: AmmeterScalarFieldEnumSchema.array(),
  having: AmmeterScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AmmeterFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AmmeterFindUniqueArgs, "select">> = z.object({
  where: AmmeterWhereUniqueInputSchema,
}).strict() ;

export const AmmeterFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AmmeterFindUniqueOrThrowArgs, "select">> = z.object({
  where: AmmeterWhereUniqueInputSchema,
}).strict() ;

export const AmmeterLogFindFirstArgsSchema: z.ZodType<Omit<Prisma.AmmeterLogFindFirstArgs, "select">> = z.object({
  where: AmmeterLogWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterLogOrderByWithRelationInputSchema.array(),AmmeterLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AmmeterLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmmeterLogScalarFieldEnumSchema,AmmeterLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AmmeterLogFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AmmeterLogFindFirstOrThrowArgs, "select">> = z.object({
  where: AmmeterLogWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterLogOrderByWithRelationInputSchema.array(),AmmeterLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AmmeterLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmmeterLogScalarFieldEnumSchema,AmmeterLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AmmeterLogFindManyArgsSchema: z.ZodType<Omit<Prisma.AmmeterLogFindManyArgs, "select">> = z.object({
  where: AmmeterLogWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterLogOrderByWithRelationInputSchema.array(),AmmeterLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AmmeterLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AmmeterLogScalarFieldEnumSchema,AmmeterLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AmmeterLogAggregateArgsSchema: z.ZodType<Prisma.AmmeterLogAggregateArgs> = z.object({
  where: AmmeterLogWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterLogOrderByWithRelationInputSchema.array(),AmmeterLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AmmeterLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AmmeterLogGroupByArgsSchema: z.ZodType<Prisma.AmmeterLogGroupByArgs> = z.object({
  where: AmmeterLogWhereInputSchema.optional(),
  orderBy: z.union([ AmmeterLogOrderByWithAggregationInputSchema.array(),AmmeterLogOrderByWithAggregationInputSchema ]).optional(),
  by: AmmeterLogScalarFieldEnumSchema.array(),
  having: AmmeterLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AmmeterLogFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AmmeterLogFindUniqueArgs, "select">> = z.object({
  where: AmmeterLogWhereUniqueInputSchema,
}).strict() ;

export const AmmeterLogFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AmmeterLogFindUniqueOrThrowArgs, "select">> = z.object({
  where: AmmeterLogWhereUniqueInputSchema,
}).strict() ;

export const ExperimentRunFindFirstArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindFirstArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithRelationInputSchema.array(),ExperimentRunOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExperimentRunScalarFieldEnumSchema,ExperimentRunScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExperimentRunFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithRelationInputSchema.array(),ExperimentRunOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExperimentRunScalarFieldEnumSchema,ExperimentRunScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExperimentRunFindManyArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindManyArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithRelationInputSchema.array(),ExperimentRunOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExperimentRunScalarFieldEnumSchema,ExperimentRunScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExperimentRunAggregateArgsSchema: z.ZodType<Prisma.ExperimentRunAggregateArgs> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithRelationInputSchema.array(),ExperimentRunOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExperimentRunGroupByArgsSchema: z.ZodType<Prisma.ExperimentRunGroupByArgs> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentRunOrderByWithAggregationInputSchema.array(),ExperimentRunOrderByWithAggregationInputSchema ]).optional(),
  by: ExperimentRunScalarFieldEnumSchema.array(),
  having: ExperimentRunScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExperimentRunFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindUniqueArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereUniqueInputSchema,
}).strict() ;

export const ExperimentRunFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereUniqueInputSchema,
}).strict() ;

export const AnomalyEventFindFirstArgsSchema: z.ZodType<Omit<Prisma.AnomalyEventFindFirstArgs, "select" | "include">> = z.object({
  where: AnomalyEventWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyEventOrderByWithRelationInputSchema.array(),AnomalyEventOrderByWithRelationInputSchema ]).optional(),
  cursor: AnomalyEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnomalyEventScalarFieldEnumSchema,AnomalyEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnomalyEventFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AnomalyEventFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AnomalyEventWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyEventOrderByWithRelationInputSchema.array(),AnomalyEventOrderByWithRelationInputSchema ]).optional(),
  cursor: AnomalyEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnomalyEventScalarFieldEnumSchema,AnomalyEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnomalyEventFindManyArgsSchema: z.ZodType<Omit<Prisma.AnomalyEventFindManyArgs, "select" | "include">> = z.object({
  where: AnomalyEventWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyEventOrderByWithRelationInputSchema.array(),AnomalyEventOrderByWithRelationInputSchema ]).optional(),
  cursor: AnomalyEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnomalyEventScalarFieldEnumSchema,AnomalyEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnomalyEventAggregateArgsSchema: z.ZodType<Prisma.AnomalyEventAggregateArgs> = z.object({
  where: AnomalyEventWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyEventOrderByWithRelationInputSchema.array(),AnomalyEventOrderByWithRelationInputSchema ]).optional(),
  cursor: AnomalyEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnomalyEventGroupByArgsSchema: z.ZodType<Prisma.AnomalyEventGroupByArgs> = z.object({
  where: AnomalyEventWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyEventOrderByWithAggregationInputSchema.array(),AnomalyEventOrderByWithAggregationInputSchema ]).optional(),
  by: AnomalyEventScalarFieldEnumSchema.array(),
  having: AnomalyEventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnomalyEventFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AnomalyEventFindUniqueArgs, "select" | "include">> = z.object({
  where: AnomalyEventWhereUniqueInputSchema,
}).strict() ;

export const AnomalyEventFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AnomalyEventFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AnomalyEventWhereUniqueInputSchema,
}).strict() ;

export const AnomalyLabelFindFirstArgsSchema: z.ZodType<Omit<Prisma.AnomalyLabelFindFirstArgs, "select" | "include">> = z.object({
  where: AnomalyLabelWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyLabelOrderByWithRelationInputSchema.array(),AnomalyLabelOrderByWithRelationInputSchema ]).optional(),
  cursor: AnomalyLabelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnomalyLabelScalarFieldEnumSchema,AnomalyLabelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnomalyLabelFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.AnomalyLabelFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: AnomalyLabelWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyLabelOrderByWithRelationInputSchema.array(),AnomalyLabelOrderByWithRelationInputSchema ]).optional(),
  cursor: AnomalyLabelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnomalyLabelScalarFieldEnumSchema,AnomalyLabelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnomalyLabelFindManyArgsSchema: z.ZodType<Omit<Prisma.AnomalyLabelFindManyArgs, "select" | "include">> = z.object({
  where: AnomalyLabelWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyLabelOrderByWithRelationInputSchema.array(),AnomalyLabelOrderByWithRelationInputSchema ]).optional(),
  cursor: AnomalyLabelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnomalyLabelScalarFieldEnumSchema,AnomalyLabelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnomalyLabelAggregateArgsSchema: z.ZodType<Prisma.AnomalyLabelAggregateArgs> = z.object({
  where: AnomalyLabelWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyLabelOrderByWithRelationInputSchema.array(),AnomalyLabelOrderByWithRelationInputSchema ]).optional(),
  cursor: AnomalyLabelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnomalyLabelGroupByArgsSchema: z.ZodType<Prisma.AnomalyLabelGroupByArgs> = z.object({
  where: AnomalyLabelWhereInputSchema.optional(),
  orderBy: z.union([ AnomalyLabelOrderByWithAggregationInputSchema.array(),AnomalyLabelOrderByWithAggregationInputSchema ]).optional(),
  by: AnomalyLabelScalarFieldEnumSchema.array(),
  having: AnomalyLabelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnomalyLabelFindUniqueArgsSchema: z.ZodType<Omit<Prisma.AnomalyLabelFindUniqueArgs, "select" | "include">> = z.object({
  where: AnomalyLabelWhereUniqueInputSchema,
}).strict() ;

export const AnomalyLabelFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.AnomalyLabelFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: AnomalyLabelWhereUniqueInputSchema,
}).strict() ;

export const BorrowGodFindFirstArgsSchema: z.ZodType<Omit<Prisma.BorrowGodFindFirstArgs, "select" | "include">> = z.object({
  where: BorrowGodWhereInputSchema.optional(),
  orderBy: z.union([ BorrowGodOrderByWithRelationInputSchema.array(),BorrowGodOrderByWithRelationInputSchema ]).optional(),
  cursor: BorrowGodWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BorrowGodScalarFieldEnumSchema,BorrowGodScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BorrowGodFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.BorrowGodFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: BorrowGodWhereInputSchema.optional(),
  orderBy: z.union([ BorrowGodOrderByWithRelationInputSchema.array(),BorrowGodOrderByWithRelationInputSchema ]).optional(),
  cursor: BorrowGodWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BorrowGodScalarFieldEnumSchema,BorrowGodScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BorrowGodFindManyArgsSchema: z.ZodType<Omit<Prisma.BorrowGodFindManyArgs, "select" | "include">> = z.object({
  where: BorrowGodWhereInputSchema.optional(),
  orderBy: z.union([ BorrowGodOrderByWithRelationInputSchema.array(),BorrowGodOrderByWithRelationInputSchema ]).optional(),
  cursor: BorrowGodWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BorrowGodScalarFieldEnumSchema,BorrowGodScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BorrowGodAggregateArgsSchema: z.ZodType<Prisma.BorrowGodAggregateArgs> = z.object({
  where: BorrowGodWhereInputSchema.optional(),
  orderBy: z.union([ BorrowGodOrderByWithRelationInputSchema.array(),BorrowGodOrderByWithRelationInputSchema ]).optional(),
  cursor: BorrowGodWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BorrowGodGroupByArgsSchema: z.ZodType<Prisma.BorrowGodGroupByArgs> = z.object({
  where: BorrowGodWhereInputSchema.optional(),
  orderBy: z.union([ BorrowGodOrderByWithAggregationInputSchema.array(),BorrowGodOrderByWithAggregationInputSchema ]).optional(),
  by: BorrowGodScalarFieldEnumSchema.array(),
  having: BorrowGodScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BorrowGodFindUniqueArgsSchema: z.ZodType<Omit<Prisma.BorrowGodFindUniqueArgs, "select" | "include">> = z.object({
  where: BorrowGodWhereUniqueInputSchema,
}).strict() ;

export const BorrowGodFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.BorrowGodFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: BorrowGodWhereUniqueInputSchema,
}).strict() ;

export const BuddhistFindFirstArgsSchema: z.ZodType<Omit<Prisma.BuddhistFindFirstArgs, "select" | "include">> = z.object({
  where: BuddhistWhereInputSchema.optional(),
  orderBy: z.union([ BuddhistOrderByWithRelationInputSchema.array(),BuddhistOrderByWithRelationInputSchema ]).optional(),
  cursor: BuddhistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BuddhistScalarFieldEnumSchema,BuddhistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BuddhistFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.BuddhistFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: BuddhistWhereInputSchema.optional(),
  orderBy: z.union([ BuddhistOrderByWithRelationInputSchema.array(),BuddhistOrderByWithRelationInputSchema ]).optional(),
  cursor: BuddhistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BuddhistScalarFieldEnumSchema,BuddhistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BuddhistFindManyArgsSchema: z.ZodType<Omit<Prisma.BuddhistFindManyArgs, "select" | "include">> = z.object({
  where: BuddhistWhereInputSchema.optional(),
  orderBy: z.union([ BuddhistOrderByWithRelationInputSchema.array(),BuddhistOrderByWithRelationInputSchema ]).optional(),
  cursor: BuddhistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BuddhistScalarFieldEnumSchema,BuddhistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BuddhistAggregateArgsSchema: z.ZodType<Prisma.BuddhistAggregateArgs> = z.object({
  where: BuddhistWhereInputSchema.optional(),
  orderBy: z.union([ BuddhistOrderByWithRelationInputSchema.array(),BuddhistOrderByWithRelationInputSchema ]).optional(),
  cursor: BuddhistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BuddhistGroupByArgsSchema: z.ZodType<Prisma.BuddhistGroupByArgs> = z.object({
  where: BuddhistWhereInputSchema.optional(),
  orderBy: z.union([ BuddhistOrderByWithAggregationInputSchema.array(),BuddhistOrderByWithAggregationInputSchema ]).optional(),
  by: BuddhistScalarFieldEnumSchema.array(),
  having: BuddhistScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BuddhistFindUniqueArgsSchema: z.ZodType<Omit<Prisma.BuddhistFindUniqueArgs, "select" | "include">> = z.object({
  where: BuddhistWhereUniqueInputSchema,
}).strict() ;

export const BuddhistFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.BuddhistFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: BuddhistWhereUniqueInputSchema,
}).strict() ;

export const EventLabelLinkFindFirstArgsSchema: z.ZodType<Omit<Prisma.EventLabelLinkFindFirstArgs, "select" | "include">> = z.object({
  where: EventLabelLinkWhereInputSchema.optional(),
  orderBy: z.union([ EventLabelLinkOrderByWithRelationInputSchema.array(),EventLabelLinkOrderByWithRelationInputSchema ]).optional(),
  cursor: EventLabelLinkWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventLabelLinkScalarFieldEnumSchema,EventLabelLinkScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventLabelLinkFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.EventLabelLinkFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: EventLabelLinkWhereInputSchema.optional(),
  orderBy: z.union([ EventLabelLinkOrderByWithRelationInputSchema.array(),EventLabelLinkOrderByWithRelationInputSchema ]).optional(),
  cursor: EventLabelLinkWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventLabelLinkScalarFieldEnumSchema,EventLabelLinkScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventLabelLinkFindManyArgsSchema: z.ZodType<Omit<Prisma.EventLabelLinkFindManyArgs, "select" | "include">> = z.object({
  where: EventLabelLinkWhereInputSchema.optional(),
  orderBy: z.union([ EventLabelLinkOrderByWithRelationInputSchema.array(),EventLabelLinkOrderByWithRelationInputSchema ]).optional(),
  cursor: EventLabelLinkWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EventLabelLinkScalarFieldEnumSchema,EventLabelLinkScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EventLabelLinkAggregateArgsSchema: z.ZodType<Prisma.EventLabelLinkAggregateArgs> = z.object({
  where: EventLabelLinkWhereInputSchema.optional(),
  orderBy: z.union([ EventLabelLinkOrderByWithRelationInputSchema.array(),EventLabelLinkOrderByWithRelationInputSchema ]).optional(),
  cursor: EventLabelLinkWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventLabelLinkGroupByArgsSchema: z.ZodType<Prisma.EventLabelLinkGroupByArgs> = z.object({
  where: EventLabelLinkWhereInputSchema.optional(),
  orderBy: z.union([ EventLabelLinkOrderByWithAggregationInputSchema.array(),EventLabelLinkOrderByWithAggregationInputSchema ]).optional(),
  by: EventLabelLinkScalarFieldEnumSchema.array(),
  having: EventLabelLinkScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EventLabelLinkFindUniqueArgsSchema: z.ZodType<Omit<Prisma.EventLabelLinkFindUniqueArgs, "select" | "include">> = z.object({
  where: EventLabelLinkWhereUniqueInputSchema,
}).strict() ;

export const EventLabelLinkFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.EventLabelLinkFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: EventLabelLinkWhereUniqueInputSchema,
}).strict() ;

export const FamilyFindFirstArgsSchema: z.ZodType<Omit<Prisma.FamilyFindFirstArgs, "select" | "include">> = z.object({
  where: FamilyWhereInputSchema.optional(),
  orderBy: z.union([ FamilyOrderByWithRelationInputSchema.array(),FamilyOrderByWithRelationInputSchema ]).optional(),
  cursor: FamilyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FamilyScalarFieldEnumSchema,FamilyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FamilyFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.FamilyFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: FamilyWhereInputSchema.optional(),
  orderBy: z.union([ FamilyOrderByWithRelationInputSchema.array(),FamilyOrderByWithRelationInputSchema ]).optional(),
  cursor: FamilyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FamilyScalarFieldEnumSchema,FamilyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FamilyFindManyArgsSchema: z.ZodType<Omit<Prisma.FamilyFindManyArgs, "select" | "include">> = z.object({
  where: FamilyWhereInputSchema.optional(),
  orderBy: z.union([ FamilyOrderByWithRelationInputSchema.array(),FamilyOrderByWithRelationInputSchema ]).optional(),
  cursor: FamilyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FamilyScalarFieldEnumSchema,FamilyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FamilyAggregateArgsSchema: z.ZodType<Prisma.FamilyAggregateArgs> = z.object({
  where: FamilyWhereInputSchema.optional(),
  orderBy: z.union([ FamilyOrderByWithRelationInputSchema.array(),FamilyOrderByWithRelationInputSchema ]).optional(),
  cursor: FamilyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FamilyGroupByArgsSchema: z.ZodType<Prisma.FamilyGroupByArgs> = z.object({
  where: FamilyWhereInputSchema.optional(),
  orderBy: z.union([ FamilyOrderByWithAggregationInputSchema.array(),FamilyOrderByWithAggregationInputSchema ]).optional(),
  by: FamilyScalarFieldEnumSchema.array(),
  having: FamilyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FamilyFindUniqueArgsSchema: z.ZodType<Omit<Prisma.FamilyFindUniqueArgs, "select" | "include">> = z.object({
  where: FamilyWhereUniqueInputSchema,
}).strict() ;

export const FamilyFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.FamilyFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: FamilyWhereUniqueInputSchema,
}).strict() ;

export const FamilyMemberFindFirstArgsSchema: z.ZodType<Omit<Prisma.FamilyMemberFindFirstArgs, "select" | "include">> = z.object({
  where: FamilyMemberWhereInputSchema.optional(),
  orderBy: z.union([ FamilyMemberOrderByWithRelationInputSchema.array(),FamilyMemberOrderByWithRelationInputSchema ]).optional(),
  cursor: FamilyMemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FamilyMemberScalarFieldEnumSchema,FamilyMemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FamilyMemberFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.FamilyMemberFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: FamilyMemberWhereInputSchema.optional(),
  orderBy: z.union([ FamilyMemberOrderByWithRelationInputSchema.array(),FamilyMemberOrderByWithRelationInputSchema ]).optional(),
  cursor: FamilyMemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FamilyMemberScalarFieldEnumSchema,FamilyMemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FamilyMemberFindManyArgsSchema: z.ZodType<Omit<Prisma.FamilyMemberFindManyArgs, "select" | "include">> = z.object({
  where: FamilyMemberWhereInputSchema.optional(),
  orderBy: z.union([ FamilyMemberOrderByWithRelationInputSchema.array(),FamilyMemberOrderByWithRelationInputSchema ]).optional(),
  cursor: FamilyMemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FamilyMemberScalarFieldEnumSchema,FamilyMemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FamilyMemberAggregateArgsSchema: z.ZodType<Prisma.FamilyMemberAggregateArgs> = z.object({
  where: FamilyMemberWhereInputSchema.optional(),
  orderBy: z.union([ FamilyMemberOrderByWithRelationInputSchema.array(),FamilyMemberOrderByWithRelationInputSchema ]).optional(),
  cursor: FamilyMemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FamilyMemberGroupByArgsSchema: z.ZodType<Prisma.FamilyMemberGroupByArgs> = z.object({
  where: FamilyMemberWhereInputSchema.optional(),
  orderBy: z.union([ FamilyMemberOrderByWithAggregationInputSchema.array(),FamilyMemberOrderByWithAggregationInputSchema ]).optional(),
  by: FamilyMemberScalarFieldEnumSchema.array(),
  having: FamilyMemberScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FamilyMemberFindUniqueArgsSchema: z.ZodType<Omit<Prisma.FamilyMemberFindUniqueArgs, "select" | "include">> = z.object({
  where: FamilyMemberWhereUniqueInputSchema,
}).strict() ;

export const FamilyMemberFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.FamilyMemberFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: FamilyMemberWhereUniqueInputSchema,
}).strict() ;

export const GodNameFindFirstArgsSchema: z.ZodType<Omit<Prisma.GodNameFindFirstArgs, "select" | "include">> = z.object({
  where: GodNameWhereInputSchema.optional(),
  orderBy: z.union([ GodNameOrderByWithRelationInputSchema.array(),GodNameOrderByWithRelationInputSchema ]).optional(),
  cursor: GodNameWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GodNameScalarFieldEnumSchema,GodNameScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GodNameFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.GodNameFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: GodNameWhereInputSchema.optional(),
  orderBy: z.union([ GodNameOrderByWithRelationInputSchema.array(),GodNameOrderByWithRelationInputSchema ]).optional(),
  cursor: GodNameWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GodNameScalarFieldEnumSchema,GodNameScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GodNameFindManyArgsSchema: z.ZodType<Omit<Prisma.GodNameFindManyArgs, "select" | "include">> = z.object({
  where: GodNameWhereInputSchema.optional(),
  orderBy: z.union([ GodNameOrderByWithRelationInputSchema.array(),GodNameOrderByWithRelationInputSchema ]).optional(),
  cursor: GodNameWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GodNameScalarFieldEnumSchema,GodNameScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GodNameAggregateArgsSchema: z.ZodType<Prisma.GodNameAggregateArgs> = z.object({
  where: GodNameWhereInputSchema.optional(),
  orderBy: z.union([ GodNameOrderByWithRelationInputSchema.array(),GodNameOrderByWithRelationInputSchema ]).optional(),
  cursor: GodNameWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const GodNameGroupByArgsSchema: z.ZodType<Prisma.GodNameGroupByArgs> = z.object({
  where: GodNameWhereInputSchema.optional(),
  orderBy: z.union([ GodNameOrderByWithAggregationInputSchema.array(),GodNameOrderByWithAggregationInputSchema ]).optional(),
  by: GodNameScalarFieldEnumSchema.array(),
  having: GodNameScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const GodNameFindUniqueArgsSchema: z.ZodType<Omit<Prisma.GodNameFindUniqueArgs, "select" | "include">> = z.object({
  where: GodNameWhereUniqueInputSchema,
}).strict() ;

export const GodNameFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.GodNameFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: GodNameWhereUniqueInputSchema,
}).strict() ;

export const MemberClassFindFirstArgsSchema: z.ZodType<Omit<Prisma.MemberClassFindFirstArgs, "select" | "include">> = z.object({
  where: MemberClassWhereInputSchema.optional(),
  orderBy: z.union([ MemberClassOrderByWithRelationInputSchema.array(),MemberClassOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberClassWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberClassScalarFieldEnumSchema,MemberClassScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberClassFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.MemberClassFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: MemberClassWhereInputSchema.optional(),
  orderBy: z.union([ MemberClassOrderByWithRelationInputSchema.array(),MemberClassOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberClassWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberClassScalarFieldEnumSchema,MemberClassScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberClassFindManyArgsSchema: z.ZodType<Omit<Prisma.MemberClassFindManyArgs, "select" | "include">> = z.object({
  where: MemberClassWhereInputSchema.optional(),
  orderBy: z.union([ MemberClassOrderByWithRelationInputSchema.array(),MemberClassOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberClassWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberClassScalarFieldEnumSchema,MemberClassScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberClassAggregateArgsSchema: z.ZodType<Prisma.MemberClassAggregateArgs> = z.object({
  where: MemberClassWhereInputSchema.optional(),
  orderBy: z.union([ MemberClassOrderByWithRelationInputSchema.array(),MemberClassOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberClassWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberClassGroupByArgsSchema: z.ZodType<Prisma.MemberClassGroupByArgs> = z.object({
  where: MemberClassWhereInputSchema.optional(),
  orderBy: z.union([ MemberClassOrderByWithAggregationInputSchema.array(),MemberClassOrderByWithAggregationInputSchema ]).optional(),
  by: MemberClassScalarFieldEnumSchema.array(),
  having: MemberClassScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberClassFindUniqueArgsSchema: z.ZodType<Omit<Prisma.MemberClassFindUniqueArgs, "select" | "include">> = z.object({
  where: MemberClassWhereUniqueInputSchema,
}).strict() ;

export const MemberClassFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.MemberClassFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: MemberClassWhereUniqueInputSchema,
}).strict() ;

export const MgYearFindFirstArgsSchema: z.ZodType<Omit<Prisma.MgYearFindFirstArgs, "select" | "include">> = z.object({
  where: MgYearWhereInputSchema.optional(),
  orderBy: z.union([ MgYearOrderByWithRelationInputSchema.array(),MgYearOrderByWithRelationInputSchema ]).optional(),
  cursor: MgYearWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MgYearScalarFieldEnumSchema,MgYearScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MgYearFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.MgYearFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: MgYearWhereInputSchema.optional(),
  orderBy: z.union([ MgYearOrderByWithRelationInputSchema.array(),MgYearOrderByWithRelationInputSchema ]).optional(),
  cursor: MgYearWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MgYearScalarFieldEnumSchema,MgYearScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MgYearFindManyArgsSchema: z.ZodType<Omit<Prisma.MgYearFindManyArgs, "select" | "include">> = z.object({
  where: MgYearWhereInputSchema.optional(),
  orderBy: z.union([ MgYearOrderByWithRelationInputSchema.array(),MgYearOrderByWithRelationInputSchema ]).optional(),
  cursor: MgYearWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MgYearScalarFieldEnumSchema,MgYearScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MgYearAggregateArgsSchema: z.ZodType<Prisma.MgYearAggregateArgs> = z.object({
  where: MgYearWhereInputSchema.optional(),
  orderBy: z.union([ MgYearOrderByWithRelationInputSchema.array(),MgYearOrderByWithRelationInputSchema ]).optional(),
  cursor: MgYearWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MgYearGroupByArgsSchema: z.ZodType<Prisma.MgYearGroupByArgs> = z.object({
  where: MgYearWhereInputSchema.optional(),
  orderBy: z.union([ MgYearOrderByWithAggregationInputSchema.array(),MgYearOrderByWithAggregationInputSchema ]).optional(),
  by: MgYearScalarFieldEnumSchema.array(),
  having: MgYearScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MgYearFindUniqueArgsSchema: z.ZodType<Omit<Prisma.MgYearFindUniqueArgs, "select" | "include">> = z.object({
  where: MgYearWhereUniqueInputSchema,
}).strict() ;

export const MgYearFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.MgYearFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: MgYearWhereUniqueInputSchema,
}).strict() ;

export const Service1FindFirstArgsSchema: z.ZodType<Omit<Prisma.Service1FindFirstArgs, "select" | "include">> = z.object({
  where: Service1WhereInputSchema.optional(),
  orderBy: z.union([ Service1OrderByWithRelationInputSchema.array(),Service1OrderByWithRelationInputSchema ]).optional(),
  cursor: Service1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service1ScalarFieldEnumSchema,Service1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Service1FindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.Service1FindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: Service1WhereInputSchema.optional(),
  orderBy: z.union([ Service1OrderByWithRelationInputSchema.array(),Service1OrderByWithRelationInputSchema ]).optional(),
  cursor: Service1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service1ScalarFieldEnumSchema,Service1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Service1FindManyArgsSchema: z.ZodType<Omit<Prisma.Service1FindManyArgs, "select" | "include">> = z.object({
  where: Service1WhereInputSchema.optional(),
  orderBy: z.union([ Service1OrderByWithRelationInputSchema.array(),Service1OrderByWithRelationInputSchema ]).optional(),
  cursor: Service1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service1ScalarFieldEnumSchema,Service1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Service1AggregateArgsSchema: z.ZodType<Prisma.Service1AggregateArgs> = z.object({
  where: Service1WhereInputSchema.optional(),
  orderBy: z.union([ Service1OrderByWithRelationInputSchema.array(),Service1OrderByWithRelationInputSchema ]).optional(),
  cursor: Service1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const Service1GroupByArgsSchema: z.ZodType<Prisma.Service1GroupByArgs> = z.object({
  where: Service1WhereInputSchema.optional(),
  orderBy: z.union([ Service1OrderByWithAggregationInputSchema.array(),Service1OrderByWithAggregationInputSchema ]).optional(),
  by: Service1ScalarFieldEnumSchema.array(),
  having: Service1ScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const Service1FindUniqueArgsSchema: z.ZodType<Omit<Prisma.Service1FindUniqueArgs, "select" | "include">> = z.object({
  where: Service1WhereUniqueInputSchema,
}).strict() ;

export const Service1FindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.Service1FindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: Service1WhereUniqueInputSchema,
}).strict() ;

export const Service2FindFirstArgsSchema: z.ZodType<Omit<Prisma.Service2FindFirstArgs, "select" | "include">> = z.object({
  where: Service2WhereInputSchema.optional(),
  orderBy: z.union([ Service2OrderByWithRelationInputSchema.array(),Service2OrderByWithRelationInputSchema ]).optional(),
  cursor: Service2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service2ScalarFieldEnumSchema,Service2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Service2FindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.Service2FindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: Service2WhereInputSchema.optional(),
  orderBy: z.union([ Service2OrderByWithRelationInputSchema.array(),Service2OrderByWithRelationInputSchema ]).optional(),
  cursor: Service2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service2ScalarFieldEnumSchema,Service2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Service2FindManyArgsSchema: z.ZodType<Omit<Prisma.Service2FindManyArgs, "select" | "include">> = z.object({
  where: Service2WhereInputSchema.optional(),
  orderBy: z.union([ Service2OrderByWithRelationInputSchema.array(),Service2OrderByWithRelationInputSchema ]).optional(),
  cursor: Service2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Service2ScalarFieldEnumSchema,Service2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Service2AggregateArgsSchema: z.ZodType<Prisma.Service2AggregateArgs> = z.object({
  where: Service2WhereInputSchema.optional(),
  orderBy: z.union([ Service2OrderByWithRelationInputSchema.array(),Service2OrderByWithRelationInputSchema ]).optional(),
  cursor: Service2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const Service2GroupByArgsSchema: z.ZodType<Prisma.Service2GroupByArgs> = z.object({
  where: Service2WhereInputSchema.optional(),
  orderBy: z.union([ Service2OrderByWithAggregationInputSchema.array(),Service2OrderByWithAggregationInputSchema ]).optional(),
  by: Service2ScalarFieldEnumSchema.array(),
  having: Service2ScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const Service2FindUniqueArgsSchema: z.ZodType<Omit<Prisma.Service2FindUniqueArgs, "select" | "include">> = z.object({
  where: Service2WhereUniqueInputSchema,
}).strict() ;

export const Service2FindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.Service2FindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: Service2WhereUniqueInputSchema,
}).strict() ;

export const Servicing1FindFirstArgsSchema: z.ZodType<Omit<Prisma.Servicing1FindFirstArgs, "select" | "include">> = z.object({
  where: Servicing1WhereInputSchema.optional(),
  orderBy: z.union([ Servicing1OrderByWithRelationInputSchema.array(),Servicing1OrderByWithRelationInputSchema ]).optional(),
  cursor: Servicing1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing1ScalarFieldEnumSchema,Servicing1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Servicing1FindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.Servicing1FindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: Servicing1WhereInputSchema.optional(),
  orderBy: z.union([ Servicing1OrderByWithRelationInputSchema.array(),Servicing1OrderByWithRelationInputSchema ]).optional(),
  cursor: Servicing1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing1ScalarFieldEnumSchema,Servicing1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Servicing1FindManyArgsSchema: z.ZodType<Omit<Prisma.Servicing1FindManyArgs, "select" | "include">> = z.object({
  where: Servicing1WhereInputSchema.optional(),
  orderBy: z.union([ Servicing1OrderByWithRelationInputSchema.array(),Servicing1OrderByWithRelationInputSchema ]).optional(),
  cursor: Servicing1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing1ScalarFieldEnumSchema,Servicing1ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Servicing1AggregateArgsSchema: z.ZodType<Prisma.Servicing1AggregateArgs> = z.object({
  where: Servicing1WhereInputSchema.optional(),
  orderBy: z.union([ Servicing1OrderByWithRelationInputSchema.array(),Servicing1OrderByWithRelationInputSchema ]).optional(),
  cursor: Servicing1WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const Servicing1GroupByArgsSchema: z.ZodType<Prisma.Servicing1GroupByArgs> = z.object({
  where: Servicing1WhereInputSchema.optional(),
  orderBy: z.union([ Servicing1OrderByWithAggregationInputSchema.array(),Servicing1OrderByWithAggregationInputSchema ]).optional(),
  by: Servicing1ScalarFieldEnumSchema.array(),
  having: Servicing1ScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const Servicing1FindUniqueArgsSchema: z.ZodType<Omit<Prisma.Servicing1FindUniqueArgs, "select" | "include">> = z.object({
  where: Servicing1WhereUniqueInputSchema,
}).strict() ;

export const Servicing1FindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.Servicing1FindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: Servicing1WhereUniqueInputSchema,
}).strict() ;

export const Servicing2FindFirstArgsSchema: z.ZodType<Omit<Prisma.Servicing2FindFirstArgs, "select" | "include">> = z.object({
  where: Servicing2WhereInputSchema.optional(),
  orderBy: z.union([ Servicing2OrderByWithRelationInputSchema.array(),Servicing2OrderByWithRelationInputSchema ]).optional(),
  cursor: Servicing2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing2ScalarFieldEnumSchema,Servicing2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Servicing2FindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.Servicing2FindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: Servicing2WhereInputSchema.optional(),
  orderBy: z.union([ Servicing2OrderByWithRelationInputSchema.array(),Servicing2OrderByWithRelationInputSchema ]).optional(),
  cursor: Servicing2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing2ScalarFieldEnumSchema,Servicing2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Servicing2FindManyArgsSchema: z.ZodType<Omit<Prisma.Servicing2FindManyArgs, "select" | "include">> = z.object({
  where: Servicing2WhereInputSchema.optional(),
  orderBy: z.union([ Servicing2OrderByWithRelationInputSchema.array(),Servicing2OrderByWithRelationInputSchema ]).optional(),
  cursor: Servicing2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Servicing2ScalarFieldEnumSchema,Servicing2ScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const Servicing2AggregateArgsSchema: z.ZodType<Prisma.Servicing2AggregateArgs> = z.object({
  where: Servicing2WhereInputSchema.optional(),
  orderBy: z.union([ Servicing2OrderByWithRelationInputSchema.array(),Servicing2OrderByWithRelationInputSchema ]).optional(),
  cursor: Servicing2WhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const Servicing2GroupByArgsSchema: z.ZodType<Prisma.Servicing2GroupByArgs> = z.object({
  where: Servicing2WhereInputSchema.optional(),
  orderBy: z.union([ Servicing2OrderByWithAggregationInputSchema.array(),Servicing2OrderByWithAggregationInputSchema ]).optional(),
  by: Servicing2ScalarFieldEnumSchema.array(),
  having: Servicing2ScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const Servicing2FindUniqueArgsSchema: z.ZodType<Omit<Prisma.Servicing2FindUniqueArgs, "select" | "include">> = z.object({
  where: Servicing2WhereUniqueInputSchema,
}).strict() ;

export const Servicing2FindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.Servicing2FindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: Servicing2WhereUniqueInputSchema,
}).strict() ;

export const TempleFindFirstArgsSchema: z.ZodType<Omit<Prisma.TempleFindFirstArgs, "select" | "include">> = z.object({
  where: TempleWhereInputSchema.optional(),
  orderBy: z.union([ TempleOrderByWithRelationInputSchema.array(),TempleOrderByWithRelationInputSchema ]).optional(),
  cursor: TempleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TempleScalarFieldEnumSchema,TempleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TempleFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.TempleFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: TempleWhereInputSchema.optional(),
  orderBy: z.union([ TempleOrderByWithRelationInputSchema.array(),TempleOrderByWithRelationInputSchema ]).optional(),
  cursor: TempleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TempleScalarFieldEnumSchema,TempleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TempleFindManyArgsSchema: z.ZodType<Omit<Prisma.TempleFindManyArgs, "select" | "include">> = z.object({
  where: TempleWhereInputSchema.optional(),
  orderBy: z.union([ TempleOrderByWithRelationInputSchema.array(),TempleOrderByWithRelationInputSchema ]).optional(),
  cursor: TempleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TempleScalarFieldEnumSchema,TempleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TempleAggregateArgsSchema: z.ZodType<Prisma.TempleAggregateArgs> = z.object({
  where: TempleWhereInputSchema.optional(),
  orderBy: z.union([ TempleOrderByWithRelationInputSchema.array(),TempleOrderByWithRelationInputSchema ]).optional(),
  cursor: TempleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TempleGroupByArgsSchema: z.ZodType<Prisma.TempleGroupByArgs> = z.object({
  where: TempleWhereInputSchema.optional(),
  orderBy: z.union([ TempleOrderByWithAggregationInputSchema.array(),TempleOrderByWithAggregationInputSchema ]).optional(),
  by: TempleScalarFieldEnumSchema.array(),
  having: TempleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TempleFindUniqueArgsSchema: z.ZodType<Omit<Prisma.TempleFindUniqueArgs, "select" | "include">> = z.object({
  where: TempleWhereUniqueInputSchema,
}).strict() ;

export const TempleFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.TempleFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: TempleWhereUniqueInputSchema,
}).strict() ;

export const TrainedModelFindFirstArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindFirstArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithRelationInputSchema.array(),TrainedModelOrderByWithRelationInputSchema ]).optional(),
  cursor: TrainedModelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TrainedModelScalarFieldEnumSchema,TrainedModelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TrainedModelFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithRelationInputSchema.array(),TrainedModelOrderByWithRelationInputSchema ]).optional(),
  cursor: TrainedModelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TrainedModelScalarFieldEnumSchema,TrainedModelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TrainedModelFindManyArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindManyArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithRelationInputSchema.array(),TrainedModelOrderByWithRelationInputSchema ]).optional(),
  cursor: TrainedModelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TrainedModelScalarFieldEnumSchema,TrainedModelScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TrainedModelAggregateArgsSchema: z.ZodType<Prisma.TrainedModelAggregateArgs> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithRelationInputSchema.array(),TrainedModelOrderByWithRelationInputSchema ]).optional(),
  cursor: TrainedModelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TrainedModelGroupByArgsSchema: z.ZodType<Prisma.TrainedModelGroupByArgs> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  orderBy: z.union([ TrainedModelOrderByWithAggregationInputSchema.array(),TrainedModelOrderByWithAggregationInputSchema ]).optional(),
  by: TrainedModelScalarFieldEnumSchema.array(),
  having: TrainedModelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TrainedModelFindUniqueArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindUniqueArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereUniqueInputSchema,
}).strict() ;

export const TrainedModelFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.TrainedModelFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereUniqueInputSchema,
}).strict() ;

export const EvaluationRunFindFirstArgsSchema: z.ZodType<Omit<Prisma.EvaluationRunFindFirstArgs, "select" | "include">> = z.object({
  where: EvaluationRunWhereInputSchema.optional(),
  orderBy: z.union([ EvaluationRunOrderByWithRelationInputSchema.array(),EvaluationRunOrderByWithRelationInputSchema ]).optional(),
  cursor: EvaluationRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EvaluationRunScalarFieldEnumSchema,EvaluationRunScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EvaluationRunFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.EvaluationRunFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: EvaluationRunWhereInputSchema.optional(),
  orderBy: z.union([ EvaluationRunOrderByWithRelationInputSchema.array(),EvaluationRunOrderByWithRelationInputSchema ]).optional(),
  cursor: EvaluationRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EvaluationRunScalarFieldEnumSchema,EvaluationRunScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EvaluationRunFindManyArgsSchema: z.ZodType<Omit<Prisma.EvaluationRunFindManyArgs, "select" | "include">> = z.object({
  where: EvaluationRunWhereInputSchema.optional(),
  orderBy: z.union([ EvaluationRunOrderByWithRelationInputSchema.array(),EvaluationRunOrderByWithRelationInputSchema ]).optional(),
  cursor: EvaluationRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EvaluationRunScalarFieldEnumSchema,EvaluationRunScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EvaluationRunAggregateArgsSchema: z.ZodType<Prisma.EvaluationRunAggregateArgs> = z.object({
  where: EvaluationRunWhereInputSchema.optional(),
  orderBy: z.union([ EvaluationRunOrderByWithRelationInputSchema.array(),EvaluationRunOrderByWithRelationInputSchema ]).optional(),
  cursor: EvaluationRunWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EvaluationRunGroupByArgsSchema: z.ZodType<Prisma.EvaluationRunGroupByArgs> = z.object({
  where: EvaluationRunWhereInputSchema.optional(),
  orderBy: z.union([ EvaluationRunOrderByWithAggregationInputSchema.array(),EvaluationRunOrderByWithAggregationInputSchema ]).optional(),
  by: EvaluationRunScalarFieldEnumSchema.array(),
  having: EvaluationRunScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EvaluationRunFindUniqueArgsSchema: z.ZodType<Omit<Prisma.EvaluationRunFindUniqueArgs, "select" | "include">> = z.object({
  where: EvaluationRunWhereUniqueInputSchema,
}).strict() ;

export const EvaluationRunFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.EvaluationRunFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: EvaluationRunWhereUniqueInputSchema,
}).strict() ;

export const ModelPredictionFindFirstArgsSchema: z.ZodType<Omit<Prisma.ModelPredictionFindFirstArgs, "select" | "include">> = z.object({
  where: ModelPredictionWhereInputSchema.optional(),
  orderBy: z.union([ ModelPredictionOrderByWithRelationInputSchema.array(),ModelPredictionOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelPredictionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelPredictionScalarFieldEnumSchema,ModelPredictionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelPredictionFindFirstOrThrowArgsSchema: z.ZodType<Omit<Prisma.ModelPredictionFindFirstOrThrowArgs, "select" | "include">> = z.object({
  where: ModelPredictionWhereInputSchema.optional(),
  orderBy: z.union([ ModelPredictionOrderByWithRelationInputSchema.array(),ModelPredictionOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelPredictionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelPredictionScalarFieldEnumSchema,ModelPredictionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelPredictionFindManyArgsSchema: z.ZodType<Omit<Prisma.ModelPredictionFindManyArgs, "select" | "include">> = z.object({
  where: ModelPredictionWhereInputSchema.optional(),
  orderBy: z.union([ ModelPredictionOrderByWithRelationInputSchema.array(),ModelPredictionOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelPredictionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelPredictionScalarFieldEnumSchema,ModelPredictionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelPredictionAggregateArgsSchema: z.ZodType<Prisma.ModelPredictionAggregateArgs> = z.object({
  where: ModelPredictionWhereInputSchema.optional(),
  orderBy: z.union([ ModelPredictionOrderByWithRelationInputSchema.array(),ModelPredictionOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelPredictionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelPredictionGroupByArgsSchema: z.ZodType<Prisma.ModelPredictionGroupByArgs> = z.object({
  where: ModelPredictionWhereInputSchema.optional(),
  orderBy: z.union([ ModelPredictionOrderByWithAggregationInputSchema.array(),ModelPredictionOrderByWithAggregationInputSchema ]).optional(),
  by: ModelPredictionScalarFieldEnumSchema.array(),
  having: ModelPredictionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelPredictionFindUniqueArgsSchema: z.ZodType<Omit<Prisma.ModelPredictionFindUniqueArgs, "select" | "include">> = z.object({
  where: ModelPredictionWhereUniqueInputSchema,
}).strict() ;

export const ModelPredictionFindUniqueOrThrowArgsSchema: z.ZodType<Omit<Prisma.ModelPredictionFindUniqueOrThrowArgs, "select" | "include">> = z.object({
  where: ModelPredictionWhereUniqueInputSchema,
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Omit<Prisma.UserCreateArgs, "select" | "include">> = z.object({
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Omit<Prisma.UserUpsertArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Omit<Prisma.UserDeleteArgs, "select" | "include">> = z.object({
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Omit<Prisma.UserUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Omit<Prisma.SessionCreateArgs, "select" | "include">> = z.object({
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Omit<Prisma.SessionUpsertArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionCreateManyAndReturnArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Omit<Prisma.SessionDeleteArgs, "select" | "include">> = z.object({
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Omit<Prisma.SessionUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountCreateArgsSchema: z.ZodType<Omit<Prisma.AccountCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
}).strict() ;

export const AccountUpsertArgsSchema: z.ZodType<Omit<Prisma.AccountUpsertArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountCreateManyAndReturnArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountDeleteArgsSchema: z.ZodType<Omit<Prisma.AccountDeleteArgs, "select" | "include">> = z.object({
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateArgsSchema: z.ZodType<Omit<Prisma.AccountUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationCreateArgsSchema: z.ZodType<Omit<Prisma.VerificationCreateArgs, "select">> = z.object({
  data: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
}).strict() ;

export const VerificationUpsertArgsSchema: z.ZodType<Omit<Prisma.VerificationUpsertArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
  create: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
  update: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
}).strict() ;

export const VerificationCreateManyArgsSchema: z.ZodType<Prisma.VerificationCreateManyArgs> = z.object({
  data: z.union([ VerificationCreateManyInputSchema,VerificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationCreateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationCreateManyInputSchema,VerificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationDeleteArgsSchema: z.ZodType<Omit<Prisma.VerificationDeleteArgs, "select">> = z.object({
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateArgsSchema: z.ZodType<Omit<Prisma.VerificationUpdateArgs, "select">> = z.object({
  data: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateManyArgsSchema: z.ZodType<Prisma.VerificationUpdateManyArgs> = z.object({
  data: z.union([ VerificationUpdateManyMutationInputSchema,VerificationUncheckedUpdateManyInputSchema ]),
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationUpdateManyMutationInputSchema,VerificationUncheckedUpdateManyInputSchema ]),
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationDeleteManyArgsSchema: z.ZodType<Prisma.VerificationDeleteManyArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasskeyCreateArgsSchema: z.ZodType<Omit<Prisma.PasskeyCreateArgs, "select" | "include">> = z.object({
  data: z.union([ PasskeyCreateInputSchema,PasskeyUncheckedCreateInputSchema ]),
}).strict() ;

export const PasskeyUpsertArgsSchema: z.ZodType<Omit<Prisma.PasskeyUpsertArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
  create: z.union([ PasskeyCreateInputSchema,PasskeyUncheckedCreateInputSchema ]),
  update: z.union([ PasskeyUpdateInputSchema,PasskeyUncheckedUpdateInputSchema ]),
}).strict() ;

export const PasskeyCreateManyArgsSchema: z.ZodType<Prisma.PasskeyCreateManyArgs> = z.object({
  data: z.union([ PasskeyCreateManyInputSchema,PasskeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasskeyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PasskeyCreateManyAndReturnArgs> = z.object({
  data: z.union([ PasskeyCreateManyInputSchema,PasskeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasskeyDeleteArgsSchema: z.ZodType<Omit<Prisma.PasskeyDeleteArgs, "select" | "include">> = z.object({
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const PasskeyUpdateArgsSchema: z.ZodType<Omit<Prisma.PasskeyUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ PasskeyUpdateInputSchema,PasskeyUncheckedUpdateInputSchema ]),
  where: PasskeyWhereUniqueInputSchema,
}).strict() ;

export const PasskeyUpdateManyArgsSchema: z.ZodType<Prisma.PasskeyUpdateManyArgs> = z.object({
  data: z.union([ PasskeyUpdateManyMutationInputSchema,PasskeyUncheckedUpdateManyInputSchema ]),
  where: PasskeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasskeyUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PasskeyUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PasskeyUpdateManyMutationInputSchema,PasskeyUncheckedUpdateManyInputSchema ]),
  where: PasskeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasskeyDeleteManyArgsSchema: z.ZodType<Prisma.PasskeyDeleteManyArgs> = z.object({
  where: PasskeyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorCreateArgsSchema: z.ZodType<Omit<Prisma.TwoFactorCreateArgs, "select" | "include">> = z.object({
  data: z.union([ TwoFactorCreateInputSchema,TwoFactorUncheckedCreateInputSchema ]),
}).strict() ;

export const TwoFactorUpsertArgsSchema: z.ZodType<Omit<Prisma.TwoFactorUpsertArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
  create: z.union([ TwoFactorCreateInputSchema,TwoFactorUncheckedCreateInputSchema ]),
  update: z.union([ TwoFactorUpdateInputSchema,TwoFactorUncheckedUpdateInputSchema ]),
}).strict() ;

export const TwoFactorCreateManyArgsSchema: z.ZodType<Prisma.TwoFactorCreateManyArgs> = z.object({
  data: z.union([ TwoFactorCreateManyInputSchema,TwoFactorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TwoFactorCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TwoFactorCreateManyAndReturnArgs> = z.object({
  data: z.union([ TwoFactorCreateManyInputSchema,TwoFactorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TwoFactorDeleteArgsSchema: z.ZodType<Omit<Prisma.TwoFactorDeleteArgs, "select" | "include">> = z.object({
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorUpdateArgsSchema: z.ZodType<Omit<Prisma.TwoFactorUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ TwoFactorUpdateInputSchema,TwoFactorUncheckedUpdateInputSchema ]),
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorUpdateManyArgsSchema: z.ZodType<Prisma.TwoFactorUpdateManyArgs> = z.object({
  data: z.union([ TwoFactorUpdateManyMutationInputSchema,TwoFactorUncheckedUpdateManyInputSchema ]),
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TwoFactorUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TwoFactorUpdateManyMutationInputSchema,TwoFactorUncheckedUpdateManyInputSchema ]),
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorDeleteManyArgsSchema: z.ZodType<Prisma.TwoFactorDeleteManyArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationCreateArgsSchema: z.ZodType<Omit<Prisma.OrganizationCreateArgs, "select" | "include">> = z.object({
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const OrganizationUpsertArgsSchema: z.ZodType<Omit<Prisma.OrganizationUpsertArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationDeleteArgsSchema: z.ZodType<Omit<Prisma.OrganizationDeleteArgs, "select" | "include">> = z.object({
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateArgsSchema: z.ZodType<Omit<Prisma.OrganizationUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RelationshipManagerCreateArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerCreateArgs, "select" | "include">> = z.object({
  data: z.union([ RelationshipManagerCreateInputSchema,RelationshipManagerUncheckedCreateInputSchema ]),
}).strict() ;

export const RelationshipManagerUpsertArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerUpsertArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereUniqueInputSchema,
  create: z.union([ RelationshipManagerCreateInputSchema,RelationshipManagerUncheckedCreateInputSchema ]),
  update: z.union([ RelationshipManagerUpdateInputSchema,RelationshipManagerUncheckedUpdateInputSchema ]),
}).strict() ;

export const RelationshipManagerCreateManyArgsSchema: z.ZodType<Prisma.RelationshipManagerCreateManyArgs> = z.object({
  data: z.union([ RelationshipManagerCreateManyInputSchema,RelationshipManagerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RelationshipManagerCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RelationshipManagerCreateManyAndReturnArgs> = z.object({
  data: z.union([ RelationshipManagerCreateManyInputSchema,RelationshipManagerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RelationshipManagerDeleteArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerDeleteArgs, "select" | "include">> = z.object({
  where: RelationshipManagerWhereUniqueInputSchema,
}).strict() ;

export const RelationshipManagerUpdateArgsSchema: z.ZodType<Omit<Prisma.RelationshipManagerUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ RelationshipManagerUpdateInputSchema,RelationshipManagerUncheckedUpdateInputSchema ]),
  where: RelationshipManagerWhereUniqueInputSchema,
}).strict() ;

export const RelationshipManagerUpdateManyArgsSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyArgs> = z.object({
  data: z.union([ RelationshipManagerUpdateManyMutationInputSchema,RelationshipManagerUncheckedUpdateManyInputSchema ]),
  where: RelationshipManagerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RelationshipManagerUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RelationshipManagerUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RelationshipManagerUpdateManyMutationInputSchema,RelationshipManagerUncheckedUpdateManyInputSchema ]),
  where: RelationshipManagerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RelationshipManagerDeleteManyArgsSchema: z.ZodType<Prisma.RelationshipManagerDeleteManyArgs> = z.object({
  where: RelationshipManagerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomerCreateArgsSchema: z.ZodType<Omit<Prisma.CustomerCreateArgs, "select" | "include">> = z.object({
  data: z.union([ CustomerCreateInputSchema,CustomerUncheckedCreateInputSchema ]),
}).strict() ;

export const CustomerUpsertArgsSchema: z.ZodType<Omit<Prisma.CustomerUpsertArgs, "select" | "include">> = z.object({
  where: CustomerWhereUniqueInputSchema,
  create: z.union([ CustomerCreateInputSchema,CustomerUncheckedCreateInputSchema ]),
  update: z.union([ CustomerUpdateInputSchema,CustomerUncheckedUpdateInputSchema ]),
}).strict() ;

export const CustomerCreateManyArgsSchema: z.ZodType<Prisma.CustomerCreateManyArgs> = z.object({
  data: z.union([ CustomerCreateManyInputSchema,CustomerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomerCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomerCreateManyInputSchema,CustomerCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerDeleteArgsSchema: z.ZodType<Omit<Prisma.CustomerDeleteArgs, "select" | "include">> = z.object({
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerUpdateArgsSchema: z.ZodType<Omit<Prisma.CustomerUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ CustomerUpdateInputSchema,CustomerUncheckedUpdateInputSchema ]),
  where: CustomerWhereUniqueInputSchema,
}).strict() ;

export const CustomerUpdateManyArgsSchema: z.ZodType<Prisma.CustomerUpdateManyArgs> = z.object({
  data: z.union([ CustomerUpdateManyMutationInputSchema,CustomerUncheckedUpdateManyInputSchema ]),
  where: CustomerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomerUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomerUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CustomerUpdateManyMutationInputSchema,CustomerUncheckedUpdateManyInputSchema ]),
  where: CustomerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomerDeleteManyArgsSchema: z.ZodType<Prisma.CustomerDeleteManyArgs> = z.object({
  where: CustomerWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberCreateArgsSchema: z.ZodType<Omit<Prisma.MemberCreateArgs, "select" | "include">> = z.object({
  data: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
}).strict() ;

export const MemberUpsertArgsSchema: z.ZodType<Omit<Prisma.MemberUpsertArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
  create: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
  update: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
}).strict() ;

export const MemberCreateManyArgsSchema: z.ZodType<Prisma.MemberCreateManyArgs> = z.object({
  data: z.union([ MemberCreateManyInputSchema,MemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberCreateManyAndReturnArgs> = z.object({
  data: z.union([ MemberCreateManyInputSchema,MemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberDeleteArgsSchema: z.ZodType<Omit<Prisma.MemberDeleteArgs, "select" | "include">> = z.object({
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberUpdateArgsSchema: z.ZodType<Omit<Prisma.MemberUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberUpdateManyArgsSchema: z.ZodType<Prisma.MemberUpdateManyArgs> = z.object({
  data: z.union([ MemberUpdateManyMutationInputSchema,MemberUncheckedUpdateManyInputSchema ]),
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MemberUpdateManyMutationInputSchema,MemberUncheckedUpdateManyInputSchema ]),
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberDeleteManyArgsSchema: z.ZodType<Prisma.MemberDeleteManyArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationCreateArgsSchema: z.ZodType<Omit<Prisma.InvitationCreateArgs, "select" | "include">> = z.object({
  data: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
}).strict() ;

export const InvitationUpsertArgsSchema: z.ZodType<Omit<Prisma.InvitationUpsertArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
  create: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
  update: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
}).strict() ;

export const InvitationCreateManyArgsSchema: z.ZodType<Prisma.InvitationCreateManyArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationCreateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InvitationDeleteArgsSchema: z.ZodType<Omit<Prisma.InvitationDeleteArgs, "select" | "include">> = z.object({
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateArgsSchema: z.ZodType<Omit<Prisma.InvitationUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateManyArgsSchema: z.ZodType<Prisma.InvitationUpdateManyArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.InvitationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationDeleteManyArgsSchema: z.ZodType<Prisma.InvitationDeleteManyArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurchaseCreateArgsSchema: z.ZodType<Omit<Prisma.PurchaseCreateArgs, "select" | "include">> = z.object({
  data: z.union([ PurchaseCreateInputSchema,PurchaseUncheckedCreateInputSchema ]),
}).strict() ;

export const PurchaseUpsertArgsSchema: z.ZodType<Omit<Prisma.PurchaseUpsertArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
  create: z.union([ PurchaseCreateInputSchema,PurchaseUncheckedCreateInputSchema ]),
  update: z.union([ PurchaseUpdateInputSchema,PurchaseUncheckedUpdateInputSchema ]),
}).strict() ;

export const PurchaseCreateManyArgsSchema: z.ZodType<Prisma.PurchaseCreateManyArgs> = z.object({
  data: z.union([ PurchaseCreateManyInputSchema,PurchaseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PurchaseCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PurchaseCreateManyAndReturnArgs> = z.object({
  data: z.union([ PurchaseCreateManyInputSchema,PurchaseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PurchaseDeleteArgsSchema: z.ZodType<Omit<Prisma.PurchaseDeleteArgs, "select" | "include">> = z.object({
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const PurchaseUpdateArgsSchema: z.ZodType<Omit<Prisma.PurchaseUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ PurchaseUpdateInputSchema,PurchaseUncheckedUpdateInputSchema ]),
  where: PurchaseWhereUniqueInputSchema,
}).strict() ;

export const PurchaseUpdateManyArgsSchema: z.ZodType<Prisma.PurchaseUpdateManyArgs> = z.object({
  data: z.union([ PurchaseUpdateManyMutationInputSchema,PurchaseUncheckedUpdateManyInputSchema ]),
  where: PurchaseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurchaseUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PurchaseUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PurchaseUpdateManyMutationInputSchema,PurchaseUncheckedUpdateManyInputSchema ]),
  where: PurchaseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PurchaseDeleteManyArgsSchema: z.ZodType<Prisma.PurchaseDeleteManyArgs> = z.object({
  where: PurchaseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AiChatCreateArgsSchema: z.ZodType<Omit<Prisma.AiChatCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AiChatCreateInputSchema,AiChatUncheckedCreateInputSchema ]),
}).strict() ;

export const AiChatUpsertArgsSchema: z.ZodType<Omit<Prisma.AiChatUpsertArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
  create: z.union([ AiChatCreateInputSchema,AiChatUncheckedCreateInputSchema ]),
  update: z.union([ AiChatUpdateInputSchema,AiChatUncheckedUpdateInputSchema ]),
}).strict() ;

export const AiChatCreateManyArgsSchema: z.ZodType<Prisma.AiChatCreateManyArgs> = z.object({
  data: z.union([ AiChatCreateManyInputSchema,AiChatCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AiChatCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AiChatCreateManyAndReturnArgs> = z.object({
  data: z.union([ AiChatCreateManyInputSchema,AiChatCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AiChatDeleteArgsSchema: z.ZodType<Omit<Prisma.AiChatDeleteArgs, "select" | "include">> = z.object({
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const AiChatUpdateArgsSchema: z.ZodType<Omit<Prisma.AiChatUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AiChatUpdateInputSchema,AiChatUncheckedUpdateInputSchema ]),
  where: AiChatWhereUniqueInputSchema,
}).strict() ;

export const AiChatUpdateManyArgsSchema: z.ZodType<Prisma.AiChatUpdateManyArgs> = z.object({
  data: z.union([ AiChatUpdateManyMutationInputSchema,AiChatUncheckedUpdateManyInputSchema ]),
  where: AiChatWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AiChatUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AiChatUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AiChatUpdateManyMutationInputSchema,AiChatUncheckedUpdateManyInputSchema ]),
  where: AiChatWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AiChatDeleteManyArgsSchema: z.ZodType<Prisma.AiChatDeleteManyArgs> = z.object({
  where: AiChatWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BankAccountCreateArgsSchema: z.ZodType<Omit<Prisma.BankAccountCreateArgs, "select" | "include">> = z.object({
  data: z.union([ BankAccountCreateInputSchema,BankAccountUncheckedCreateInputSchema ]),
}).strict() ;

export const BankAccountUpsertArgsSchema: z.ZodType<Omit<Prisma.BankAccountUpsertArgs, "select" | "include">> = z.object({
  where: BankAccountWhereUniqueInputSchema,
  create: z.union([ BankAccountCreateInputSchema,BankAccountUncheckedCreateInputSchema ]),
  update: z.union([ BankAccountUpdateInputSchema,BankAccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const BankAccountCreateManyArgsSchema: z.ZodType<Prisma.BankAccountCreateManyArgs> = z.object({
  data: z.union([ BankAccountCreateManyInputSchema,BankAccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BankAccountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.BankAccountCreateManyAndReturnArgs> = z.object({
  data: z.union([ BankAccountCreateManyInputSchema,BankAccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BankAccountDeleteArgsSchema: z.ZodType<Omit<Prisma.BankAccountDeleteArgs, "select" | "include">> = z.object({
  where: BankAccountWhereUniqueInputSchema,
}).strict() ;

export const BankAccountUpdateArgsSchema: z.ZodType<Omit<Prisma.BankAccountUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ BankAccountUpdateInputSchema,BankAccountUncheckedUpdateInputSchema ]),
  where: BankAccountWhereUniqueInputSchema,
}).strict() ;

export const BankAccountUpdateManyArgsSchema: z.ZodType<Prisma.BankAccountUpdateManyArgs> = z.object({
  data: z.union([ BankAccountUpdateManyMutationInputSchema,BankAccountUncheckedUpdateManyInputSchema ]),
  where: BankAccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BankAccountUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.BankAccountUpdateManyAndReturnArgs> = z.object({
  data: z.union([ BankAccountUpdateManyMutationInputSchema,BankAccountUncheckedUpdateManyInputSchema ]),
  where: BankAccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BankAccountDeleteManyArgsSchema: z.ZodType<Prisma.BankAccountDeleteManyArgs> = z.object({
  where: BankAccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExpenseCreateArgsSchema: z.ZodType<Omit<Prisma.ExpenseCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ExpenseCreateInputSchema,ExpenseUncheckedCreateInputSchema ]),
}).strict() ;

export const ExpenseUpsertArgsSchema: z.ZodType<Omit<Prisma.ExpenseUpsertArgs, "select" | "include">> = z.object({
  where: ExpenseWhereUniqueInputSchema,
  create: z.union([ ExpenseCreateInputSchema,ExpenseUncheckedCreateInputSchema ]),
  update: z.union([ ExpenseUpdateInputSchema,ExpenseUncheckedUpdateInputSchema ]),
}).strict() ;

export const ExpenseCreateManyArgsSchema: z.ZodType<Prisma.ExpenseCreateManyArgs> = z.object({
  data: z.union([ ExpenseCreateManyInputSchema,ExpenseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ExpenseCreateManyAndReturnArgs> = z.object({
  data: z.union([ ExpenseCreateManyInputSchema,ExpenseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExpenseDeleteArgsSchema: z.ZodType<Omit<Prisma.ExpenseDeleteArgs, "select" | "include">> = z.object({
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseUpdateArgsSchema: z.ZodType<Omit<Prisma.ExpenseUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ExpenseUpdateInputSchema,ExpenseUncheckedUpdateInputSchema ]),
  where: ExpenseWhereUniqueInputSchema,
}).strict() ;

export const ExpenseUpdateManyArgsSchema: z.ZodType<Prisma.ExpenseUpdateManyArgs> = z.object({
  data: z.union([ ExpenseUpdateManyMutationInputSchema,ExpenseUncheckedUpdateManyInputSchema ]),
  where: ExpenseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExpenseUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ExpenseUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ExpenseUpdateManyMutationInputSchema,ExpenseUncheckedUpdateManyInputSchema ]),
  where: ExpenseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExpenseDeleteManyArgsSchema: z.ZodType<Prisma.ExpenseDeleteManyArgs> = z.object({
  where: ExpenseWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductCreateArgsSchema: z.ZodType<Omit<Prisma.ProductCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductUpsertArgsSchema: z.ZodType<Omit<Prisma.ProductUpsertArgs, "select" | "include">> = z.object({
  where: ProductWhereUniqueInputSchema,
  create: z.union([ ProductCreateInputSchema,ProductUncheckedCreateInputSchema ]),
  update: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductCreateManyArgsSchema: z.ZodType<Prisma.ProductCreateManyArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductCreateManyInputSchema,ProductCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductDeleteArgsSchema: z.ZodType<Omit<Prisma.ProductDeleteArgs, "select" | "include">> = z.object({
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateArgsSchema: z.ZodType<Omit<Prisma.ProductUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ProductUpdateInputSchema,ProductUncheckedUpdateInputSchema ]),
  where: ProductWhereUniqueInputSchema,
}).strict() ;

export const ProductUpdateManyArgsSchema: z.ZodType<Prisma.ProductUpdateManyArgs> = z.object({
  data: z.union([ ProductUpdateManyMutationInputSchema,ProductUncheckedUpdateManyInputSchema ]),
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProductUpdateManyMutationInputSchema,ProductUncheckedUpdateManyInputSchema ]),
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductDeleteManyArgsSchema: z.ZodType<Prisma.ProductDeleteManyArgs> = z.object({
  where: ProductWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProfitSharingCreateArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ProfitSharingCreateInputSchema,ProfitSharingUncheckedCreateInputSchema ]),
}).strict() ;

export const ProfitSharingUpsertArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingUpsertArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereUniqueInputSchema,
  create: z.union([ ProfitSharingCreateInputSchema,ProfitSharingUncheckedCreateInputSchema ]),
  update: z.union([ ProfitSharingUpdateInputSchema,ProfitSharingUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProfitSharingCreateManyArgsSchema: z.ZodType<Prisma.ProfitSharingCreateManyArgs> = z.object({
  data: z.union([ ProfitSharingCreateManyInputSchema,ProfitSharingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfitSharingCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProfitSharingCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProfitSharingCreateManyInputSchema,ProfitSharingCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProfitSharingDeleteArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingDeleteArgs, "select" | "include">> = z.object({
  where: ProfitSharingWhereUniqueInputSchema,
}).strict() ;

export const ProfitSharingUpdateArgsSchema: z.ZodType<Omit<Prisma.ProfitSharingUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ProfitSharingUpdateInputSchema,ProfitSharingUncheckedUpdateInputSchema ]),
  where: ProfitSharingWhereUniqueInputSchema,
}).strict() ;

export const ProfitSharingUpdateManyArgsSchema: z.ZodType<Prisma.ProfitSharingUpdateManyArgs> = z.object({
  data: z.union([ ProfitSharingUpdateManyMutationInputSchema,ProfitSharingUncheckedUpdateManyInputSchema ]),
  where: ProfitSharingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProfitSharingUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProfitSharingUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProfitSharingUpdateManyMutationInputSchema,ProfitSharingUncheckedUpdateManyInputSchema ]),
  where: ProfitSharingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProfitSharingDeleteManyArgsSchema: z.ZodType<Prisma.ProfitSharingDeleteManyArgs> = z.object({
  where: ProfitSharingWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AssetTransactionCreateArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AssetTransactionCreateInputSchema,AssetTransactionUncheckedCreateInputSchema ]),
}).strict() ;

export const AssetTransactionUpsertArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionUpsertArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereUniqueInputSchema,
  create: z.union([ AssetTransactionCreateInputSchema,AssetTransactionUncheckedCreateInputSchema ]),
  update: z.union([ AssetTransactionUpdateInputSchema,AssetTransactionUncheckedUpdateInputSchema ]),
}).strict() ;

export const AssetTransactionCreateManyArgsSchema: z.ZodType<Prisma.AssetTransactionCreateManyArgs> = z.object({
  data: z.union([ AssetTransactionCreateManyInputSchema,AssetTransactionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AssetTransactionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AssetTransactionCreateManyAndReturnArgs> = z.object({
  data: z.union([ AssetTransactionCreateManyInputSchema,AssetTransactionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AssetTransactionDeleteArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionDeleteArgs, "select" | "include">> = z.object({
  where: AssetTransactionWhereUniqueInputSchema,
}).strict() ;

export const AssetTransactionUpdateArgsSchema: z.ZodType<Omit<Prisma.AssetTransactionUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AssetTransactionUpdateInputSchema,AssetTransactionUncheckedUpdateInputSchema ]),
  where: AssetTransactionWhereUniqueInputSchema,
}).strict() ;

export const AssetTransactionUpdateManyArgsSchema: z.ZodType<Prisma.AssetTransactionUpdateManyArgs> = z.object({
  data: z.union([ AssetTransactionUpdateManyMutationInputSchema,AssetTransactionUncheckedUpdateManyInputSchema ]),
  where: AssetTransactionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AssetTransactionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AssetTransactionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AssetTransactionUpdateManyMutationInputSchema,AssetTransactionUncheckedUpdateManyInputSchema ]),
  where: AssetTransactionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AssetTransactionDeleteManyArgsSchema: z.ZodType<Prisma.AssetTransactionDeleteManyArgs> = z.object({
  where: AssetTransactionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AmmeterCreateArgsSchema: z.ZodType<Omit<Prisma.AmmeterCreateArgs, "select">> = z.object({
  data: z.union([ AmmeterCreateInputSchema,AmmeterUncheckedCreateInputSchema ]),
}).strict() ;

export const AmmeterUpsertArgsSchema: z.ZodType<Omit<Prisma.AmmeterUpsertArgs, "select">> = z.object({
  where: AmmeterWhereUniqueInputSchema,
  create: z.union([ AmmeterCreateInputSchema,AmmeterUncheckedCreateInputSchema ]),
  update: z.union([ AmmeterUpdateInputSchema,AmmeterUncheckedUpdateInputSchema ]),
}).strict() ;

export const AmmeterCreateManyArgsSchema: z.ZodType<Prisma.AmmeterCreateManyArgs> = z.object({
  data: z.union([ AmmeterCreateManyInputSchema,AmmeterCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AmmeterCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AmmeterCreateManyAndReturnArgs> = z.object({
  data: z.union([ AmmeterCreateManyInputSchema,AmmeterCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AmmeterDeleteArgsSchema: z.ZodType<Omit<Prisma.AmmeterDeleteArgs, "select">> = z.object({
  where: AmmeterWhereUniqueInputSchema,
}).strict() ;

export const AmmeterUpdateArgsSchema: z.ZodType<Omit<Prisma.AmmeterUpdateArgs, "select">> = z.object({
  data: z.union([ AmmeterUpdateInputSchema,AmmeterUncheckedUpdateInputSchema ]),
  where: AmmeterWhereUniqueInputSchema,
}).strict() ;

export const AmmeterUpdateManyArgsSchema: z.ZodType<Prisma.AmmeterUpdateManyArgs> = z.object({
  data: z.union([ AmmeterUpdateManyMutationInputSchema,AmmeterUncheckedUpdateManyInputSchema ]),
  where: AmmeterWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AmmeterUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AmmeterUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AmmeterUpdateManyMutationInputSchema,AmmeterUncheckedUpdateManyInputSchema ]),
  where: AmmeterWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AmmeterDeleteManyArgsSchema: z.ZodType<Prisma.AmmeterDeleteManyArgs> = z.object({
  where: AmmeterWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AmmeterLogCreateArgsSchema: z.ZodType<Omit<Prisma.AmmeterLogCreateArgs, "select">> = z.object({
  data: z.union([ AmmeterLogCreateInputSchema,AmmeterLogUncheckedCreateInputSchema ]),
}).strict() ;

export const AmmeterLogUpsertArgsSchema: z.ZodType<Omit<Prisma.AmmeterLogUpsertArgs, "select">> = z.object({
  where: AmmeterLogWhereUniqueInputSchema,
  create: z.union([ AmmeterLogCreateInputSchema,AmmeterLogUncheckedCreateInputSchema ]),
  update: z.union([ AmmeterLogUpdateInputSchema,AmmeterLogUncheckedUpdateInputSchema ]),
}).strict() ;

export const AmmeterLogCreateManyArgsSchema: z.ZodType<Prisma.AmmeterLogCreateManyArgs> = z.object({
  data: z.union([ AmmeterLogCreateManyInputSchema,AmmeterLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AmmeterLogCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AmmeterLogCreateManyAndReturnArgs> = z.object({
  data: z.union([ AmmeterLogCreateManyInputSchema,AmmeterLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AmmeterLogDeleteArgsSchema: z.ZodType<Omit<Prisma.AmmeterLogDeleteArgs, "select">> = z.object({
  where: AmmeterLogWhereUniqueInputSchema,
}).strict() ;

export const AmmeterLogUpdateArgsSchema: z.ZodType<Omit<Prisma.AmmeterLogUpdateArgs, "select">> = z.object({
  data: z.union([ AmmeterLogUpdateInputSchema,AmmeterLogUncheckedUpdateInputSchema ]),
  where: AmmeterLogWhereUniqueInputSchema,
}).strict() ;

export const AmmeterLogUpdateManyArgsSchema: z.ZodType<Prisma.AmmeterLogUpdateManyArgs> = z.object({
  data: z.union([ AmmeterLogUpdateManyMutationInputSchema,AmmeterLogUncheckedUpdateManyInputSchema ]),
  where: AmmeterLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AmmeterLogUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AmmeterLogUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AmmeterLogUpdateManyMutationInputSchema,AmmeterLogUncheckedUpdateManyInputSchema ]),
  where: AmmeterLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AmmeterLogDeleteManyArgsSchema: z.ZodType<Prisma.AmmeterLogDeleteManyArgs> = z.object({
  where: AmmeterLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExperimentRunCreateArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ExperimentRunCreateInputSchema,ExperimentRunUncheckedCreateInputSchema ]),
}).strict() ;

export const ExperimentRunUpsertArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunUpsertArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereUniqueInputSchema,
  create: z.union([ ExperimentRunCreateInputSchema,ExperimentRunUncheckedCreateInputSchema ]),
  update: z.union([ ExperimentRunUpdateInputSchema,ExperimentRunUncheckedUpdateInputSchema ]),
}).strict() ;

export const ExperimentRunCreateManyArgsSchema: z.ZodType<Prisma.ExperimentRunCreateManyArgs> = z.object({
  data: z.union([ ExperimentRunCreateManyInputSchema,ExperimentRunCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExperimentRunCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ExperimentRunCreateManyAndReturnArgs> = z.object({
  data: z.union([ ExperimentRunCreateManyInputSchema,ExperimentRunCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExperimentRunDeleteArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunDeleteArgs, "select" | "include">> = z.object({
  where: ExperimentRunWhereUniqueInputSchema,
}).strict() ;

export const ExperimentRunUpdateArgsSchema: z.ZodType<Omit<Prisma.ExperimentRunUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ExperimentRunUpdateInputSchema,ExperimentRunUncheckedUpdateInputSchema ]),
  where: ExperimentRunWhereUniqueInputSchema,
}).strict() ;

export const ExperimentRunUpdateManyArgsSchema: z.ZodType<Prisma.ExperimentRunUpdateManyArgs> = z.object({
  data: z.union([ ExperimentRunUpdateManyMutationInputSchema,ExperimentRunUncheckedUpdateManyInputSchema ]),
  where: ExperimentRunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExperimentRunUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ExperimentRunUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ExperimentRunUpdateManyMutationInputSchema,ExperimentRunUncheckedUpdateManyInputSchema ]),
  where: ExperimentRunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ExperimentRunDeleteManyArgsSchema: z.ZodType<Prisma.ExperimentRunDeleteManyArgs> = z.object({
  where: ExperimentRunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AnomalyEventCreateArgsSchema: z.ZodType<Omit<Prisma.AnomalyEventCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AnomalyEventCreateInputSchema,AnomalyEventUncheckedCreateInputSchema ]),
}).strict() ;

export const AnomalyEventUpsertArgsSchema: z.ZodType<Omit<Prisma.AnomalyEventUpsertArgs, "select" | "include">> = z.object({
  where: AnomalyEventWhereUniqueInputSchema,
  create: z.union([ AnomalyEventCreateInputSchema,AnomalyEventUncheckedCreateInputSchema ]),
  update: z.union([ AnomalyEventUpdateInputSchema,AnomalyEventUncheckedUpdateInputSchema ]),
}).strict() ;

export const AnomalyEventCreateManyArgsSchema: z.ZodType<Prisma.AnomalyEventCreateManyArgs> = z.object({
  data: z.union([ AnomalyEventCreateManyInputSchema,AnomalyEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnomalyEventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AnomalyEventCreateManyAndReturnArgs> = z.object({
  data: z.union([ AnomalyEventCreateManyInputSchema,AnomalyEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnomalyEventDeleteArgsSchema: z.ZodType<Omit<Prisma.AnomalyEventDeleteArgs, "select" | "include">> = z.object({
  where: AnomalyEventWhereUniqueInputSchema,
}).strict() ;

export const AnomalyEventUpdateArgsSchema: z.ZodType<Omit<Prisma.AnomalyEventUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AnomalyEventUpdateInputSchema,AnomalyEventUncheckedUpdateInputSchema ]),
  where: AnomalyEventWhereUniqueInputSchema,
}).strict() ;

export const AnomalyEventUpdateManyArgsSchema: z.ZodType<Prisma.AnomalyEventUpdateManyArgs> = z.object({
  data: z.union([ AnomalyEventUpdateManyMutationInputSchema,AnomalyEventUncheckedUpdateManyInputSchema ]),
  where: AnomalyEventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AnomalyEventUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AnomalyEventUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AnomalyEventUpdateManyMutationInputSchema,AnomalyEventUncheckedUpdateManyInputSchema ]),
  where: AnomalyEventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AnomalyEventDeleteManyArgsSchema: z.ZodType<Prisma.AnomalyEventDeleteManyArgs> = z.object({
  where: AnomalyEventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AnomalyLabelCreateArgsSchema: z.ZodType<Omit<Prisma.AnomalyLabelCreateArgs, "select" | "include">> = z.object({
  data: z.union([ AnomalyLabelCreateInputSchema,AnomalyLabelUncheckedCreateInputSchema ]),
}).strict() ;

export const AnomalyLabelUpsertArgsSchema: z.ZodType<Omit<Prisma.AnomalyLabelUpsertArgs, "select" | "include">> = z.object({
  where: AnomalyLabelWhereUniqueInputSchema,
  create: z.union([ AnomalyLabelCreateInputSchema,AnomalyLabelUncheckedCreateInputSchema ]),
  update: z.union([ AnomalyLabelUpdateInputSchema,AnomalyLabelUncheckedUpdateInputSchema ]),
}).strict() ;

export const AnomalyLabelCreateManyArgsSchema: z.ZodType<Prisma.AnomalyLabelCreateManyArgs> = z.object({
  data: z.union([ AnomalyLabelCreateManyInputSchema,AnomalyLabelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnomalyLabelCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AnomalyLabelCreateManyAndReturnArgs> = z.object({
  data: z.union([ AnomalyLabelCreateManyInputSchema,AnomalyLabelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnomalyLabelDeleteArgsSchema: z.ZodType<Omit<Prisma.AnomalyLabelDeleteArgs, "select" | "include">> = z.object({
  where: AnomalyLabelWhereUniqueInputSchema,
}).strict() ;

export const AnomalyLabelUpdateArgsSchema: z.ZodType<Omit<Prisma.AnomalyLabelUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ AnomalyLabelUpdateInputSchema,AnomalyLabelUncheckedUpdateInputSchema ]),
  where: AnomalyLabelWhereUniqueInputSchema,
}).strict() ;

export const AnomalyLabelUpdateManyArgsSchema: z.ZodType<Prisma.AnomalyLabelUpdateManyArgs> = z.object({
  data: z.union([ AnomalyLabelUpdateManyMutationInputSchema,AnomalyLabelUncheckedUpdateManyInputSchema ]),
  where: AnomalyLabelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AnomalyLabelUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AnomalyLabelUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AnomalyLabelUpdateManyMutationInputSchema,AnomalyLabelUncheckedUpdateManyInputSchema ]),
  where: AnomalyLabelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AnomalyLabelDeleteManyArgsSchema: z.ZodType<Prisma.AnomalyLabelDeleteManyArgs> = z.object({
  where: AnomalyLabelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BorrowGodCreateArgsSchema: z.ZodType<Omit<Prisma.BorrowGodCreateArgs, "select" | "include">> = z.object({
  data: z.union([ BorrowGodCreateInputSchema,BorrowGodUncheckedCreateInputSchema ]),
}).strict() ;

export const BorrowGodUpsertArgsSchema: z.ZodType<Omit<Prisma.BorrowGodUpsertArgs, "select" | "include">> = z.object({
  where: BorrowGodWhereUniqueInputSchema,
  create: z.union([ BorrowGodCreateInputSchema,BorrowGodUncheckedCreateInputSchema ]),
  update: z.union([ BorrowGodUpdateInputSchema,BorrowGodUncheckedUpdateInputSchema ]),
}).strict() ;

export const BorrowGodCreateManyArgsSchema: z.ZodType<Prisma.BorrowGodCreateManyArgs> = z.object({
  data: z.union([ BorrowGodCreateManyInputSchema,BorrowGodCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BorrowGodCreateManyAndReturnArgsSchema: z.ZodType<Prisma.BorrowGodCreateManyAndReturnArgs> = z.object({
  data: z.union([ BorrowGodCreateManyInputSchema,BorrowGodCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BorrowGodDeleteArgsSchema: z.ZodType<Omit<Prisma.BorrowGodDeleteArgs, "select" | "include">> = z.object({
  where: BorrowGodWhereUniqueInputSchema,
}).strict() ;

export const BorrowGodUpdateArgsSchema: z.ZodType<Omit<Prisma.BorrowGodUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ BorrowGodUpdateInputSchema,BorrowGodUncheckedUpdateInputSchema ]),
  where: BorrowGodWhereUniqueInputSchema,
}).strict() ;

export const BorrowGodUpdateManyArgsSchema: z.ZodType<Prisma.BorrowGodUpdateManyArgs> = z.object({
  data: z.union([ BorrowGodUpdateManyMutationInputSchema,BorrowGodUncheckedUpdateManyInputSchema ]),
  where: BorrowGodWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BorrowGodUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.BorrowGodUpdateManyAndReturnArgs> = z.object({
  data: z.union([ BorrowGodUpdateManyMutationInputSchema,BorrowGodUncheckedUpdateManyInputSchema ]),
  where: BorrowGodWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BorrowGodDeleteManyArgsSchema: z.ZodType<Prisma.BorrowGodDeleteManyArgs> = z.object({
  where: BorrowGodWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BuddhistCreateArgsSchema: z.ZodType<Omit<Prisma.BuddhistCreateArgs, "select" | "include">> = z.object({
  data: z.union([ BuddhistCreateInputSchema,BuddhistUncheckedCreateInputSchema ]),
}).strict() ;

export const BuddhistUpsertArgsSchema: z.ZodType<Omit<Prisma.BuddhistUpsertArgs, "select" | "include">> = z.object({
  where: BuddhistWhereUniqueInputSchema,
  create: z.union([ BuddhistCreateInputSchema,BuddhistUncheckedCreateInputSchema ]),
  update: z.union([ BuddhistUpdateInputSchema,BuddhistUncheckedUpdateInputSchema ]),
}).strict() ;

export const BuddhistCreateManyArgsSchema: z.ZodType<Prisma.BuddhistCreateManyArgs> = z.object({
  data: z.union([ BuddhistCreateManyInputSchema,BuddhistCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BuddhistCreateManyAndReturnArgsSchema: z.ZodType<Prisma.BuddhistCreateManyAndReturnArgs> = z.object({
  data: z.union([ BuddhistCreateManyInputSchema,BuddhistCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BuddhistDeleteArgsSchema: z.ZodType<Omit<Prisma.BuddhistDeleteArgs, "select" | "include">> = z.object({
  where: BuddhistWhereUniqueInputSchema,
}).strict() ;

export const BuddhistUpdateArgsSchema: z.ZodType<Omit<Prisma.BuddhistUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ BuddhistUpdateInputSchema,BuddhistUncheckedUpdateInputSchema ]),
  where: BuddhistWhereUniqueInputSchema,
}).strict() ;

export const BuddhistUpdateManyArgsSchema: z.ZodType<Prisma.BuddhistUpdateManyArgs> = z.object({
  data: z.union([ BuddhistUpdateManyMutationInputSchema,BuddhistUncheckedUpdateManyInputSchema ]),
  where: BuddhistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BuddhistUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.BuddhistUpdateManyAndReturnArgs> = z.object({
  data: z.union([ BuddhistUpdateManyMutationInputSchema,BuddhistUncheckedUpdateManyInputSchema ]),
  where: BuddhistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const BuddhistDeleteManyArgsSchema: z.ZodType<Prisma.BuddhistDeleteManyArgs> = z.object({
  where: BuddhistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EventLabelLinkCreateArgsSchema: z.ZodType<Omit<Prisma.EventLabelLinkCreateArgs, "select" | "include">> = z.object({
  data: z.union([ EventLabelLinkCreateInputSchema,EventLabelLinkUncheckedCreateInputSchema ]),
}).strict() ;

export const EventLabelLinkUpsertArgsSchema: z.ZodType<Omit<Prisma.EventLabelLinkUpsertArgs, "select" | "include">> = z.object({
  where: EventLabelLinkWhereUniqueInputSchema,
  create: z.union([ EventLabelLinkCreateInputSchema,EventLabelLinkUncheckedCreateInputSchema ]),
  update: z.union([ EventLabelLinkUpdateInputSchema,EventLabelLinkUncheckedUpdateInputSchema ]),
}).strict() ;

export const EventLabelLinkCreateManyArgsSchema: z.ZodType<Prisma.EventLabelLinkCreateManyArgs> = z.object({
  data: z.union([ EventLabelLinkCreateManyInputSchema,EventLabelLinkCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventLabelLinkCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EventLabelLinkCreateManyAndReturnArgs> = z.object({
  data: z.union([ EventLabelLinkCreateManyInputSchema,EventLabelLinkCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EventLabelLinkDeleteArgsSchema: z.ZodType<Omit<Prisma.EventLabelLinkDeleteArgs, "select" | "include">> = z.object({
  where: EventLabelLinkWhereUniqueInputSchema,
}).strict() ;

export const EventLabelLinkUpdateArgsSchema: z.ZodType<Omit<Prisma.EventLabelLinkUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ EventLabelLinkUpdateInputSchema,EventLabelLinkUncheckedUpdateInputSchema ]),
  where: EventLabelLinkWhereUniqueInputSchema,
}).strict() ;

export const EventLabelLinkUpdateManyArgsSchema: z.ZodType<Prisma.EventLabelLinkUpdateManyArgs> = z.object({
  data: z.union([ EventLabelLinkUpdateManyMutationInputSchema,EventLabelLinkUncheckedUpdateManyInputSchema ]),
  where: EventLabelLinkWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EventLabelLinkUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.EventLabelLinkUpdateManyAndReturnArgs> = z.object({
  data: z.union([ EventLabelLinkUpdateManyMutationInputSchema,EventLabelLinkUncheckedUpdateManyInputSchema ]),
  where: EventLabelLinkWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EventLabelLinkDeleteManyArgsSchema: z.ZodType<Prisma.EventLabelLinkDeleteManyArgs> = z.object({
  where: EventLabelLinkWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FamilyCreateArgsSchema: z.ZodType<Omit<Prisma.FamilyCreateArgs, "select" | "include">> = z.object({
  data: z.union([ FamilyCreateInputSchema,FamilyUncheckedCreateInputSchema ]),
}).strict() ;

export const FamilyUpsertArgsSchema: z.ZodType<Omit<Prisma.FamilyUpsertArgs, "select" | "include">> = z.object({
  where: FamilyWhereUniqueInputSchema,
  create: z.union([ FamilyCreateInputSchema,FamilyUncheckedCreateInputSchema ]),
  update: z.union([ FamilyUpdateInputSchema,FamilyUncheckedUpdateInputSchema ]),
}).strict() ;

export const FamilyCreateManyArgsSchema: z.ZodType<Prisma.FamilyCreateManyArgs> = z.object({
  data: z.union([ FamilyCreateManyInputSchema,FamilyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FamilyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FamilyCreateManyAndReturnArgs> = z.object({
  data: z.union([ FamilyCreateManyInputSchema,FamilyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FamilyDeleteArgsSchema: z.ZodType<Omit<Prisma.FamilyDeleteArgs, "select" | "include">> = z.object({
  where: FamilyWhereUniqueInputSchema,
}).strict() ;

export const FamilyUpdateArgsSchema: z.ZodType<Omit<Prisma.FamilyUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ FamilyUpdateInputSchema,FamilyUncheckedUpdateInputSchema ]),
  where: FamilyWhereUniqueInputSchema,
}).strict() ;

export const FamilyUpdateManyArgsSchema: z.ZodType<Prisma.FamilyUpdateManyArgs> = z.object({
  data: z.union([ FamilyUpdateManyMutationInputSchema,FamilyUncheckedUpdateManyInputSchema ]),
  where: FamilyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FamilyUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.FamilyUpdateManyAndReturnArgs> = z.object({
  data: z.union([ FamilyUpdateManyMutationInputSchema,FamilyUncheckedUpdateManyInputSchema ]),
  where: FamilyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FamilyDeleteManyArgsSchema: z.ZodType<Prisma.FamilyDeleteManyArgs> = z.object({
  where: FamilyWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FamilyMemberCreateArgsSchema: z.ZodType<Omit<Prisma.FamilyMemberCreateArgs, "select" | "include">> = z.object({
  data: z.union([ FamilyMemberCreateInputSchema,FamilyMemberUncheckedCreateInputSchema ]),
}).strict() ;

export const FamilyMemberUpsertArgsSchema: z.ZodType<Omit<Prisma.FamilyMemberUpsertArgs, "select" | "include">> = z.object({
  where: FamilyMemberWhereUniqueInputSchema,
  create: z.union([ FamilyMemberCreateInputSchema,FamilyMemberUncheckedCreateInputSchema ]),
  update: z.union([ FamilyMemberUpdateInputSchema,FamilyMemberUncheckedUpdateInputSchema ]),
}).strict() ;

export const FamilyMemberCreateManyArgsSchema: z.ZodType<Prisma.FamilyMemberCreateManyArgs> = z.object({
  data: z.union([ FamilyMemberCreateManyInputSchema,FamilyMemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FamilyMemberCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FamilyMemberCreateManyAndReturnArgs> = z.object({
  data: z.union([ FamilyMemberCreateManyInputSchema,FamilyMemberCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FamilyMemberDeleteArgsSchema: z.ZodType<Omit<Prisma.FamilyMemberDeleteArgs, "select" | "include">> = z.object({
  where: FamilyMemberWhereUniqueInputSchema,
}).strict() ;

export const FamilyMemberUpdateArgsSchema: z.ZodType<Omit<Prisma.FamilyMemberUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ FamilyMemberUpdateInputSchema,FamilyMemberUncheckedUpdateInputSchema ]),
  where: FamilyMemberWhereUniqueInputSchema,
}).strict() ;

export const FamilyMemberUpdateManyArgsSchema: z.ZodType<Prisma.FamilyMemberUpdateManyArgs> = z.object({
  data: z.union([ FamilyMemberUpdateManyMutationInputSchema,FamilyMemberUncheckedUpdateManyInputSchema ]),
  where: FamilyMemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FamilyMemberUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.FamilyMemberUpdateManyAndReturnArgs> = z.object({
  data: z.union([ FamilyMemberUpdateManyMutationInputSchema,FamilyMemberUncheckedUpdateManyInputSchema ]),
  where: FamilyMemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FamilyMemberDeleteManyArgsSchema: z.ZodType<Prisma.FamilyMemberDeleteManyArgs> = z.object({
  where: FamilyMemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const GodNameCreateArgsSchema: z.ZodType<Omit<Prisma.GodNameCreateArgs, "select" | "include">> = z.object({
  data: z.union([ GodNameCreateInputSchema,GodNameUncheckedCreateInputSchema ]),
}).strict() ;

export const GodNameUpsertArgsSchema: z.ZodType<Omit<Prisma.GodNameUpsertArgs, "select" | "include">> = z.object({
  where: GodNameWhereUniqueInputSchema,
  create: z.union([ GodNameCreateInputSchema,GodNameUncheckedCreateInputSchema ]),
  update: z.union([ GodNameUpdateInputSchema,GodNameUncheckedUpdateInputSchema ]),
}).strict() ;

export const GodNameCreateManyArgsSchema: z.ZodType<Prisma.GodNameCreateManyArgs> = z.object({
  data: z.union([ GodNameCreateManyInputSchema,GodNameCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const GodNameCreateManyAndReturnArgsSchema: z.ZodType<Prisma.GodNameCreateManyAndReturnArgs> = z.object({
  data: z.union([ GodNameCreateManyInputSchema,GodNameCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const GodNameDeleteArgsSchema: z.ZodType<Omit<Prisma.GodNameDeleteArgs, "select" | "include">> = z.object({
  where: GodNameWhereUniqueInputSchema,
}).strict() ;

export const GodNameUpdateArgsSchema: z.ZodType<Omit<Prisma.GodNameUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ GodNameUpdateInputSchema,GodNameUncheckedUpdateInputSchema ]),
  where: GodNameWhereUniqueInputSchema,
}).strict() ;

export const GodNameUpdateManyArgsSchema: z.ZodType<Prisma.GodNameUpdateManyArgs> = z.object({
  data: z.union([ GodNameUpdateManyMutationInputSchema,GodNameUncheckedUpdateManyInputSchema ]),
  where: GodNameWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const GodNameUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.GodNameUpdateManyAndReturnArgs> = z.object({
  data: z.union([ GodNameUpdateManyMutationInputSchema,GodNameUncheckedUpdateManyInputSchema ]),
  where: GodNameWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const GodNameDeleteManyArgsSchema: z.ZodType<Prisma.GodNameDeleteManyArgs> = z.object({
  where: GodNameWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberClassCreateArgsSchema: z.ZodType<Omit<Prisma.MemberClassCreateArgs, "select" | "include">> = z.object({
  data: z.union([ MemberClassCreateInputSchema,MemberClassUncheckedCreateInputSchema ]),
}).strict() ;

export const MemberClassUpsertArgsSchema: z.ZodType<Omit<Prisma.MemberClassUpsertArgs, "select" | "include">> = z.object({
  where: MemberClassWhereUniqueInputSchema,
  create: z.union([ MemberClassCreateInputSchema,MemberClassUncheckedCreateInputSchema ]),
  update: z.union([ MemberClassUpdateInputSchema,MemberClassUncheckedUpdateInputSchema ]),
}).strict() ;

export const MemberClassCreateManyArgsSchema: z.ZodType<Prisma.MemberClassCreateManyArgs> = z.object({
  data: z.union([ MemberClassCreateManyInputSchema,MemberClassCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberClassCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberClassCreateManyAndReturnArgs> = z.object({
  data: z.union([ MemberClassCreateManyInputSchema,MemberClassCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MemberClassDeleteArgsSchema: z.ZodType<Omit<Prisma.MemberClassDeleteArgs, "select" | "include">> = z.object({
  where: MemberClassWhereUniqueInputSchema,
}).strict() ;

export const MemberClassUpdateArgsSchema: z.ZodType<Omit<Prisma.MemberClassUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ MemberClassUpdateInputSchema,MemberClassUncheckedUpdateInputSchema ]),
  where: MemberClassWhereUniqueInputSchema,
}).strict() ;

export const MemberClassUpdateManyArgsSchema: z.ZodType<Prisma.MemberClassUpdateManyArgs> = z.object({
  data: z.union([ MemberClassUpdateManyMutationInputSchema,MemberClassUncheckedUpdateManyInputSchema ]),
  where: MemberClassWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberClassUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MemberClassUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MemberClassUpdateManyMutationInputSchema,MemberClassUncheckedUpdateManyInputSchema ]),
  where: MemberClassWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberClassDeleteManyArgsSchema: z.ZodType<Prisma.MemberClassDeleteManyArgs> = z.object({
  where: MemberClassWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MgYearCreateArgsSchema: z.ZodType<Omit<Prisma.MgYearCreateArgs, "select" | "include">> = z.object({
  data: z.union([ MgYearCreateInputSchema,MgYearUncheckedCreateInputSchema ]),
}).strict() ;

export const MgYearUpsertArgsSchema: z.ZodType<Omit<Prisma.MgYearUpsertArgs, "select" | "include">> = z.object({
  where: MgYearWhereUniqueInputSchema,
  create: z.union([ MgYearCreateInputSchema,MgYearUncheckedCreateInputSchema ]),
  update: z.union([ MgYearUpdateInputSchema,MgYearUncheckedUpdateInputSchema ]),
}).strict() ;

export const MgYearCreateManyArgsSchema: z.ZodType<Prisma.MgYearCreateManyArgs> = z.object({
  data: z.union([ MgYearCreateManyInputSchema,MgYearCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MgYearCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MgYearCreateManyAndReturnArgs> = z.object({
  data: z.union([ MgYearCreateManyInputSchema,MgYearCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MgYearDeleteArgsSchema: z.ZodType<Omit<Prisma.MgYearDeleteArgs, "select" | "include">> = z.object({
  where: MgYearWhereUniqueInputSchema,
}).strict() ;

export const MgYearUpdateArgsSchema: z.ZodType<Omit<Prisma.MgYearUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ MgYearUpdateInputSchema,MgYearUncheckedUpdateInputSchema ]),
  where: MgYearWhereUniqueInputSchema,
}).strict() ;

export const MgYearUpdateManyArgsSchema: z.ZodType<Prisma.MgYearUpdateManyArgs> = z.object({
  data: z.union([ MgYearUpdateManyMutationInputSchema,MgYearUncheckedUpdateManyInputSchema ]),
  where: MgYearWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MgYearUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MgYearUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MgYearUpdateManyMutationInputSchema,MgYearUncheckedUpdateManyInputSchema ]),
  where: MgYearWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MgYearDeleteManyArgsSchema: z.ZodType<Prisma.MgYearDeleteManyArgs> = z.object({
  where: MgYearWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Service1CreateArgsSchema: z.ZodType<Omit<Prisma.Service1CreateArgs, "select" | "include">> = z.object({
  data: z.union([ Service1CreateInputSchema,Service1UncheckedCreateInputSchema ]),
}).strict() ;

export const Service1UpsertArgsSchema: z.ZodType<Omit<Prisma.Service1UpsertArgs, "select" | "include">> = z.object({
  where: Service1WhereUniqueInputSchema,
  create: z.union([ Service1CreateInputSchema,Service1UncheckedCreateInputSchema ]),
  update: z.union([ Service1UpdateInputSchema,Service1UncheckedUpdateInputSchema ]),
}).strict() ;

export const Service1CreateManyArgsSchema: z.ZodType<Prisma.Service1CreateManyArgs> = z.object({
  data: z.union([ Service1CreateManyInputSchema,Service1CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const Service1CreateManyAndReturnArgsSchema: z.ZodType<Prisma.Service1CreateManyAndReturnArgs> = z.object({
  data: z.union([ Service1CreateManyInputSchema,Service1CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const Service1DeleteArgsSchema: z.ZodType<Omit<Prisma.Service1DeleteArgs, "select" | "include">> = z.object({
  where: Service1WhereUniqueInputSchema,
}).strict() ;

export const Service1UpdateArgsSchema: z.ZodType<Omit<Prisma.Service1UpdateArgs, "select" | "include">> = z.object({
  data: z.union([ Service1UpdateInputSchema,Service1UncheckedUpdateInputSchema ]),
  where: Service1WhereUniqueInputSchema,
}).strict() ;

export const Service1UpdateManyArgsSchema: z.ZodType<Prisma.Service1UpdateManyArgs> = z.object({
  data: z.union([ Service1UpdateManyMutationInputSchema,Service1UncheckedUpdateManyInputSchema ]),
  where: Service1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Service1UpdateManyAndReturnArgsSchema: z.ZodType<Prisma.Service1UpdateManyAndReturnArgs> = z.object({
  data: z.union([ Service1UpdateManyMutationInputSchema,Service1UncheckedUpdateManyInputSchema ]),
  where: Service1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Service1DeleteManyArgsSchema: z.ZodType<Prisma.Service1DeleteManyArgs> = z.object({
  where: Service1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Service2CreateArgsSchema: z.ZodType<Omit<Prisma.Service2CreateArgs, "select" | "include">> = z.object({
  data: z.union([ Service2CreateInputSchema,Service2UncheckedCreateInputSchema ]),
}).strict() ;

export const Service2UpsertArgsSchema: z.ZodType<Omit<Prisma.Service2UpsertArgs, "select" | "include">> = z.object({
  where: Service2WhereUniqueInputSchema,
  create: z.union([ Service2CreateInputSchema,Service2UncheckedCreateInputSchema ]),
  update: z.union([ Service2UpdateInputSchema,Service2UncheckedUpdateInputSchema ]),
}).strict() ;

export const Service2CreateManyArgsSchema: z.ZodType<Prisma.Service2CreateManyArgs> = z.object({
  data: z.union([ Service2CreateManyInputSchema,Service2CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const Service2CreateManyAndReturnArgsSchema: z.ZodType<Prisma.Service2CreateManyAndReturnArgs> = z.object({
  data: z.union([ Service2CreateManyInputSchema,Service2CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const Service2DeleteArgsSchema: z.ZodType<Omit<Prisma.Service2DeleteArgs, "select" | "include">> = z.object({
  where: Service2WhereUniqueInputSchema,
}).strict() ;

export const Service2UpdateArgsSchema: z.ZodType<Omit<Prisma.Service2UpdateArgs, "select" | "include">> = z.object({
  data: z.union([ Service2UpdateInputSchema,Service2UncheckedUpdateInputSchema ]),
  where: Service2WhereUniqueInputSchema,
}).strict() ;

export const Service2UpdateManyArgsSchema: z.ZodType<Prisma.Service2UpdateManyArgs> = z.object({
  data: z.union([ Service2UpdateManyMutationInputSchema,Service2UncheckedUpdateManyInputSchema ]),
  where: Service2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Service2UpdateManyAndReturnArgsSchema: z.ZodType<Prisma.Service2UpdateManyAndReturnArgs> = z.object({
  data: z.union([ Service2UpdateManyMutationInputSchema,Service2UncheckedUpdateManyInputSchema ]),
  where: Service2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Service2DeleteManyArgsSchema: z.ZodType<Prisma.Service2DeleteManyArgs> = z.object({
  where: Service2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Servicing1CreateArgsSchema: z.ZodType<Omit<Prisma.Servicing1CreateArgs, "select" | "include">> = z.object({
  data: z.union([ Servicing1CreateInputSchema,Servicing1UncheckedCreateInputSchema ]),
}).strict() ;

export const Servicing1UpsertArgsSchema: z.ZodType<Omit<Prisma.Servicing1UpsertArgs, "select" | "include">> = z.object({
  where: Servicing1WhereUniqueInputSchema,
  create: z.union([ Servicing1CreateInputSchema,Servicing1UncheckedCreateInputSchema ]),
  update: z.union([ Servicing1UpdateInputSchema,Servicing1UncheckedUpdateInputSchema ]),
}).strict() ;

export const Servicing1CreateManyArgsSchema: z.ZodType<Prisma.Servicing1CreateManyArgs> = z.object({
  data: z.union([ Servicing1CreateManyInputSchema,Servicing1CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const Servicing1CreateManyAndReturnArgsSchema: z.ZodType<Prisma.Servicing1CreateManyAndReturnArgs> = z.object({
  data: z.union([ Servicing1CreateManyInputSchema,Servicing1CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const Servicing1DeleteArgsSchema: z.ZodType<Omit<Prisma.Servicing1DeleteArgs, "select" | "include">> = z.object({
  where: Servicing1WhereUniqueInputSchema,
}).strict() ;

export const Servicing1UpdateArgsSchema: z.ZodType<Omit<Prisma.Servicing1UpdateArgs, "select" | "include">> = z.object({
  data: z.union([ Servicing1UpdateInputSchema,Servicing1UncheckedUpdateInputSchema ]),
  where: Servicing1WhereUniqueInputSchema,
}).strict() ;

export const Servicing1UpdateManyArgsSchema: z.ZodType<Prisma.Servicing1UpdateManyArgs> = z.object({
  data: z.union([ Servicing1UpdateManyMutationInputSchema,Servicing1UncheckedUpdateManyInputSchema ]),
  where: Servicing1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Servicing1UpdateManyAndReturnArgsSchema: z.ZodType<Prisma.Servicing1UpdateManyAndReturnArgs> = z.object({
  data: z.union([ Servicing1UpdateManyMutationInputSchema,Servicing1UncheckedUpdateManyInputSchema ]),
  where: Servicing1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Servicing1DeleteManyArgsSchema: z.ZodType<Prisma.Servicing1DeleteManyArgs> = z.object({
  where: Servicing1WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Servicing2CreateArgsSchema: z.ZodType<Omit<Prisma.Servicing2CreateArgs, "select" | "include">> = z.object({
  data: z.union([ Servicing2CreateInputSchema,Servicing2UncheckedCreateInputSchema ]),
}).strict() ;

export const Servicing2UpsertArgsSchema: z.ZodType<Omit<Prisma.Servicing2UpsertArgs, "select" | "include">> = z.object({
  where: Servicing2WhereUniqueInputSchema,
  create: z.union([ Servicing2CreateInputSchema,Servicing2UncheckedCreateInputSchema ]),
  update: z.union([ Servicing2UpdateInputSchema,Servicing2UncheckedUpdateInputSchema ]),
}).strict() ;

export const Servicing2CreateManyArgsSchema: z.ZodType<Prisma.Servicing2CreateManyArgs> = z.object({
  data: z.union([ Servicing2CreateManyInputSchema,Servicing2CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const Servicing2CreateManyAndReturnArgsSchema: z.ZodType<Prisma.Servicing2CreateManyAndReturnArgs> = z.object({
  data: z.union([ Servicing2CreateManyInputSchema,Servicing2CreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const Servicing2DeleteArgsSchema: z.ZodType<Omit<Prisma.Servicing2DeleteArgs, "select" | "include">> = z.object({
  where: Servicing2WhereUniqueInputSchema,
}).strict() ;

export const Servicing2UpdateArgsSchema: z.ZodType<Omit<Prisma.Servicing2UpdateArgs, "select" | "include">> = z.object({
  data: z.union([ Servicing2UpdateInputSchema,Servicing2UncheckedUpdateInputSchema ]),
  where: Servicing2WhereUniqueInputSchema,
}).strict() ;

export const Servicing2UpdateManyArgsSchema: z.ZodType<Prisma.Servicing2UpdateManyArgs> = z.object({
  data: z.union([ Servicing2UpdateManyMutationInputSchema,Servicing2UncheckedUpdateManyInputSchema ]),
  where: Servicing2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Servicing2UpdateManyAndReturnArgsSchema: z.ZodType<Prisma.Servicing2UpdateManyAndReturnArgs> = z.object({
  data: z.union([ Servicing2UpdateManyMutationInputSchema,Servicing2UncheckedUpdateManyInputSchema ]),
  where: Servicing2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const Servicing2DeleteManyArgsSchema: z.ZodType<Prisma.Servicing2DeleteManyArgs> = z.object({
  where: Servicing2WhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TempleCreateArgsSchema: z.ZodType<Omit<Prisma.TempleCreateArgs, "select" | "include">> = z.object({
  data: z.union([ TempleCreateInputSchema,TempleUncheckedCreateInputSchema ]),
}).strict() ;

export const TempleUpsertArgsSchema: z.ZodType<Omit<Prisma.TempleUpsertArgs, "select" | "include">> = z.object({
  where: TempleWhereUniqueInputSchema,
  create: z.union([ TempleCreateInputSchema,TempleUncheckedCreateInputSchema ]),
  update: z.union([ TempleUpdateInputSchema,TempleUncheckedUpdateInputSchema ]),
}).strict() ;

export const TempleCreateManyArgsSchema: z.ZodType<Prisma.TempleCreateManyArgs> = z.object({
  data: z.union([ TempleCreateManyInputSchema,TempleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TempleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TempleCreateManyAndReturnArgs> = z.object({
  data: z.union([ TempleCreateManyInputSchema,TempleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TempleDeleteArgsSchema: z.ZodType<Omit<Prisma.TempleDeleteArgs, "select" | "include">> = z.object({
  where: TempleWhereUniqueInputSchema,
}).strict() ;

export const TempleUpdateArgsSchema: z.ZodType<Omit<Prisma.TempleUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ TempleUpdateInputSchema,TempleUncheckedUpdateInputSchema ]),
  where: TempleWhereUniqueInputSchema,
}).strict() ;

export const TempleUpdateManyArgsSchema: z.ZodType<Prisma.TempleUpdateManyArgs> = z.object({
  data: z.union([ TempleUpdateManyMutationInputSchema,TempleUncheckedUpdateManyInputSchema ]),
  where: TempleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TempleUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TempleUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TempleUpdateManyMutationInputSchema,TempleUncheckedUpdateManyInputSchema ]),
  where: TempleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TempleDeleteManyArgsSchema: z.ZodType<Prisma.TempleDeleteManyArgs> = z.object({
  where: TempleWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TrainedModelCreateArgsSchema: z.ZodType<Omit<Prisma.TrainedModelCreateArgs, "select" | "include">> = z.object({
  data: z.union([ TrainedModelCreateInputSchema,TrainedModelUncheckedCreateInputSchema ]),
}).strict() ;

export const TrainedModelUpsertArgsSchema: z.ZodType<Omit<Prisma.TrainedModelUpsertArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereUniqueInputSchema,
  create: z.union([ TrainedModelCreateInputSchema,TrainedModelUncheckedCreateInputSchema ]),
  update: z.union([ TrainedModelUpdateInputSchema,TrainedModelUncheckedUpdateInputSchema ]),
}).strict() ;

export const TrainedModelCreateManyArgsSchema: z.ZodType<Prisma.TrainedModelCreateManyArgs> = z.object({
  data: z.union([ TrainedModelCreateManyInputSchema,TrainedModelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TrainedModelCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TrainedModelCreateManyAndReturnArgs> = z.object({
  data: z.union([ TrainedModelCreateManyInputSchema,TrainedModelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TrainedModelDeleteArgsSchema: z.ZodType<Omit<Prisma.TrainedModelDeleteArgs, "select" | "include">> = z.object({
  where: TrainedModelWhereUniqueInputSchema,
}).strict() ;

export const TrainedModelUpdateArgsSchema: z.ZodType<Omit<Prisma.TrainedModelUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ TrainedModelUpdateInputSchema,TrainedModelUncheckedUpdateInputSchema ]),
  where: TrainedModelWhereUniqueInputSchema,
}).strict() ;

export const TrainedModelUpdateManyArgsSchema: z.ZodType<Prisma.TrainedModelUpdateManyArgs> = z.object({
  data: z.union([ TrainedModelUpdateManyMutationInputSchema,TrainedModelUncheckedUpdateManyInputSchema ]),
  where: TrainedModelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TrainedModelUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.TrainedModelUpdateManyAndReturnArgs> = z.object({
  data: z.union([ TrainedModelUpdateManyMutationInputSchema,TrainedModelUncheckedUpdateManyInputSchema ]),
  where: TrainedModelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TrainedModelDeleteManyArgsSchema: z.ZodType<Prisma.TrainedModelDeleteManyArgs> = z.object({
  where: TrainedModelWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EvaluationRunCreateArgsSchema: z.ZodType<Omit<Prisma.EvaluationRunCreateArgs, "select" | "include">> = z.object({
  data: z.union([ EvaluationRunCreateInputSchema,EvaluationRunUncheckedCreateInputSchema ]),
}).strict() ;

export const EvaluationRunUpsertArgsSchema: z.ZodType<Omit<Prisma.EvaluationRunUpsertArgs, "select" | "include">> = z.object({
  where: EvaluationRunWhereUniqueInputSchema,
  create: z.union([ EvaluationRunCreateInputSchema,EvaluationRunUncheckedCreateInputSchema ]),
  update: z.union([ EvaluationRunUpdateInputSchema,EvaluationRunUncheckedUpdateInputSchema ]),
}).strict() ;

export const EvaluationRunCreateManyArgsSchema: z.ZodType<Prisma.EvaluationRunCreateManyArgs> = z.object({
  data: z.union([ EvaluationRunCreateManyInputSchema,EvaluationRunCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EvaluationRunCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EvaluationRunCreateManyAndReturnArgs> = z.object({
  data: z.union([ EvaluationRunCreateManyInputSchema,EvaluationRunCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EvaluationRunDeleteArgsSchema: z.ZodType<Omit<Prisma.EvaluationRunDeleteArgs, "select" | "include">> = z.object({
  where: EvaluationRunWhereUniqueInputSchema,
}).strict() ;

export const EvaluationRunUpdateArgsSchema: z.ZodType<Omit<Prisma.EvaluationRunUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ EvaluationRunUpdateInputSchema,EvaluationRunUncheckedUpdateInputSchema ]),
  where: EvaluationRunWhereUniqueInputSchema,
}).strict() ;

export const EvaluationRunUpdateManyArgsSchema: z.ZodType<Prisma.EvaluationRunUpdateManyArgs> = z.object({
  data: z.union([ EvaluationRunUpdateManyMutationInputSchema,EvaluationRunUncheckedUpdateManyInputSchema ]),
  where: EvaluationRunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EvaluationRunUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.EvaluationRunUpdateManyAndReturnArgs> = z.object({
  data: z.union([ EvaluationRunUpdateManyMutationInputSchema,EvaluationRunUncheckedUpdateManyInputSchema ]),
  where: EvaluationRunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EvaluationRunDeleteManyArgsSchema: z.ZodType<Prisma.EvaluationRunDeleteManyArgs> = z.object({
  where: EvaluationRunWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ModelPredictionCreateArgsSchema: z.ZodType<Omit<Prisma.ModelPredictionCreateArgs, "select" | "include">> = z.object({
  data: z.union([ ModelPredictionCreateInputSchema,ModelPredictionUncheckedCreateInputSchema ]),
}).strict() ;

export const ModelPredictionUpsertArgsSchema: z.ZodType<Omit<Prisma.ModelPredictionUpsertArgs, "select" | "include">> = z.object({
  where: ModelPredictionWhereUniqueInputSchema,
  create: z.union([ ModelPredictionCreateInputSchema,ModelPredictionUncheckedCreateInputSchema ]),
  update: z.union([ ModelPredictionUpdateInputSchema,ModelPredictionUncheckedUpdateInputSchema ]),
}).strict() ;

export const ModelPredictionCreateManyArgsSchema: z.ZodType<Prisma.ModelPredictionCreateManyArgs> = z.object({
  data: z.union([ ModelPredictionCreateManyInputSchema,ModelPredictionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelPredictionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ModelPredictionCreateManyAndReturnArgs> = z.object({
  data: z.union([ ModelPredictionCreateManyInputSchema,ModelPredictionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelPredictionDeleteArgsSchema: z.ZodType<Omit<Prisma.ModelPredictionDeleteArgs, "select" | "include">> = z.object({
  where: ModelPredictionWhereUniqueInputSchema,
}).strict() ;

export const ModelPredictionUpdateArgsSchema: z.ZodType<Omit<Prisma.ModelPredictionUpdateArgs, "select" | "include">> = z.object({
  data: z.union([ ModelPredictionUpdateInputSchema,ModelPredictionUncheckedUpdateInputSchema ]),
  where: ModelPredictionWhereUniqueInputSchema,
}).strict() ;

export const ModelPredictionUpdateManyArgsSchema: z.ZodType<Prisma.ModelPredictionUpdateManyArgs> = z.object({
  data: z.union([ ModelPredictionUpdateManyMutationInputSchema,ModelPredictionUncheckedUpdateManyInputSchema ]),
  where: ModelPredictionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ModelPredictionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ModelPredictionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ModelPredictionUpdateManyMutationInputSchema,ModelPredictionUncheckedUpdateManyInputSchema ]),
  where: ModelPredictionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ModelPredictionDeleteManyArgsSchema: z.ZodType<Prisma.ModelPredictionDeleteManyArgs> = z.object({
  where: ModelPredictionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;